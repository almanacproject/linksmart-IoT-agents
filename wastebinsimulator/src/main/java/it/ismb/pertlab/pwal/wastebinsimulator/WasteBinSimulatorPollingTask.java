/*
 * PWAL -Waste Bin Data Simulator
 * 
 * Copyright (c) 2014 Dario Bonino
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */
package it.ismb.pertlab.pwal.wastebinsimulator;

import it.ismb.pertlab.pwal.api.devices.interfaces.Device;
import it.ismb.pertlab.pwal.api.devices.polling.DataUpdateSubscription;
import it.ismb.pertlab.pwal.wastebinsimulator.data.WasteBinSensorData;

import java.util.Collection;
import java.util.Set;

import org.slf4j.Logger;

/**
 * The polling task handling actual polling for simulated waste bin sensors. It
 * takes care of querying the network-level end point and to deliver updates to
 * the subscribing devices, with the required timing properties.
 * 
 * @author <a href="mailto:dario.bonino@gmail.com">Dario Bonino</a>
 */
public class WasteBinSimulatorPollingTask implements Runnable
{
	// a reference to the WasteBinSimulator logger
	private Logger logger;
	
	// a reference to the WasteBinSimulator DeviceManager
	private WasteBinSimulatorManager manager;
	
	
	/**
	 * Creates a new polling task managed by the given DeviceManager and using the given logger to printout working information.
	 * @param manager The {@link WasteBinSimulatorManager} controlling this polling task.
	 * @param logger The {@link Logger} instance used to log relevant information generated by this task.
	 */
	public WasteBinSimulatorPollingTask(WasteBinSimulatorManager manager, Logger logger)
	{
		// the waste bin device manager
		this.manager = manager;
		
		// the logger
		this.logger = logger;
	}
	
	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Runnable#run()
	 */
	@Override
	public void run()
	{
		//info
		this.logger.info("Polling " + this.manager.getActiveSubscriptionsSize() + "subscription...");
		
		// if there is at least one subscription
		if (this.manager.getActiveSubscriptionsSize() > 0)
		{
			// get the available updates
			Collection<WasteBinSensorData> updates = this.manager.getNetworkLayer().getLatestUpdates();
			
			//iterate over the available updates
			for (WasteBinSensorData cUpdate : updates)
			{
				
				// get all active subscriptions for the give lUID
				// debug
				this.logger.debug("lUID: " + cUpdate.getlUID());
				
				// dispatch the new measure if a subscription is registered for
				// the given lUID
				Set<DataUpdateSubscription<WasteBinSensorData>> subscriptionBucket = this.manager
						.getSubscriptions(cUpdate.getlUID());
				
				//if there are subscriptions for the given device
				if (subscriptionBucket != null)
				{
					//iterate over device subscriptions
					for (DataUpdateSubscription<WasteBinSensorData> subscription : subscriptionBucket)
					{
						//if the current subscription is not null
						if (subscription != null)
						{
							//check how much time passed since last update
							long currentTime = System.currentTimeMillis();
							
							// if needed generate a new update event (low-level)
							if (currentTime - subscription.getTimestamp() >= (subscription.getDeliveryTimeMillis()))
							{
								//update the device
								subscription.setTimestamp(currentTime);
								subscription.getSubscriber().handleUpdate(cUpdate);
								
								//log
								this.logger.info("Updating device of type "
										+ ((Device) subscription.getSubscriber()).getType()+" lUID:"+cUpdate.getlUID());
							}
						}
					}
				}
			}
		}
		
	}
	
}
