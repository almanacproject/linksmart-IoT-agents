package eu.ebbits.pwal.tests.dev;

import java.lang.reflect.Method;

import junit.framework.Assert;
import junit.framework.TestCase;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import eu.ebbits.pwal.api.annotations.PWALEventAnnotation;
import eu.ebbits.pwal.api.driver.PWALEventsDelegateSubscriber;
import eu.ebbits.pwal.api.model.PWALControlEvent;
import eu.ebbits.pwal.api.model.PWALEvent;
import eu.ebbits.pwal.impl.driver.test.TestDriver;
import eu.ebbits.pwal.impl.driver.test.TestEventsDelegate;

/**
 * Event delegate tests, used to verify how driver can expose event generation.
 * Within the PWAL Events are modeled as "reversed" services. Instead of being called, events can be generated inside the EventsDelegate and can be listened by subscribing class.
 * Important note: events generated by the EventsDelegate are NOT necessarily propagated to the Ebbits event-management system. They are more imagined as internal events, which can occure at extremely large rate (e.g. 100 events per second).
 * 
 * This test is based on the {@link TestDriver} class.
 *  
 * <p> 
 * Copyright (c) 2010-2013 the ebbits project. All Rights Reserved.
 *
 * @see eu.ebbits.pwal
 * @since PWAL 0.1.0
 */
public class PWALEventsDelegateTest extends TestCase implements PWALEventsDelegateSubscriber {

    @BeforeClass
    public static void setUpBeforeClass() throws Exception {
    }

    @AfterClass
    public static void tearDownAfterClass() throws Exception {
    }

    /*
     * All test in this case assume the use of local_driver
     * */
    private TestDriver local_driver;
    private TestEventsDelegate local_delegate;

    // support variables used to count events
    int calls_MyFloatServiceWithThreeArguments;
    int calls_MyIntServiceWithNoArguments;
    int calls_MyIntServiceWithOneArguments;
    int calls_MyIntServiceWithThreeArguments;
    int calls_MyIntServiceWithTwoArguments;
    int calls_MyServiceWithEvenAnArray;
    int calls_MyVoidServiceWithNoArguments;
    int calls_ThisMethodShallNotPass;
    int calls_ThisMethodShallNotPassNeither;

    /**
     * To void time- or order-related issues, each case uses its own instance of local_driver.
     * (According to the JUnit workflow, the setUp class is run before each test in the TestCase)
     * */
    @Before
    public void setUp() throws Exception {
        this.local_driver = new TestDriver();
        this.local_delegate = (TestEventsDelegate) this.local_driver.getEventsDelegate();
        this.calls_MyFloatServiceWithThreeArguments = 0;
        this.calls_MyIntServiceWithNoArguments = 0;
        this.calls_MyIntServiceWithOneArguments = 0;
        this.calls_MyIntServiceWithThreeArguments = 0;
        this.calls_MyIntServiceWithTwoArguments = 0;
        this.calls_MyServiceWithEvenAnArray = 0;
        this.calls_MyVoidServiceWithNoArguments = 0;
        this.calls_ThisMethodShallNotPass = 0;
        this.calls_ThisMethodShallNotPassNeither = 0;
    }

    /**
     * To void time- or order-related issues, each case uses its own instance of local_driver, which is cleaned up in this function.
     * (According to the JUnit workflow, the tearDown class is run after each test in the TestCase)
     * */
    @After
    public void tearDown() throws Exception {
        this.local_driver = null;
        this.local_delegate = null;
        System.gc();
    }

    /*
     * synchronized public void MyVoidServiceWithNoArguments() synchronized
     * public int MyIntServiceWithNoArguments() synchronized public int
     * MyIntServiceWithOneArguments(int a) synchronized public int
     * MyIntServiceWithTwoArguments(int a, int b) synchronized public int
     * MyIntServiceWithThreeArguments(int a,int b, int c) synchronized public
     * float MyFloatServiceWithThreeArguments(float a, float b, float c)
     * synchronized public int [] MyServiceWithEvenAnArray(int [] argarray)
     */

    /**
     * This test checks whether events are exposed correctly.
     * The {@link TestEventsDelegate} is reflective. This means that it contains a set of 7 well-known functions which are tagged with the {@link PWALEventAnnotation} to expose them.
     * The reflection-based mechanism of the driver assures they can be discovered and detected outside.
     * 
     * This test is very similar to the testServicesExposure test in the {@link TestServiceDelegate} suite, though reversed (Services are called from outside to inside the delegate, Events are generated from the delegate to external subscribers).
     *  
     * Using the methods of reflective delegates, it is also possible to check, beyond the name of the event, the number and type of the arguments and the return value type.
     */
    @Test
    public final void testEventsExposure() {
        // The DummyDriver exposes 7 methods, with different arguments

        // it also have other methods which should not be counted in there

        Assert.assertEquals(7, this.local_delegate.getPWALEventsCollectionSize());

        for (PWALEvent ev : this.local_delegate.getPWALEventsCollection()) {
            Method m = ev.getMethod();

            // all events have void return type
            Assert.assertEquals(void.class, m.getReturnType());

            if (m.getName().equals("MyVoidServiceWithNoArguments")) {
                Assert.assertEquals(m.getParameterTypes().length, 0);
            } else if (m.getName().equals("MyIntServiceWithNoArguments")) {
                Assert.assertEquals(m.getParameterTypes().length, 0);
            } else if (m.getName().equals("MyIntServiceWithOneArguments")) {
                Assert.assertEquals(m.getParameterTypes().length, 1);
                Assert.assertEquals(m.getParameterTypes()[0], int.class);
            } else if (m.getName().equals("MyIntServiceWithTwoArguments")) {
                Assert.assertEquals(m.getParameterTypes().length, 2);
                Assert.assertEquals(m.getParameterTypes()[0], int.class);
                Assert.assertEquals(m.getParameterTypes()[1], int.class);
            } else if (m.getName().equals("MyIntServiceWithThreeArguments")) {
                Assert.assertEquals(m.getParameterTypes().length, 3);
                Assert.assertEquals(m.getParameterTypes()[0], int.class);
                Assert.assertEquals(m.getParameterTypes()[1], int.class);
                Assert.assertEquals(m.getParameterTypes()[2], int.class);
            } else if (m.getName().equals("MyFloatServiceWithThreeArguments")) {
                Assert.assertEquals(m.getParameterTypes().length, 3);
                Assert.assertEquals(m.getParameterTypes()[0], double.class);
                Assert.assertEquals(m.getParameterTypes()[1], double.class);
                Assert.assertEquals(m.getParameterTypes()[2], double.class);
            } else if (m.getName().equals("MyServiceWithEvenAnArray")) {
                Assert.assertEquals(m.getParameterTypes().length, 1);
                Assert.assertEquals(m.getParameterTypes()[0], int[].class);
            } else {
                fail("Unexpected method name: " + m.getName());
            }
        }
    }

    /**
     * Based on the events exposed by the previously tested description (i.e. in the testServicesExposure test), it is possible to generate events.
     * This test checks that exposed methods are generated correctly (on the internal side).
     * 
     * This test is very similar to the testEventsCall test in the {@link TestServiceDelegate} suite, though reversed.
     */
    @Test
    public final void testEventsCalls() {

        Assert.assertEquals(0, ((TestEventsDelegate) this.local_delegate).calls_MyVoidServiceWithNoArguments);
        ((TestEventsDelegate) this.local_delegate).MyVoidServiceWithNoArguments();
        Assert.assertEquals(1, ((TestEventsDelegate) this.local_delegate).calls_MyVoidServiceWithNoArguments);

        Assert.assertEquals(0, ((TestEventsDelegate) this.local_delegate).calls_MyIntServiceWithNoArguments);
        ((TestEventsDelegate) this.local_delegate).MyIntServiceWithNoArguments();

        Assert.assertEquals(1, ((TestEventsDelegate) this.local_delegate).calls_MyIntServiceWithNoArguments);

        Assert.assertEquals(0, ((TestEventsDelegate) this.local_delegate).calls_MyIntServiceWithOneArguments);
        ((TestEventsDelegate) this.local_delegate).MyIntServiceWithOneArguments(5);
        Assert.assertEquals(1, ((TestEventsDelegate) this.local_delegate).calls_MyIntServiceWithOneArguments);

        Assert.assertEquals(0, ((TestEventsDelegate) this.local_delegate).calls_MyIntServiceWithTwoArguments);
        ((TestEventsDelegate) this.local_delegate).MyIntServiceWithTwoArguments(6, 7);
        Assert.assertEquals(1, ((TestEventsDelegate) this.local_delegate).calls_MyIntServiceWithTwoArguments);

        Assert.assertEquals(0, ((TestEventsDelegate) this.local_delegate).calls_MyIntServiceWithThreeArguments);
        ((TestEventsDelegate) this.local_delegate).MyIntServiceWithThreeArguments(8, 9, 10);
        Assert.assertEquals(1, ((TestEventsDelegate) this.local_delegate).calls_MyIntServiceWithThreeArguments);

        Assert.assertEquals(0, ((TestEventsDelegate) this.local_delegate).calls_MyFloatServiceWithThreeArguments);
        ((TestEventsDelegate) this.local_delegate).MyFloatServiceWithThreeArguments(1.1, 1.2, 1.3);
        Assert.assertEquals(1, ((TestEventsDelegate) this.local_delegate).calls_MyFloatServiceWithThreeArguments);

        int[] testarray = new int[10];
        for (int i = 0; i < testarray.length; i++) {
            testarray[i] = i;
        }

        Assert.assertEquals(0, ((TestEventsDelegate) this.local_delegate).calls_MyServiceWithEvenAnArray);
        ((TestEventsDelegate) this.local_delegate).MyServiceWithEvenAnArray(testarray);
        Assert.assertEquals(1, ((TestEventsDelegate) this.local_delegate).calls_MyServiceWithEvenAnArray);

    }

    /**
     * This test verifies that the PWAL publish/subscribe mechanism works correctly. 
     * In order to do so, this test class implements the {@link PWALEventsDelegateSubscriberImpl} interface, and attempts a subcription.
     */
    @Test
    public final void testSubscriptions() {

        this.local_delegate.subscribe(this);

        Assert.assertTrue(this.local_delegate.isSubscribed(this));

        // try to subscribe again, just in case
        this.local_delegate.subscribe(this);
        Assert.assertTrue(this.local_delegate.isSubscribed(this));

        this.local_delegate.unsubscribe(this);
        Assert.assertFalse(this.local_delegate.isSubscribed(this));
    }

    /**
     * This test checks that exposed methods are generated correctly on the internal side, and are also propagated correctly to all subscribers.
     * In order to do so, this class subscribes the eventdelegate, and then invokes events generation externally, counting the number of generated events.
     */
    @Test
    public final void testEventsCallsSubscribing() {

        // I should subscribe to methods one by one, exploring the event tables
        // by hand

        this.local_delegate.subscribe(this);

        Assert.assertEquals(0, ((TestEventsDelegate) this.local_delegate).calls_MyVoidServiceWithNoArguments);
        Assert.assertEquals(0, this.calls_MyVoidServiceWithNoArguments);
        ((TestEventsDelegate) this.local_delegate).MyVoidServiceWithNoArguments();
        Assert.assertEquals(1, ((TestEventsDelegate) this.local_delegate).calls_MyVoidServiceWithNoArguments);
        Assert.assertEquals(1, this.calls_MyVoidServiceWithNoArguments);

        Assert.assertEquals(0, ((TestEventsDelegate) this.local_delegate).calls_MyIntServiceWithNoArguments);
        Assert.assertEquals(0, this.calls_MyIntServiceWithNoArguments);
        ((TestEventsDelegate) this.local_delegate).MyIntServiceWithNoArguments();
        Assert.assertEquals(1, ((TestEventsDelegate) this.local_delegate).calls_MyIntServiceWithNoArguments);
        Assert.assertEquals(1, this.calls_MyIntServiceWithNoArguments);

        Assert.assertEquals(0, ((TestEventsDelegate) this.local_delegate).calls_MyIntServiceWithOneArguments);
        Assert.assertEquals(0, this.calls_MyIntServiceWithOneArguments);
        ((TestEventsDelegate) this.local_delegate).MyIntServiceWithOneArguments(5);
        Assert.assertEquals(1, ((TestEventsDelegate) this.local_delegate).calls_MyIntServiceWithOneArguments);
        Assert.assertEquals(1, this.calls_MyIntServiceWithOneArguments);

        Assert.assertEquals(0, ((TestEventsDelegate) this.local_delegate).calls_MyIntServiceWithTwoArguments);
        Assert.assertEquals(0, this.calls_MyIntServiceWithTwoArguments);
        ((TestEventsDelegate) this.local_delegate).MyIntServiceWithTwoArguments(6, 7);
        Assert.assertEquals(1, ((TestEventsDelegate) this.local_delegate).calls_MyIntServiceWithTwoArguments);
        Assert.assertEquals(1, this.calls_MyIntServiceWithTwoArguments);

        Assert.assertEquals(0, ((TestEventsDelegate) this.local_delegate).calls_MyIntServiceWithThreeArguments);
        Assert.assertEquals(0, this.calls_MyIntServiceWithThreeArguments);
        ((TestEventsDelegate) this.local_delegate).MyIntServiceWithThreeArguments(8, 9, 10);
        Assert.assertEquals(1, ((TestEventsDelegate) this.local_delegate).calls_MyIntServiceWithThreeArguments);
        Assert.assertEquals(1, this.calls_MyIntServiceWithThreeArguments);

        Assert.assertEquals(0, this.calls_MyFloatServiceWithThreeArguments);
        ((TestEventsDelegate) this.local_delegate).MyFloatServiceWithThreeArguments(1.1, 1.2, 1.3);
        Assert.assertEquals(1, ((TestEventsDelegate) this.local_delegate).calls_MyFloatServiceWithThreeArguments);
        Assert.assertEquals(1, this.calls_MyFloatServiceWithThreeArguments);

        int[] testarray = new int[10];
        for (int i = 0; i < testarray.length; i++) {
            testarray[i] = i;
        }

        Assert.assertEquals(0, ((TestEventsDelegate) this.local_delegate).calls_MyServiceWithEvenAnArray);
        Assert.assertEquals(0, this.calls_MyServiceWithEvenAnArray);
        ((TestEventsDelegate) this.local_delegate).MyServiceWithEvenAnArray(testarray);
        Assert.assertEquals(1, ((TestEventsDelegate) this.local_delegate).calls_MyServiceWithEvenAnArray);
        Assert.assertEquals(1, this.calls_MyServiceWithEvenAnArray);

    }

    /**
     * This test checks that exposed methods are generated correctly on the internal side, and are not propagated to unsubscribed objects.
     * In order to do so, this class subscribes the eventdelegate, and then invokes events generation externally, counting the number of generated events.
     */
    public final void testEventsCallsNotSubscribing() {
        
        //this.local_delegate.subscribe(this);

        Assert.assertEquals(0, ((TestEventsDelegate) this.local_delegate).calls_MyVoidServiceWithNoArguments);
        Assert.assertEquals(0, this.calls_MyVoidServiceWithNoArguments);
        ((TestEventsDelegate) this.local_delegate).MyVoidServiceWithNoArguments();
        Assert.assertEquals(1, ((TestEventsDelegate) this.local_delegate).calls_MyVoidServiceWithNoArguments);
        Assert.assertEquals(0, this.calls_MyVoidServiceWithNoArguments);

        Assert.assertEquals(0, ((TestEventsDelegate) this.local_delegate).calls_MyIntServiceWithNoArguments);
        Assert.assertEquals(0, this.calls_MyIntServiceWithNoArguments);
        ((TestEventsDelegate) this.local_delegate).MyIntServiceWithNoArguments();
        Assert.assertEquals(1, ((TestEventsDelegate) this.local_delegate).calls_MyIntServiceWithNoArguments);
        Assert.assertEquals(0, this.calls_MyIntServiceWithNoArguments);

        Assert.assertEquals(0, ((TestEventsDelegate) this.local_delegate).calls_MyIntServiceWithOneArguments);
        Assert.assertEquals(0, this.calls_MyIntServiceWithOneArguments);
        ((TestEventsDelegate) this.local_delegate).MyIntServiceWithOneArguments(5);
        Assert.assertEquals(1, ((TestEventsDelegate) this.local_delegate).calls_MyIntServiceWithOneArguments);
        Assert.assertEquals(0, this.calls_MyIntServiceWithOneArguments);

        Assert.assertEquals(0, ((TestEventsDelegate) this.local_delegate).calls_MyIntServiceWithTwoArguments);
        Assert.assertEquals(0, this.calls_MyIntServiceWithTwoArguments);
        ((TestEventsDelegate) this.local_delegate).MyIntServiceWithTwoArguments(6, 7);
        Assert.assertEquals(1, ((TestEventsDelegate) this.local_delegate).calls_MyIntServiceWithTwoArguments);
        Assert.assertEquals(0, this.calls_MyIntServiceWithTwoArguments);

        Assert.assertEquals(0, ((TestEventsDelegate) this.local_delegate).calls_MyIntServiceWithThreeArguments);
        Assert.assertEquals(0, this.calls_MyIntServiceWithThreeArguments);
        ((TestEventsDelegate) this.local_delegate).MyIntServiceWithThreeArguments(8, 9, 10);
        Assert.assertEquals(1, ((TestEventsDelegate) this.local_delegate).calls_MyIntServiceWithThreeArguments);
        Assert.assertEquals(0, this.calls_MyIntServiceWithThreeArguments);

        Assert.assertEquals(0, this.calls_MyFloatServiceWithThreeArguments);
        ((TestEventsDelegate) this.local_delegate).MyFloatServiceWithThreeArguments(1.1, 1.2, 1.3);
        Assert.assertEquals(1, ((TestEventsDelegate) this.local_delegate).calls_MyFloatServiceWithThreeArguments);
        Assert.assertEquals(0, this.calls_MyFloatServiceWithThreeArguments);

        int[] testarray = new int[10];
        for (int i = 0; i < testarray.length; i++) {
            testarray[i] = i;
        }

        Assert.assertEquals(0, ((TestEventsDelegate) this.local_delegate).calls_MyServiceWithEvenAnArray);
        Assert.assertEquals(0, this.calls_MyServiceWithEvenAnArray);
        ((TestEventsDelegate) this.local_delegate).MyServiceWithEvenAnArray(testarray);
        Assert.assertEquals(1, ((TestEventsDelegate) this.local_delegate).calls_MyServiceWithEvenAnArray);
        Assert.assertEquals(0, this.calls_MyServiceWithEvenAnArray);

    }

    int events_counter = 0;

    
    /**
     * Support function intercepting generated events.
     */
    @Override
    synchronized public void eventReceived(PWALEvent e) {
        //System.out.println(e.toString());

        switch (events_counter) {
        case 0:
            Assert.assertEquals("MyVoidServiceWithNoArguments", e.getName());
            break;
        case 1:
            Assert.assertEquals("MyIntServiceWithNoArguments", e.getName());
            break;
        case 2:
            Assert.assertEquals("MyIntServiceWithOneArguments", e.getName());
            break;
        case 3:
            Assert.assertEquals("MyIntServiceWithTwoArguments", e.getName());
            break;
        case 4:
            Assert.assertEquals("MyIntServiceWithThreeArguments", e.getName());
            break;
        case 5:
            Assert.assertEquals("MyFloatServiceWithThreeArguments", e.getName());
            break;
        case 6:
            Assert.assertEquals("MyServiceWithEvenAnArray", e.getName());
            break;
        default:
            fail();
        }

        if ("MyVoidServiceWithNoArguments".equals(e.getName())) {
            this.calls_MyVoidServiceWithNoArguments++;
        } else if ("MyIntServiceWithNoArguments".equals(e.getName())) {
            this.calls_MyIntServiceWithNoArguments++;
        } else if ("MyIntServiceWithOneArguments".equals(e.getName())) {
            this.calls_MyIntServiceWithOneArguments++;
            Assert.assertEquals(1, e.getVariablesSize());
            // FIXME here the catch... how do I know it's int ?
            Assert.assertEquals(5, e.getVariable("a").read().toInteger());
        } else if ("MyIntServiceWithTwoArguments".equals(e.getName())) {
            this.calls_MyIntServiceWithTwoArguments++;
            Assert.assertEquals(2, e.getVariablesSize());
            // FIXME here the catch... how do I know it's int ?
            Assert.assertEquals(6, e.getVariable("a").read().toInteger());
            Assert.assertEquals(7, e.getVariable("b").read().toInteger());
        } else if ("MyIntServiceWithThreeArguments".equals(e.getName())) {
            this.calls_MyIntServiceWithThreeArguments++;
            Assert.assertEquals(3, e.getVariablesSize());
            // FIXME here the catch... how do I know it's int ?
            Assert.assertEquals(8, e.getVariable("a").read().toInteger());
            Assert.assertEquals(9, e.getVariable("b").read().toInteger());
            Assert.assertEquals(10, e.getVariable("c").read().toInteger());
        }
         else if ("MyFloatServiceWithThreeArguments".equals(e.getName())) {
                this.calls_MyFloatServiceWithThreeArguments++;
                Assert.assertEquals(3, e.getVariablesSize());
                // FIXME here the catch... how do I know it's int ?
                Assert.assertEquals(1.1, e.getVariable("d").read().toFloat(),0.01);
                Assert.assertEquals(1.2, e.getVariable("e").read().toFloat(),0.01);
                Assert.assertEquals(1.3, e.getVariable("f").read().toFloat(),0.01);
            }
        else if ("MyServiceWithEvenAnArray".equals(e.getName())) {
            this.calls_MyServiceWithEvenAnArray++;
            Assert.assertEquals(1, e.getVariablesSize());
            // FIXME here the catch... how do I know it's int[] ?
            int [] arr = (int[]) e.getVariable("argarray").read().getValue();
            
            for(int i=0;i<arr.length;i++) {
                Assert.assertEquals(i,arr[i]);
            }
            
        } 
        else {
            fail("unexpected value ["+e.getName()+"]");
        }

        this.events_counter++;
    }

    @Override
    public void driverStarted(PWALControlEvent e) {
        // TODO Auto-generated method stub
        
    }

    @Override
    public void driverStopped(PWALControlEvent e) {
        // TODO Auto-generated method stub
        
    }

    @Override
    public void driverDebug(PWALControlEvent e) {
        // TODO Auto-generated method stub
        
    }

    @Override
    public void driverInfo(PWALControlEvent e) {
        // TODO Auto-generated method stub
        
    }

    @Override
    public void driverWarning(PWALControlEvent e) {
        // TODO Auto-generated method stub
        
    }

    @Override
    public void driverError(PWALControlEvent e) {
        // TODO Auto-generated method stub
        
    }

    @Override
    public void driverCriticalError(PWALControlEvent e) {
        // TODO Auto-generated method stub
        
    }

}
