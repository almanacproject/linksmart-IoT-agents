package eu.ebbits.pwal.impl.driver.test;

import org.osgi.service.component.ComponentContext;

import eu.ebbits.pwal.api.model.PWALControlEvent;
import eu.ebbits.pwal.impl.driver.PWALDriverImpl;
import eu.ebbits.pwal.impl.driver.PWALEventsDelegateImpl;
import eu.ebbits.pwal.impl.driver.PWALServicesDelegateImpl;
import eu.ebbits.pwal.impl.driver.PWALVariablesDelegateImpl;

/**
 * 
 * This is a dummy driver which can be used to showcase the features of PWAL drivers.
 * It contains a reflective Service Delegate, a reflective events delegate and a mutable 
 * VariablesDelegate, so it should represent the most complex case of PWALDrivers.
 * 
 * This package is imagined as part of the new ebbits DDK: it will thus undergo significant 
 * modifications in the ebbits iterative process. 
 * It will be thus documented during the final release after all needed adapters are available.
 * 
 * Copyright (c) 2010-2012 the ebbits project. All Rights Reserved.
 *
 * @author		ISMB
 * @version		%I%, %G%
 * @see			eu.ebbits.pwal.impl.driver.PWALDriverImpl
 * @since		PWAL 0.1.0
 */
public class TestDriver extends PWALDriverImpl {

	public TestDriver() {
		this.driverName = "DummyDriver";
		this.driverVersion = "0.0";
	}
	
	@Override
	protected PWALVariablesDelegateImpl initVariablesDelegate() {
		return new TestVariablesDelegate(this);
	}

	@Override
	protected PWALServicesDelegateImpl initServicesDelegate() {
		return new TestServicesDelegate(this);
	}

	@Override
	protected PWALEventsDelegateImpl initEventsDelegate() {
		return new TestEventsDelegate(this);
	}

	@Override
	public void init(ComponentContext context) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void run() {
		// TODO Auto-generated method stub
		
	}

	public void my_gen_debug() {
		this.signalDebugEvent(new PWALControlEvent(PWALControlEvent.ControlEventType.DEFAULT_DEBUG));
		
	}
	
	public void my_gen_info() {
		this.signalInfoEvent(new PWALControlEvent(PWALControlEvent.ControlEventType.DEFAULT_INFO));
		
	}


	public void my_gen_warning() {
		this.signalWarningEvent(new PWALControlEvent(PWALControlEvent.ControlEventType.DEFAULT_WARNING));
		
	}


	public void my_gen_error() {
		this.signalErrorEvent(new PWALControlEvent(PWALControlEvent.ControlEventType.DEFAULT_ERROR));
		
	}
	
	public void my_gen_critical() {
		this.signalCriticalEvent(new PWALControlEvent(PWALControlEvent.ControlEventType.DEFAULT_CRITICAL));
		
	}

}
