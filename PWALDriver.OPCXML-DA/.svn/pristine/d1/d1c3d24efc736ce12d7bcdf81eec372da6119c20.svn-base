package eu.ebbits.pwal.impl.driver.opcxmlda.stub;

public class SubscribeReplyItemList extends SerializableADBBeanImplementation {
	/* This type was generated from the piece of schema that had
		 name = SubscribeReplyItemList
		 Namespace URI = http://opcfoundation.org/webservices/XMLDA/1.0/
		 Namespace Prefix = ns1
	 */

	private static final String NAME = SubscribeReplyItemList.class.getSimpleName();
	
	protected String getClassName() {
		return this.getClass().getSimpleName();
	}
	


	/**
	 * field for Items
	 * This was an Array!
	 */


	protected SubscribeItemValue[] localItems ;

	/*  This tracker boolean wil be used to detect whether the user called the set method
	 *   for this attribute. It will be used to determine whether to include this field
	 *   in the serialized XML
	 */
	protected boolean localItemsTracker = false ;


	/**
	 * Auto generated getter method
	 * @return SubscribeItemValue[]
	 */
	public  SubscribeItemValue[] getItems() {
		return localItems;
	}






	/**
	 * validate the array for Items
	 */
	protected void validateItems(SubscribeItemValue[] param) {

	}


	/**
	 * Auto generated setter method
	 * @param param Items
	 */
	public void setItems(SubscribeItemValue[] param) {
		SubscribeItemValue[] valueToUse = param.clone(); 
		
		validateItems(valueToUse);

		if (valueToUse != null) {
			//update the setting tracker
			localItemsTracker = true;
		} else {
			localItemsTracker = false;

		}

		this.localItems=valueToUse;
	}



	/**
	 * Auto generated add method for the array for convenience
	 * @param param SubscribeItemValue
	 */
	public void addItems(SubscribeItemValue param) {
		if (localItems == null) {
			localItems = new SubscribeItemValue[]{};
		}


		//update the setting tracker
		localItemsTracker = true;


		java.util.List list =
				org.apache.axis2.databinding.utils.ConverterUtil.toList(localItems);
		list.add(param);
		this.localItems =
				(SubscribeItemValue[])list.toArray(
						new SubscribeItemValue[list.size()]);

	}


	/**
	 * field for RevisedSamplingRate
	 * This was an Attribute!
	 */


	protected int localRevisedSamplingRate ;


	/**
	 * Auto generated getter method
	 * @return int
	 */
	public  int getRevisedSamplingRate() {
		return localRevisedSamplingRate;
	}



	/**
	 * Auto generated setter method
	 * @param param RevisedSamplingRate
	 */
	public void setRevisedSamplingRate(int param) {

		this.localRevisedSamplingRate=param;


	}


	/**
	 *
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement (
			final javax.xml.namespace.QName parentQName,
			final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



		org.apache.axiom.om.OMDataSource dataSource =
				new org.apache.axis2.databinding.ADBDataSource(this,parentQName) {

			public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
				SubscribeReplyItemList.this.serialize(parentQName,factory,xmlWriter);
			}
		};
		return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
				parentQName,factory,dataSource);

	}

	protected void writeAttributes(org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter, String prefix, String namespace) 
			throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
		if (localRevisedSamplingRate!=java.lang.Integer.MIN_VALUE) {
			writeAttribute("",
					"RevisedSamplingRate",
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRevisedSamplingRate), xmlWriter);
		}
		if (localItemsTracker) {
			if (localItems!=null) {
				for (int i = 0;i < localItems.length;i++) {
					if (localItems[i] != null) {
						localItems[i].serialize(new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/","Items"),
								factory,xmlWriter);
					} else {
						// we don't have to do any thing since minOccures is zero
					}
				}
			} else {
				throw new org.apache.axis2.databinding.ADBException("Items cannot be null!!");
			}
		}
		xmlWriter.writeEndElement();
	}


	/**
	 * databinding method to get an XML representation of this object
	 *
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
			throws org.apache.axis2.databinding.ADBException{



		java.util.ArrayList elementList = new java.util.ArrayList();
		java.util.ArrayList attribList = new java.util.ArrayList();

		if (localItemsTracker) {
			if (localItems!=null) {
				for (int i = 0;i < localItems.length;i++) {

					if (localItems[i] != null) {
						elementList.add(new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/",
								"Items"));
						elementList.add(localItems[i]);
					} else {

						// nothing to do

					}

				}
			} else {

				throw new org.apache.axis2.databinding.ADBException("Items cannot be null!!");

			}

		}
		attribList.add(
				new javax.xml.namespace.QName("","RevisedSamplingRate"));

		attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRevisedSamplingRate));


		return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



	}



	/**
	 *  Factory class that keeps the parse method
	 */
	public static class Factory extends GenericFactory {

		/**
		 * static method to create the object
		 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
		 *			 If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
		 * Postcondition: If this object is an element, the reader is positioned at its end element
		 *			 If this object is a complex type, the reader is positioned at the end element of its outer element
		 */
		public static SubscribeReplyItemList parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
			SubscribeReplyItemList object =
					new SubscribeReplyItemList();

			try {

				while (!reader.isStartElement() && !reader.isEndElement())
					reader.next();

				SubscribeReplyItemList result = (SubscribeReplyItemList) checkADBBeanType(NAME,reader); 
				if(result!=null) {
					return result;
				}


				// Note all attributes that were handled. Used to differ normal attributes
				// from anyAttributes.
				java.util.Vector<String> handledAttributes = new java.util.Vector<String>();

				// handle attribute "RevisedSamplingRate"
				handleRevisedSamplingRate(reader.getAttributeValue(null,"RevisedSamplingRate"),object,handledAttributes);

				reader.next();

				java.util.ArrayList<Object> list1 = new java.util.ArrayList<Object>();


				while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

				if (reader.isStartElement() && new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/","Items").equals(reader.getName())) {

					// Process the array and step past its final element's end.
					list1.add(SubscribeItemValue.Factory.parse(reader));

					//loop until we find a start element that is not part of this array
					boolean loopDone1 = false;
					while(!loopDone1) {
						// Ensure we are at the EndElement
						while (!reader.isEndElement()) {
							reader.next();
						}
						// Step out of this element
						reader.next();
						// Step to next element event.
						while (!reader.isStartElement() && !reader.isEndElement())
							reader.next();
						if (reader.isEndElement()) {
							//two continuous end elements means we are exiting the xml structure
							loopDone1 = true;
						} else {
							if (new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/","PropertyNames").equals(reader.getName())) {
								list1.add(SubscribeReplyItemList.Factory.parse(reader));

							}else{
								loopDone1 = true;
							}
						}
					}
					
					// call the converter utility  to convert and set the array

					object.setItems((SubscribeItemValue[])
							org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
									SubscribeItemValue.class,
									list1));

				}  // End of if for expected property start element

				else {

				}

				while (!reader.isStartElement() && !reader.isEndElement())
					reader.next();

				if (reader.isStartElement())
					// A start element we are not expecting indicates a trailing invalid property
					throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());




			} catch (javax.xml.stream.XMLStreamException e) {
				throw new java.lang.Exception(e);
			}

			return object;
		}

	}//end of factory class



}
