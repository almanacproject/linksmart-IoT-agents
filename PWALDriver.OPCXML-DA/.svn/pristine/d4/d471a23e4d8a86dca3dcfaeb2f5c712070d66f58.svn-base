package eu.ebbits.pwal.impl.driver.opcxmlda.stub;

public class OPCQuality extends ADBBeanImplementation {
	/* This type was generated from the piece of schema that had
		 name = OPCQuality
		 Namespace URI = http://opcfoundation.org/webservices/XMLDA/1.0/
		 Namespace Prefix = ns1
	 */
	
	private static final String NAME = OPCQuality.class.getSimpleName();

	protected String getClassName() {
		return this.getClass().getSimpleName();
	}

	/**
	 * field for QualityField
	 * This was an Attribute!
	 */


	protected QualityBits localQualityField ;


	/**
	 * Auto generated getter method
	 * @return QualityBits
	 */
	public  QualityBits getQualityField() {
		return localQualityField;
	}



	/**
	 * Auto generated setter method
	 * @param param QualityField
	 */
	public void setQualityField(QualityBits param) {

		this.localQualityField=param;


	}


	/**
	 * field for LimitField
	 * This was an Attribute!
	 */


	protected LimitBits localLimitField ;


	/**
	 * Auto generated getter method
	 * @return LimitBits
	 */
	public  LimitBits getLimitField() {
		return localLimitField;
	}



	/**
	 * Auto generated setter method
	 * @param param LimitField
	 */
	public void setLimitField(LimitBits param) {

		this.localLimitField=param;


	}


	/**
	 * field for VendorField
	 * This was an Attribute!
	 */


	protected org.apache.axis2.databinding.types.UnsignedByte localVendorField =
			org.apache.axis2.databinding.utils.ConverterUtil.convertToUnsignedByte("0");


	/**
	 * Auto generated getter method
	 * @return org.apache.axis2.databinding.types.UnsignedByte
	 */
	public  org.apache.axis2.databinding.types.UnsignedByte getVendorField() {
		return localVendorField;
	}



	/**
	 * Auto generated setter method
	 * @param param VendorField
	 */
	public void setVendorField(org.apache.axis2.databinding.types.UnsignedByte param) {

		this.localVendorField=param;


	}


	protected void writeAttributes(org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter, String prefix, String namespace) 
			throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
		if (localQualityField != null) {
			writeAttribute("",
					"QualityField",
					localQualityField.toString(), xmlWriter);
		}
		if (localLimitField != null) {
			writeAttribute("",
					"LimitField",
					localLimitField.toString(), xmlWriter);
		}
		if (localVendorField != null) {
			writeAttribute("",
					"VendorField",
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localVendorField), xmlWriter);
		}
		xmlWriter.writeEndElement();
	}


	/**
	 * databinding method to get an XML representation of this object
	 *
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
			throws org.apache.axis2.databinding.ADBException{


		java.util.ArrayList<Object> elementList = new java.util.ArrayList<Object>();
		java.util.ArrayList<Object> attribList = new java.util.ArrayList<Object>();

		attribList.add(new javax.xml.namespace.QName("","QualityField"));
		attribList.add(localQualityField.toString());
		attribList.add(new javax.xml.namespace.QName("","LimitField"));
		attribList.add(localLimitField.toString());
		attribList.add(new javax.xml.namespace.QName("","VendorField"));
		attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localVendorField));
		return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
	}



	/**
	 *  Factory class that keeps the parse method
	 */
	public static class Factory{




		/**
		 * static method to create the object
		 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
		 *			 If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
		 * Postcondition: If this object is an element, the reader is positioned at its end element
		 *			 If this object is a complex type, the reader is positioned at the end element of its outer element
		 */
		public static OPCQuality parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
			OPCQuality object =
					new OPCQuality();

			try {

				while (!reader.isStartElement() && !reader.isEndElement())
					reader.next();

				OPCQuality result = (OPCQuality) checkADBBeanType(NAME,reader); 
				if(result!=null) {
					return result;
				}

				// Note all attributes that were handled. Used to differ normal attributes
				// from anyAttributes.
				java.util.Vector<String> handledAttributes = new java.util.Vector<String>();

				// handle attribute "QualityField"
				String tempAttribQualityField = reader.getAttributeValue(null,"QualityField");
				if (tempAttribQualityField!=null) {
					object.setQualityField(
							QualityBits.Factory.fromString(reader,tempAttribQualityField));
				}
				handledAttributes.add("QualityField");

				// handle attribute "LimitField"
				String tempAttribLimitField = reader.getAttributeValue(null,"LimitField");
				if (tempAttribLimitField!=null) {
					object.setLimitField(
							LimitBits.Factory.fromString(reader,tempAttribLimitField));
				}
				handledAttributes.add("LimitField");

				// handle attribute "VendorField"
				String tempAttribVendorField = reader.getAttributeValue(null,"VendorField");
				if (tempAttribVendorField!=null) {
					object.setVendorField(
							org.apache.axis2.databinding.utils.ConverterUtil.convertToUnsignedByte(tempAttribVendorField));
				}
				handledAttributes.add("VendorField");

				reader.next();

			} catch (javax.xml.stream.XMLStreamException e) {
				throw new java.lang.Exception(e);
			}

			return object;
		}

	}//end of factory class



}

