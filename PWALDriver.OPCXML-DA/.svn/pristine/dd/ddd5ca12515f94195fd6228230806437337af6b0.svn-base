package eu.ebbits.pwal.impl.driver.opcxmlda.stub;

public class ItemProperty extends ItemNameADBBeanImplementation {
	/* This type was generated from the piece of schema that had
		 name = ItemProperty
		 Namespace URI = http://opcfoundation.org/webservices/XMLDA/1.0/
		 Namespace Prefix = ns1
	 */

	private static final String NAME = ItemProperty.class.getSimpleName();
	
	protected String getClassName() {
		return this.getClass().getSimpleName();
	}
	
	
	/**
	 * field for Value
	 */


	protected org.apache.axiom.om.OMElement localValue ;

	/*  This tracker boolean wil be used to detect whether the user called the set method
	 *   for this attribute. It will be used to determine whether to include this field
	 *   in the serialized XML
	 */
	protected boolean localValueTracker = false ;


	/**
	 * Auto generated getter method
	 * @return org.apache.axiom.om.OMElement
	 */
	public  org.apache.axiom.om.OMElement getValue() {
		return localValue;
	}



	/**
	 * Auto generated setter method
	 * @param param Value
	 */
	public void setValue(org.apache.axiom.om.OMElement param) {

		if (param != null) {
			//update the setting tracker
			localValueTracker = true;
		} else {
			localValueTracker = false;

		}

		this.localValue=param;


	}


	/**
	 * field for Name
	 * This was an Attribute!
	 */


	protected javax.xml.namespace.QName localName ;


	/**
	 * Auto generated getter method
	 * @return javax.xml.namespace.QName
	 */
	public  javax.xml.namespace.QName getName() {
		return localName;
	}



	/**
	 * Auto generated setter method
	 * @param param Name
	 */
	public void setName(javax.xml.namespace.QName param) {

		this.localName=param;


	}


	/**
	 * field for Description
	 * This was an Attribute!
	 */


	protected String localDescription ;


	/**
	 * Auto generated getter method
	 * @return String
	 */
	public  String getDescription() {
		return localDescription;
	}



	/**
	 * Auto generated setter method
	 * @param param Description
	 */
	public void setDescription(String param) {

		this.localDescription=param;


	}


	/**
	 * field for ResultID
	 * This was an Attribute!
	 */


	protected javax.xml.namespace.QName localResultID ;


	/**
	 * Auto generated getter method
	 * @return javax.xml.namespace.QName
	 */
	public  javax.xml.namespace.QName getResultID() {
		return localResultID;
	}



	/**
	 * Auto generated setter method
	 * @param param ResultID
	 */
	public void setResultID(javax.xml.namespace.QName param) {

		this.localResultID=param;


	}

	/**
	 *
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement (
			final javax.xml.namespace.QName parentQName,
			final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



		org.apache.axiom.om.OMDataSource dataSource =
				new org.apache.axis2.databinding.ADBDataSource(this,parentQName) {

			public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
				ItemProperty.this.serialize(parentQName,factory,xmlWriter);
			}
		};
		return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
				parentQName,factory,dataSource);

	}


	protected void writeAttributes(org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter, String prefix, String namespace) 
			throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
		if (localName != null) {
			writeQNameAttribute("",
					"Name",
					localName, xmlWriter);
		}
		if (localDescription != null) {
			writeAttribute("",
					"Description",
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDescription), xmlWriter);
		}
		if (localItemPath != null) {
			writeAttribute("",
					"ItemPath",
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localItemPath), xmlWriter);
		}
		if (localItemName != null) {
			writeAttribute("",
					"ItemName",
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localItemName), xmlWriter);
		}
		if (localResultID != null) {
			writeQNameAttribute("",
					"ResultID",
					localResultID, xmlWriter);
		}
		if (localValueTracker) {
			namespace = "http://opcfoundation.org/webservices/XMLDA/1.0/";
			if (! namespace.equals("")) {
				prefix = xmlWriter.getPrefix(namespace);
				if (prefix == null) {
					prefix = generatePrefix(namespace);
					xmlWriter.writeStartElement(prefix,"Value", namespace);
					xmlWriter.writeNamespace(prefix, namespace);
					xmlWriter.setPrefix(prefix, namespace);
				} else {
					xmlWriter.writeStartElement(namespace,"Value");
				}
			} else {
				xmlWriter.writeStartElement("Value");
			}
			if (localValue==null) {
				// write the nil attribute
				throw new org.apache.axis2.databinding.ADBException("Value cannot be null!!");
			}else{
				localValue.serialize(xmlWriter);
			}
			xmlWriter.writeEndElement();
		}
		xmlWriter.writeEndElement();
	}



	/**
	 * databinding method to get an XML representation of this object
	 *
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
			throws org.apache.axis2.databinding.ADBException{



		java.util.ArrayList elementList = new java.util.ArrayList();
		java.util.ArrayList attribList = new java.util.ArrayList();

		if (localValueTracker) {
			elementList.add(new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/",
					"Value"));

			if (localValue != null) {
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localValue));
			} else {
				throw new org.apache.axis2.databinding.ADBException("Value cannot be null!!");
			}
		}
		attribList.add(
				new javax.xml.namespace.QName("","Name"));

		attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localName));

		attribList.add(
				new javax.xml.namespace.QName("","Description"));

		attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDescription));

		attribList.add(
				new javax.xml.namespace.QName("","ItemPath"));

		attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localItemPath));

		attribList.add(
				new javax.xml.namespace.QName("","ItemName"));

		attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localItemName));

		attribList.add(
				new javax.xml.namespace.QName("","ResultID"));

		attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localResultID));


		return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



	}



	/**
	 *  Factory class that keeps the parse method
	 */
	public static class Factory extends GenericFactory{

		/**
		 * static method to create the object
		 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
		 *			 If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
		 * Postcondition: If this object is an element, the reader is positioned at its end element
		 *			 If this object is a complex type, the reader is positioned at the end element of its outer element
		 */
		public static ItemProperty parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
			ItemProperty object =
					new ItemProperty();

			String prefix ="";
			String namespaceuri ="";
			try {

				while (!reader.isStartElement() && !reader.isEndElement())
					reader.next();

				ItemProperty result = (ItemProperty) checkADBBeanType(NAME,reader); 
				if(result!=null) {
					return result;
				}

				// Note all attributes that were handled. Used to differ normal attributes
				// from anyAttributes.
				java.util.Vector<String> handledAttributes = new java.util.Vector<String>();

				// handle attribute "Name"
				handleName(reader.getAttributeValue(null,"Name"),object,handledAttributes);

				// handle attribute "Description"
				String tempAttribDescription = reader.getAttributeValue(null,"Description");
				if (tempAttribDescription!=null) {
					object.setDescription(
							org.apache.axis2.databinding.utils.ConverterUtil.convertToString(tempAttribDescription));
				}
				handledAttributes.add("Description");

				// handle attribute "ItemPath"
				handleItemPath(reader.getAttributeValue(null,"ItemPath"),object,handledAttributes);

				// handle attribute "ItemName"
				handleItemName(reader.getAttributeValue(null,"ItemName"),object,handledAttributes);

				// handle attribute "ResultID"
				handleResultID(reader.getAttributeValue(null,"ResultID"),object,handledAttributes,reader);

				reader.next();

				while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

				if (reader.isStartElement()) {

					String content = reader.getElementText();

					org.apache.axiom.om.OMFactory fac = org.apache.axiom.om.OMAbstractFactory.getOMFactory();
					org.apache.axiom.om.OMNamespace omNs = fac.createOMNamespace("http://opcfoundation.org/webservices/XMLDA/1.0/", "");
					org.apache.axiom.om.OMElement _valueValue = fac.createOMElement("Value", omNs);
					_valueValue.addChild(fac.createOMText(_valueValue, content));
					object.setValue(_valueValue);

					reader.next();

				}  // End of if for expected property start element

				else {

				}

				while (!reader.isStartElement() && !reader.isEndElement())
					reader.next();

				if (reader.isStartElement())
					// A start element we are not expecting indicates a trailing invalid property
					throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());




			} catch (javax.xml.stream.XMLStreamException e) {
				throw new java.lang.Exception(e);
			}

			return object;
		}

	}//end of factory class



}
