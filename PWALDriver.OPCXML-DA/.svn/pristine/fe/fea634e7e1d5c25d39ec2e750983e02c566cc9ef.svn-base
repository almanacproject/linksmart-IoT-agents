package eu.ebbits.pwal.impl.driver.opcxmlda.stub;

import javax.xml.stream.XMLStreamException;

import org.apache.axis2.databinding.ADBBean;
import org.apache.axis2.databinding.ADBException;
import org.apache.log4j.Logger;


public abstract class ADBBeanImplementation implements ADBBean {
	
	/**
	 * 
	 */
	private static final long serialVersionUID = 6148771753017626684L;

	private Logger log = Logger.getLogger(ADBBeanImplementation.class.getName());
	
	protected abstract String getClassName();

	protected void setItemPath(String itemPath) {
		log.error("something wrong, this parameter is unsupported in this class");
	};
	
	protected void setReqType(javax.xml.namespace.QName reqType) {
		log.error("something wrong, this parameter is unsupported in this class");
	}; 
	
	protected void setItemName(String itemName) {
		log.error("something wrong, this parameter is unsupported in this class");
	};
	
	protected void setClientItemHandle(String clientItemHandle) {
		log.error("something wrong, this parameter is unsupported in this class");
	}
	protected  void setDeadband(float deadband) {
		log.error("something wrong, this parameter is unsupported in this class");
	}
	
	protected  void setRequestedSamplingRate(int requestedSamplingRate) {
		log.error("something wrong, this parameter is unsupported in this class");
	}
	
	protected  void setEnableBuffering(boolean enableBuffering) {
		log.error("something wrong, this parameter is unsupported in this class");
	}
	
	protected  void setLocaleID(String localeID) {
		log.error("something wrong, this parameter is unsupported in this class");
	};
	
	protected  void setClientRequestHandle(String clientRequestHandle) {
		log.error("something wrong, this parameter is unsupported in this class");
	};
	
	protected  void setContinuationPoint(String continuationPoint) {
		log.error("something wrong, this parameter is unsupported in this class");
	};
	
	protected  void setMaxElementsReturned(int maxElementsReturned) {
		log.error("something wrong, this parameter is unsupported in this class");
	};
	
	protected  void setReturnAllProperties(boolean returnAllProperties) {
		log.error("something wrong, this parameter is unsupported in this class");
	};
	
	protected  void setReturnPropertyValues(boolean returnPropertyValues) {
		log.error("something wrong, this parameter is unsupported in this class");
	};
	
	protected  void setReturnErrorText(boolean returnErrorText) {
		log.error("something wrong, this parameter is unsupported in this class");
	};
	
	protected  void setName(String name) {
		log.error("something wrong, this parameter is unsupported in this class");
	};
	
	protected  void setResultID(javax.xml.namespace.QName resultID) {
		log.error("something wrong, this parameter is unsupported in this class");
	};

	protected  void setMaxAge(int maxAge) {
		log.error("something wrong, this parameter is unsupported in this class");
	};

	protected  void setRevisedSamplingRate(int revisedSamplingRate) {
		log.error("something wrong, this parameter is unsupported in this class");
	};

	protected  void setServerSubHandle(String serverSubHandle) {
		log.error("something wrong, this parameter is unsupported in this class");
	};
	
	
	protected String generatePrefix(String namespace) {
		if(namespace.equals("http://opcfoundation.org/webservices/XMLDA/1.0/")) {
			return "ns1";
		}
		return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
	}	
	

	protected void writeStartElement(String attValue,
									String prefix,
									String namespace,
									boolean emptyNamespace,
									javax.xml.stream.XMLStreamWriter xmlWriter) throws XMLStreamException {
		if (!emptyNamespace) {
			if (prefix == null) {
				String prefix2 = generatePrefix(namespace);
				xmlWriter.writeStartElement(prefix2,attValue, namespace);
				xmlWriter.writeNamespace(prefix2, namespace);
				xmlWriter.setPrefix(prefix2, namespace);
			} else {
				xmlWriter.writeStartElement(namespace,attValue);
			}
		} else {
			xmlWriter.writeStartElement(attValue);
		}
	}
	
	/**
	 * Util method to write an attribute with the ns prefix
	 */
	protected void writeAttribute(String prefix,String namespace,String attName,
			String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
		if (xmlWriter.getPrefix(namespace) == null) {
			xmlWriter.writeNamespace(prefix, namespace);
			xmlWriter.setPrefix(prefix, namespace);
		}
		xmlWriter.writeAttribute(namespace,attName,attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	protected void writeAttribute(String namespace,String attName,
			String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
		if (namespace.equals(""))
		{
			xmlWriter.writeAttribute(attName,attValue);
		}
		else
		{
			registerPrefix(xmlWriter, namespace);
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	protected void writeAttributeWithNamespace(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
			String attribute) throws XMLStreamException {
		String namespace = "http://opcfoundation.org/webservices/XMLDA/1.0/";
		if (! namespace.equals("")) {
			String prefix = xmlWriter.getPrefix(namespace);

			if (prefix == null) {
				prefix = generatePrefix(namespace);

				xmlWriter.writeStartElement(prefix,attribute, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);

			} else {
				xmlWriter.writeStartElement(namespace,attribute);
			}
		} else {
			xmlWriter.writeStartElement(attribute);
		}
	}
	
	/**
	 * Util method to write an attribute without the ns prefix
	 */
	protected void writeQNameAttribute(String namespace, String attName,
			javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

		String attributeNamespace = qname.getNamespaceURI();
		String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
		if (attributePrefix == null) {
			attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
		}
		String attributeValue;
		if (attributePrefix.trim().length() > 0) {
			attributeValue = attributePrefix + ":" + qname.getLocalPart();
		} else {
			attributeValue = qname.getLocalPart();
		}
		if (namespace.equals("")) {
			xmlWriter.writeAttribute(attName, attributeValue);
		} else {
			registerPrefix(xmlWriter, namespace);
			xmlWriter.writeAttribute(namespace, attName, attributeValue);
		}
	}

	/**
	 *  method to handle Qnames
	 */
	protected void writeQName(javax.xml.namespace.QName qname,
			javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
		String namespaceURI = qname.getNamespaceURI();
		if (namespaceURI != null) {
			String prefix = xmlWriter.getPrefix(namespaceURI);
			if (prefix == null) {
				prefix = generatePrefix(namespaceURI);
				xmlWriter.writeNamespace(prefix, namespaceURI);
				xmlWriter.setPrefix(prefix,namespaceURI);
			}
			if (prefix.trim().length() > 0) {
				xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			} else {
				// i.e this is the default namespace
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		} else {
			xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
		}
	}

	protected void writeQNames(javax.xml.namespace.QName[] qnames,
			javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
		if (qnames != null) {
			// we have to store this data until last moment since it is not possible to write any
			// namespace data after writing the charactor data
			StringBuffer stringToWrite = new StringBuffer();
			String namespaceURI = null;
			String prefix = null;

			for (int i = 0; i < qnames.length; i++) {
				if (i > 0) {
					stringToWrite.append(" ");
				}
				namespaceURI = qnames[i].getNamespaceURI();
				if (namespaceURI != null) {
					prefix = xmlWriter.getPrefix(namespaceURI);
					if ((prefix == null) || (prefix.length() == 0)) {
						prefix = generatePrefix(namespaceURI);
						xmlWriter.writeNamespace(prefix, namespaceURI);
						xmlWriter.setPrefix(prefix,namespaceURI);
					}
					if (prefix.trim().length() > 0) {
						stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				} else {
					stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
				}
			}
			xmlWriter.writeCharacters(stringToWrite.toString());
		}
	}


	/**
	 * Register a namespace prefix
	 */
	protected String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
		String prefix = xmlWriter.getPrefix(namespace);
		if (prefix == null) {
			prefix = generatePrefix(namespace);

			while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
				prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
			}
			xmlWriter.writeNamespace(prefix, namespace);
			xmlWriter.setPrefix(prefix, namespace);
		}
		return prefix;
	}
	
	
	/**
	 * isReaderMTOMAware
	 * @return true if the reader supports MTOM
	 */
	public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
		boolean isReaderMTOMAware = false;

		try{
			isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
		}catch(java.lang.IllegalArgumentException e) {
			isReaderMTOMAware = false;
		}
		return isReaderMTOMAware;
	}
	

	public void serialize(final javax.xml.namespace.QName parentQName,
			final org.apache.axiom.om.OMFactory factory,
			org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
					throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
		serialize(parentQName,factory,xmlWriter,false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
			final org.apache.axiom.om.OMFactory factory,
			org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
			boolean serializeType)
					throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{

		String prefix = ""; 
		String namespace = parentQName.getNamespaceURI();
		String localName = parentQName.getLocalPart();
		
		// For these classes we can safely assume an element has only one type associated with it
		if(getClassName().equals("LimitBits") ||
				getClassName().equals("InterfaceVersion") ||
				getClassName().equals("BrowserFilter") ||
				getClassName().equals("QualityBits")) {
			
			if (! namespace.equals("")) {
				prefix = xmlWriter.getPrefix(namespace);
				if (prefix == null) {
					prefix = generatePrefix(namespace);
					xmlWriter.writeStartElement(prefix, localName, namespace);
					xmlWriter.writeNamespace(prefix, namespace);
					xmlWriter.setPrefix(prefix, namespace);
				} else {
					xmlWriter.writeStartElement(namespace, localName);
				}
			} else {
				xmlWriter.writeStartElement(localName);
			}
		} else {	
			prefix = parentQName.getPrefix();
			if ((namespace != null) && (namespace.trim().length() > 0)) {
				String writerPrefix = xmlWriter.getPrefix(namespace);
				if (writerPrefix != null) {
					xmlWriter.writeStartElement(namespace, localName);
				} else {
					if (prefix == null) {
						prefix = generatePrefix(namespace);
					}
	
					xmlWriter.writeStartElement(prefix, localName, namespace);
					xmlWriter.writeNamespace(prefix, namespace);
					xmlWriter.setPrefix(prefix, namespace);
				}
			} else {
				xmlWriter.writeStartElement(localName);
			}
		}

		if (serializeType) {
			String namespacePrefix = registerPrefix(xmlWriter,"http://opcfoundation.org/webservices/XMLDA/1.0/");
			if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
						namespacePrefix+":"+getClassName(),
						xmlWriter);
			} else {
				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
						getClassName(),
						xmlWriter);
			}
		}
		writeAttributes(factory,xmlWriter,prefix,namespace);
	}
	
	
	protected static ADBBeanImplementation checkADBBeanType (String name, 
																		javax.xml.stream.XMLStreamReader reader) 
																				throws Exception {
		if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null) {
			String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName!=null) {
				String nsPrefix = null;
				if (fullTypeName.indexOf(":") > -1) {
					nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
				}
				nsPrefix = nsPrefix==null?"":nsPrefix;

				String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

				if (!name.equals(type)) {
					//find namespace for the prefix
					String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
					return (ADBBeanImplementation)ExtensionMapper.getTypeObject(
							nsUri,type,reader);
				}
			}
		}
		return null;
	}
	
	protected void serializeItems(boolean localItemsTracker,
							final org.apache.axiom.om.OMFactory factory,
							ADBBeanImplementation [] localItems,
							org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) 
									throws ADBException, XMLStreamException{
		if (localItemsTracker) {
			if (localItems!=null) {
				for (int i = 0;i < localItems.length;i++) {
					if (localItems[i] != null) {
						localItems[i].serialize(new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/","Items"),
								factory,xmlWriter);
					} else {
						// we don't have to do any thing since minOccures is zero
					}
				}
			} else {
				throw new org.apache.axis2.databinding.ADBException("Items cannot be null!!");
			}
		}
		xmlWriter.writeEndElement();
	}

	
	protected void addItems(boolean localItemsTracker,
			Object [] localItems,
			String namespace,
			java.util.List<Object> elementList) 
					throws ADBException {
		if (localItemsTracker) {
			if (localItems!=null) {
				for (int i = 0;i < localItems.length;i++) {
					if (localItems[i] != null) {
						elementList.add(new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/", namespace));
						elementList.add(localItems[i]);
					} 				
				}
			} else {
				throw new org.apache.axis2.databinding.ADBException("Items cannot be null!!");
			}
		}		
	}
	
	protected void addItem(boolean localItemTracker,
			Object localItem,
			String namespace,
			java.util.List<Object> elementList) 
					throws ADBException {
		if (localItemTracker) {
			elementList.add(new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/", namespace));
			if (localItem != null) {
				elementList.add(localItem);
			} else {
				throw new org.apache.axis2.databinding.ADBException(namespace+" cannot be null!!");
			}
		}
	}
	
	
	protected void serializeAttribute(boolean localAttributeTracker,
			ADBBeanImplementation localAttribute,
			final org.apache.axiom.om.OMFactory factory,
			String name,
			org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) 
					throws XMLStreamException {
		if (localAttributeTracker) {
			if (localAttribute==null) {
				throw new org.apache.axis2.databinding.ADBException(name+" cannot be null!!");
			}
			localAttribute.serialize(new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/",name),
					factory,xmlWriter);
		}

	}
	
	protected abstract void writeAttributes(org.apache.axiom.om.OMFactory factory,
											org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter, 
											String prefix, 
											String namespace) 
													throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException;
}
