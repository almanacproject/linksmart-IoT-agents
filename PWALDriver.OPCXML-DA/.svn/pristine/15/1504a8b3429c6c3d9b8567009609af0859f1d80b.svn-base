package eu.ebbits.pwal.impl.driver.opcxmlda.stub;

import java.lang.reflect.Field;

import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamException;

import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMNode;
import org.apache.axis2.databinding.ADBBean;
import org.apache.axis2.databinding.ADBException;
import org.apache.log4j.Logger;

import java.security.PrivilegedAction;
import java.util.Arrays;
import java.util.List;

public abstract class ADBBeanImplementation implements ADBBean {
	
	/**
	 * 
	 */
	private static final long serialVersionUID = 6148771753017626684L;

	private Logger log = Logger.getLogger(ADBBeanImplementation.class.getName());
	
	protected abstract String getClassName();

	private Field getProtectedField(final String fieldName) {
		final ADBBeanImplementation classToUse = this;
		return java.security.AccessController.doPrivileged (new PrivilegedAction<Field>() {
			public Field run() {
				try {
					Field fieldToUse = classToUse.getClass().getDeclaredField(fieldName);
					fieldToUse.setAccessible(true);	    
					return fieldToUse;
				} catch (NoSuchFieldException ex) {
					log.error("something wrong, this parameter is unsupported in this class");
					return null;
				} catch (IllegalArgumentException e) {
					log.error("something wrong retrieving "+fieldName,e);
					return null;
				} 
			}});
	}
	
	
	private Object getProtectedFieldValue(final String fieldName) {
		final ADBBeanImplementation classToUse = this;
		return java.security.AccessController.doPrivileged (new PrivilegedAction<Object>() {
			public Object run() {
				try {
					Field fieldToUse = getProtectedField(fieldName);
					return fieldToUse.get(classToUse);
				}  catch (IllegalArgumentException e) {
					log.error("something wrong retrieving "+fieldName,e);
					return null;
				} catch (IllegalAccessException e) {
					log.error("something wrong retrieving "+fieldName,e);
					return null;
				}
			}});
	}
	

	private void setProtectedFieldValue(final String fieldName, final Object value) {
		final ADBBeanImplementation classToUse = this;
		java.security.AccessController.doPrivileged (new PrivilegedAction<Object>() {
			public Object run() {
				try {
					Field fieldToUse = getProtectedField(fieldName);
					fieldToUse.set(classToUse,value);
					return null;
				} catch (IllegalArgumentException e) {
					log.error("something wrong setting "+fieldName,e);
					return null;
				} catch (IllegalAccessException e) {
					log.error("something wrong setting "+fieldName,e);
					return null;
				}
			}});
	}

	
	protected void setProtectedFieldValueWithTracker(String fieldName,
												String trackerName,
												Object value) {
		if (value != null) {
			//update the setting tracker
			setProtectedFieldValue(trackerName,true);
		} else {
			setProtectedFieldValue(trackerName,false);
		}
		setProtectedFieldValue(fieldName,value);	
	}
	
	private List<Object> addElementToProtectedArrayField(final String trackerName, final Object[] oldList, final Object element) {
		//update the setting tracker
		setProtectedFieldValue(trackerName,true);
		java.util.List<Object> list =
				org.apache.axis2.databinding.utils.ConverterUtil.toList(oldList);
		list.add(element);
		return list;
	}

	
	/**
	 * Auto generated getter method
	 * @return String
	 */
	public String getItemPath() {
		return (String) getProtectedFieldValue("localItemPath");
	}

	
	public void setItemPath(String itemPath) {
		setProtectedFieldValue("localItemPath",itemPath);
	};
	

	/**
	 * Auto generated getter method
	 * @return String
	 */
	public String getItemName() {
		return (String) getProtectedFieldValue("localItemName");
	}

	
	public void setItemName(String itemName) {
		setProtectedFieldValue("localItemName",itemName);
	};

	
	/**
	 * Auto generated getter method
	 * @return String
	 */
	public String getLocaleID() {
		return (String) getProtectedFieldValue("localLocaleID");
	}

	
	public void setLocaleID(String localeID) {
		setProtectedFieldValue("localLocaleID",localeID);
	};
	
	
	/**
	 * Auto generated getter method
	 * @return String
	 */
	public String getClientRequestHandle() {
		return (String) getProtectedFieldValue("localClientRequestHandle");
	}
	
	public void setClientRequestHandle(String localClientRequestHandle) {
		setProtectedFieldValue("localClientRequestHandle",localClientRequestHandle);
	};
	
	
	/**
	 * Auto generated getter method
	 * @return String
	 */
	public String getContinuationPoint() {
		return (String) getProtectedFieldValue("localContinuationPoint");
	}
	
	public void setContinuationPoint(String localClientRequestHandle) {
		setProtectedFieldValue("localContinuationPoint",localClientRequestHandle);
	};
	
	/**
	 * Auto generated getter method
	 * @return QName
	 */
	public javax.xml.namespace.QName getReqType() {
		return (javax.xml.namespace.QName) getProtectedFieldValue("localReqType");
	}
	
	public void setReqType(javax.xml.namespace.QName localReqType) {
		setProtectedFieldValue("localReqType",localReqType);
	};
	
	/**
	 * Auto generated getter method
	 * @return String
	 */
	public String getClientItemHandle() {
		return (String) getProtectedFieldValue("localClientItemHandle");
	}
	
	public void setClientItemHandle(String localClientItemHandle) {
		setProtectedFieldValue("localClientItemHandle",localClientItemHandle);
	};
	
	/**
	 * Auto generated getter method
	 * @return float
	 */
	public float getDeadband() {
		return ((Float)getProtectedFieldValue("localDeadband")).floatValue();
	}
	
	public void setDeadband(float localDeadband) {
		setProtectedFieldValue("localDeadband",new Float(localDeadband));
	};

	
	/**
	 * Auto generated getter method
	 * @return int
	 */
	public int getRequestedSamplingRate() {
		return ((Integer)getProtectedFieldValue("localRequestedSamplingRate")).intValue();
	}
	
	public void setRequestedSamplingRate(int localRequestedSamplingRate) {
		setProtectedFieldValue("localRequestedSamplingRate",new Integer(localRequestedSamplingRate));
	};

	
	/**
	 * Auto generated getter method
	 * @return boolean
	 */
	public boolean getEnableBuffering() {
		return ((Boolean)getProtectedFieldValue("localEnableBuffering")).booleanValue();
	}
	
	public void setEnableBuffering(boolean localEnableBuffering) {
		setProtectedFieldValue("localEnableBuffering",new Boolean(localEnableBuffering));
	};
	
	/**
	 * Auto generated getter method
	 * @return boolean
	 */
	public boolean getReturnAllProperties() {
		return ((Boolean)getProtectedFieldValue("localReturnAllProperties")).booleanValue();
	}
	
	public void setReturnAllProperties(boolean localReturnAllProperties) {
		setProtectedFieldValue("localReturnAllProperties",new Boolean(localReturnAllProperties));
	};

	/**
	 * Auto generated getter method
	 * @return boolean
	 */
	public boolean getReturnPropertyValues() {
		return ((Boolean)getProtectedFieldValue("localReturnPropertyValues")).booleanValue();
	}
	
	public void setReturnPropertyValues(boolean localReturnPropertyValues) {
		setProtectedFieldValue("localReturnPropertyValues",new Boolean(localReturnPropertyValues));
	};
	
	
	/**
	 * Auto generated getter method
	 * @return boolean
	 */
	public boolean getReturnErrorText() {
		return ((Boolean)getProtectedFieldValue("localReturnErrorText")).booleanValue();
	}
	
	public void setReturnErrorText(boolean localReturnErrorText) {
		setProtectedFieldValue("localReturnErrorText",new Boolean(localReturnErrorText));
	};
	
	
	/**
	 * Auto generated getter method
	 * @return QName
	 */
	public javax.xml.namespace.QName getResultID() {
		return (javax.xml.namespace.QName) getProtectedFieldValue("localResultID");
	}
	
	public void setResultID(javax.xml.namespace.QName localResultID) {
		setProtectedFieldValue("localResultID",localResultID);
	};

	/**
	 * Auto generated getter method
	 * @return int
	 */
	public int getMaxAge() {
		return ((Integer)getProtectedFieldValue("localMaxAge")).intValue();
	}
	
	public void setMaxAge(int localMaxAge) {
		setProtectedFieldValue("localMaxAge",new Integer(localMaxAge));
	};
	
	/**
	 * Auto generated getter method
	 * @return int
	 */
	public int getRevisedSamplingRate() {
		return ((Integer)getProtectedFieldValue("localRevisedSamplingRate")).intValue();
	}
	
	public void setRevisedSamplingRate(int localRevisedSamplingRate) {
		setProtectedFieldValue("localRevisedSamplingRate",new Integer(localRevisedSamplingRate));
	};

	/**
	 * Auto generated getter method
	 * @return String
	 */
	public String getServerSubHandle() {
		return (String) getProtectedFieldValue("localServerSubHandle");
	}
	
	public void setServerSubHandle(String localServerSubHandle) {
		setProtectedFieldValue("localServerSubHandle",localServerSubHandle);
	};
	

	/**
	 * Auto generated getter method
	 * @return String
	 */
	public String getName() {
		return (String) getProtectedFieldValue("localName");
	}
	
	public void setName(String localName) {
		setProtectedFieldValue("localName",localName);
	};

	
	/**
	 * Auto generated getter method
	 * @return javax.xml.namespace.QName[]
	 */
	public  javax.xml.namespace.QName[] getPropertyNames() {
		return (QName[]) getProtectedFieldValue("localPropertyNames");
	}
	
	
	/**
	 * Auto generated add method for the array for convenience
	 * @param param javax.xml.namespace.QName
	 */
	public void addPropertyNames(javax.xml.namespace.QName param) {
		javax.xml.namespace.QName[] localPropertyNames = (QName[]) getProtectedFieldValue("localPropertyNames");
		if (localPropertyNames == null) {
			setProtectedFieldValue("localPropertyNames",new javax.xml.namespace.QName[]{});
		}
		List<Object> list = addElementToProtectedArrayField("localPropertyNamesTracker",localPropertyNames,param);
		setProtectedFieldValue("localPropertyNames",(javax.xml.namespace.QName[])list.toArray(new javax.xml.namespace.QName[list.size()]));
	}	
	
	/**
	 * validate the array for PropertyNames
	 */
	protected void validatePropertyNames(javax.xml.namespace.QName[] param) {
	}

	/**
	 * Auto generated setter method
	 * @param param PropertyNames
	 */
	public void setPropertyNames(javax.xml.namespace.QName[] param) {
		javax.xml.namespace.QName[] propertyNamesToUse = param.clone();
		validatePropertyNames(propertyNamesToUse);
		setProtectedFieldValueWithTracker("localPropertyNames", "localPropertyNamesTracker", propertyNamesToUse);
	}	
	
	/**
	 * Auto generated setter method
	 * @param param RItemList
	 */
	public void setRItemList(ReplyItemList param) {
		setProtectedFieldValueWithTracker("localRItemList", "localRItemListTracker", param);
	}
	
	
	/**
	 * Auto generated getter method
	 * @return OPCError[]
	 */
	public  OPCError[] getErrors() {
		return (OPCError[]) getProtectedFieldValue("localErrors");
	}


	/**
	 * validate the array for Errors
	 */
	protected void validateErrors(OPCError[] param) {
	}

	
	/**
	 * Auto generated setter method
	 * @param param Errors
	 */
	public void setErrors(OPCError[] param) {
		OPCError[] errorsToUse = param.clone();
		validateErrors(errorsToUse);
		setProtectedFieldValueWithTracker("localErrors", "localErrorsTracker", errorsToUse);
	}	
	
	/**
	 * Auto generated add method for the array for convenience
	 * @param param OPCError
	 */
	public void addErrors(OPCError param) {
		OPCError[] localErrors = (OPCError[]) getProtectedFieldValue("localErrors");
		if (localErrors == null) {
			setProtectedFieldValue("localErrors", new OPCError[]{});
		}
		List<Object> list = addElementToProtectedArrayField("localErrorsTracker",localErrors,param);
		setProtectedFieldValue("localErrors",(OPCError[])list.toArray(new OPCError[list.size()]));
	}

	
	/**
	 * Auto generated getter method
	 * @return ItemProperty[]
	 */
	public  ItemProperty[] getProperties() {
		return (ItemProperty[]) getProtectedFieldValue("localProperties");
	}
	
	/**
	 * validate the array for Properties
	 */
	protected void validateProperties(ItemProperty[] param) {
	}

	/**
	 * Auto generated setter method
	 * @param param Properties
	 */
	public void setProperties(ItemProperty[] param) {
		ItemProperty[] propertiesToUse = param.clone();
		validateProperties(propertiesToUse);
		setProtectedFieldValueWithTracker("localProperties", "localPropertiesTracker", propertiesToUse);
	}

	
	/**
	 * Auto generated add method for the array for convenience
	 * @param param ItemProperty
	 */
	public void addProperties(ItemProperty param) {
		ItemProperty[] localProperties = (ItemProperty[]) getProtectedFieldValue("localProperties");
		if (localProperties == null) {
			localProperties = new ItemProperty[]{};
		}
		List<Object> list = addElementToProtectedArrayField("localPropertiesTracker",localProperties,param);
		setProtectedFieldValue("localErrors",(ItemProperty[])list.toArray(new ItemProperty[list.size()]));
	}

	
	
	/**
	 * Auto generated getter method
	 * @return RequestOptions
	 */
	public  RequestOptions getOptions() {
		return (RequestOptions) getProtectedFieldValue("localOptions");
	}
	
	/**
	 * Auto generated setter method
	 * @param param Options
	 */
	public void setOptions(RequestOptions param) {
		setProtectedFieldValueWithTracker("localOptions", "localOptionsTracker", param);
	}

	
	/**
	 * validate the array for Items
	 */
	protected void validateItems(ItemValue[] param) {
	}

	
	/**
	 * Auto generated setter method
	 * @param param Items
	 */
	public void setItems(ItemValue[] param) {
		ItemValue[] itemsToUse = param.clone();
		validateItems(itemsToUse);
		setProtectedFieldValueWithTracker("localItems", "localItemsTracker", itemsToUse);
	}



	/**
	 * Auto generated add method for the array for convenience
	 * @param param ItemValue
	 */
	public void addItems(ItemValue param) {
		ItemValue[] localErrors = (ItemValue[]) getProtectedFieldValue("localItems");
		if (localErrors == null) {
			setProtectedFieldValue("localItems", new OPCError[]{});
		}
		List<Object> list = addElementToProtectedArrayField("localItemsTracker",localErrors,param);
		setProtectedFieldValue("localItems",(ItemValue[])list.toArray(new ItemValue[list.size()]));
	}

	
	

	
	protected String generatePrefix(String namespace) {
		if(namespace.equals("http://opcfoundation.org/webservices/XMLDA/1.0/")) {
			return "ns1";
		}
		return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
	}	
	

	protected void writeStartElement(String attValue,
									String prefix,
									String namespace,
									boolean emptyNamespace,
									javax.xml.stream.XMLStreamWriter xmlWriter) throws XMLStreamException {
		if (!emptyNamespace) {
			if (prefix == null) {
				String prefix2 = generatePrefix(namespace);
				xmlWriter.writeStartElement(prefix2,attValue, namespace);
				xmlWriter.writeNamespace(prefix2, namespace);
				xmlWriter.setPrefix(prefix2, namespace);
			} else {
				xmlWriter.writeStartElement(namespace,attValue);
			}
		} else {
			xmlWriter.writeStartElement(attValue);
		}
	}
	
	/**
	 * Util method to write an attribute with the ns prefix
	 */
	protected void writeAttribute(String prefix,String namespace,String attName,
			String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
		if (xmlWriter.getPrefix(namespace) == null) {
			xmlWriter.writeNamespace(prefix, namespace);
			xmlWriter.setPrefix(prefix, namespace);
		}
		xmlWriter.writeAttribute(namespace,attName,attValue);
	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	protected void writeAttribute(String namespace,String attName,
			String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
		if(attValue!=null) {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName,attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}
	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	protected void writeAttributeWithNamespace(boolean tracker,
			Object attribute,
			String name,
			org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws XMLStreamException {
		if (tracker) {
			String namespace = "http://opcfoundation.org/webservices/XMLDA/1.0/";
			if (! namespace.equals("")) {
				String prefix = xmlWriter.getPrefix(namespace);

				if (prefix == null) {
					prefix = generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,name, namespace);
					xmlWriter.writeNamespace(prefix, namespace);
					xmlWriter.setPrefix(prefix, namespace);

				} else {
					xmlWriter.writeStartElement(namespace,name);
				}
			} else {
				xmlWriter.writeStartElement(name);
			}
			if (attribute==null) {
				// write the nil attribute
				throw new org.apache.axis2.databinding.ADBException(name+" cannot be null!!");
			}else{
				if(OMElement.class.isInstance(attribute)) {
					((OMElement) attribute).serialize(xmlWriter);
				} else if(String.class.isInstance(attribute)) {
					xmlWriter.writeCharacters((String)attribute);
				}
			}
			xmlWriter.writeEndElement();
		}
	}
	
	
	
	protected void writeAttributesWithNamespace(boolean tracker, 
								Object[] attributes, 
								String name,
								org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) 
										throws XMLStreamException {
		if (tracker) {
			if (attributes!=null) {
				String namespace = "http://opcfoundation.org/webservices/XMLDA/1.0/";
				boolean emptyNamespace = namespace == null || namespace.length() == 0;
				String prefix =  emptyNamespace ? null : xmlWriter.getPrefix(namespace);
				for (int i = 0;i < attributes.length;i++) {
					if (attributes[i] != null) {
						writeStartElement(name,prefix,namespace,emptyNamespace,xmlWriter);
						xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(attributes[i]));
						xmlWriter.writeEndElement();
					} 
				}
			} else {
				throw new org.apache.axis2.databinding.ADBException(name+" cannot be null!!");
			}
		}

	}
	
	
	/**
	 * Util method to write an attribute without the ns prefix
	 */
	protected void writeQNameAttribute(String namespace, String attName,
			javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

		if(qname!=null) {
			String attributeNamespace = qname.getNamespaceURI();
			String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
	}

	/**
	 *  method to handle Qnames
	 */
	protected void writeQName(javax.xml.namespace.QName qname,
			javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
		String namespaceURI = qname.getNamespaceURI();
		if (namespaceURI != null) {
			String prefix = xmlWriter.getPrefix(namespaceURI);
			if (prefix == null) {
				prefix = generatePrefix(namespaceURI);
				xmlWriter.writeNamespace(prefix, namespaceURI);
				xmlWriter.setPrefix(prefix,namespaceURI);
			}
			if (prefix.trim().length() > 0) {
				xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			} else {
				// i.e this is the default namespace
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		} else {
			xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
		}
	}

	protected void writeQNames(javax.xml.namespace.QName[] qnames,
			javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
		if (qnames != null) {
			// we have to store this data until last moment since it is not possible to write any
			// namespace data after writing the charactor data
			StringBuffer stringToWrite = new StringBuffer();
			String namespaceURI = null;
			String prefix = null;

			for (int i = 0; i < qnames.length; i++) {
				if (i > 0) {
					stringToWrite.append(" ");
				}
				namespaceURI = qnames[i].getNamespaceURI();
				if (namespaceURI != null) {
					prefix = xmlWriter.getPrefix(namespaceURI);
					if ((prefix == null) || (prefix.length() == 0)) {
						prefix = generatePrefix(namespaceURI);
						xmlWriter.writeNamespace(prefix, namespaceURI);
						xmlWriter.setPrefix(prefix,namespaceURI);
					}
					if (prefix.trim().length() > 0) {
						stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				} else {
					stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
				}
			}
			xmlWriter.writeCharacters(stringToWrite.toString());
		}
	}


	/**
	 * Register a namespace prefix
	 */
	protected String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
		String prefix = xmlWriter.getPrefix(namespace);
		if (prefix == null) {
			prefix = generatePrefix(namespace);

			while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
				prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
			}
			xmlWriter.writeNamespace(prefix, namespace);
			xmlWriter.setPrefix(prefix, namespace);
		}
		return prefix;
	}
	
	
	/**
	 * isReaderMTOMAware
	 * @return true if the reader supports MTOM
	 */
	public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
		boolean isReaderMTOMAware = false;

		try{
			isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
		}catch(java.lang.IllegalArgumentException e) {
			isReaderMTOMAware = false;
		}
		return isReaderMTOMAware;
	}
	
	
	
	/**
	 *
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement (
			final javax.xml.namespace.QName parentQName,
			final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{
		Field field = null;
		QName qNameToUse = null;
		try {
			field = this.getClass().getField("MY_QNAME");
			if(field!=null) {
				qNameToUse = (QName) field.get(this);
			}
		} catch (NoSuchFieldException e) {
			field = null;
			qNameToUse = parentQName;
		} catch (SecurityException e) {
			field = null;
			qNameToUse = parentQName;
		} catch (IllegalArgumentException e) {
			field = null;
			qNameToUse = parentQName;
		} catch (IllegalAccessException e) {
			field = null;
			qNameToUse = parentQName;
		}
		final QName finalQName = qNameToUse;
		org.apache.axiom.om.OMDataSource dataSource =
				new org.apache.axis2.databinding.ADBDataSource(this,finalQName) {

			public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
				ADBBeanImplementation.this.serialize(finalQName,factory,xmlWriter);
			}
		};
		return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
				finalQName,factory,dataSource);
	}
	

	public void serialize(final javax.xml.namespace.QName parentQName,
			final org.apache.axiom.om.OMFactory factory,
			org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
					throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
		serialize(parentQName,factory,xmlWriter,false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
			final org.apache.axiom.om.OMFactory factory,
			org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
			boolean serializeType)
					throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{

		String prefix = ""; 
		String namespace = parentQName.getNamespaceURI();
		String localName = parentQName.getLocalPart();
		
		// For these classes we can safely assume an element has only one type associated with it
		if(getClassName().equals("LimitBits") ||
				getClassName().equals("InterfaceVersion") ||
				getClassName().equals("BrowserFilter") ||
				getClassName().equals("QualityBits")) {
			
			if (! namespace.equals("")) {
				prefix = xmlWriter.getPrefix(namespace);
				if (prefix == null) {
					prefix = generatePrefix(namespace);
					xmlWriter.writeStartElement(prefix, localName, namespace);
					xmlWriter.writeNamespace(prefix, namespace);
					xmlWriter.setPrefix(prefix, namespace);
				} else {
					xmlWriter.writeStartElement(namespace, localName);
				}
			} else {
				xmlWriter.writeStartElement(localName);
			}
		} else {	
			prefix = parentQName.getPrefix();
			if ((namespace != null) && (namespace.trim().length() > 0)) {
				String writerPrefix = xmlWriter.getPrefix(namespace);
				if (writerPrefix != null) {
					xmlWriter.writeStartElement(namespace, localName);
				} else {
					if (prefix == null) {
						prefix = generatePrefix(namespace);
					}
	
					xmlWriter.writeStartElement(prefix, localName, namespace);
					xmlWriter.writeNamespace(prefix, namespace);
					xmlWriter.setPrefix(prefix, namespace);
				}
			} else {
				xmlWriter.writeStartElement(localName);
			}
		}

		if (serializeType) {
			String namespacePrefix = registerPrefix(xmlWriter,"http://opcfoundation.org/webservices/XMLDA/1.0/");
			if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
						namespacePrefix+":"+getClassName(),
						xmlWriter);
			} else {
				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
						getClassName(),
						xmlWriter);
			}
		}
		writeAttributes(factory,xmlWriter,prefix,namespace);
	}
	
	
	protected static ADBBeanImplementation checkADBBeanType (String name, 
																		javax.xml.stream.XMLStreamReader reader) 
																				throws Exception {
		if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null) {
			String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
					"type");
			if (fullTypeName!=null) {
				String nsPrefix = null;
				if (fullTypeName.indexOf(":") > -1) {
					nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
				}
				nsPrefix = nsPrefix==null?"":nsPrefix;

				String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

				if (!name.equals(type)) {
					//find namespace for the prefix
					String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
					return (ADBBeanImplementation)ExtensionMapper.getTypeObject(
							nsUri,type,reader);
				}
			}
		}
		return null;
	}

	
	protected void addItems(boolean localItemsTracker,
			Object [] localItems,
			String namespace,
			java.util.List<Object> elementList) 
					throws ADBException {
		if (localItemsTracker) {
			if (localItems!=null) {
				for (int i = 0;i < localItems.length;i++) {
					if (localItems[i] != null) {
						elementList.add(new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/", namespace));
						elementList.add(localItems[i]);
					} 				
				}
			} else {
				throw new org.apache.axis2.databinding.ADBException("Items cannot be null!!");
			}
		}		
	}
	
	protected void addItem(boolean localItemTracker,
			Object localItem,
			String namespace,
			java.util.List<Object> elementList) 
					throws ADBException {
		if (localItemTracker) {
			elementList.add(new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/", namespace));
			if (localItem != null) {
				elementList.add(localItem);
			} else {
				throw new org.apache.axis2.databinding.ADBException(namespace+" cannot be null!!");
			}
		}
	}



	protected void serializeAttributes(boolean localItemsTracker,
			ADBBeanImplementation [] localItems,
			String name,
			final org.apache.axiom.om.OMFactory factory,
			org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) 
					throws ADBException, XMLStreamException{
		if (localItemsTracker) {
			if (localItems!=null) {
				for (int i = 0;i < localItems.length;i++) {
					if (localItems[i] != null) {
						localItems[i].serialize(new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/",name),
								factory,xmlWriter);
					}
				}
			} else {
				throw new org.apache.axis2.databinding.ADBException(name+" cannot be null!!");
			}
		}
		xmlWriter.writeEndElement();
	}
	
	protected void serializeAttribute(boolean localAttributeTracker,
			ADBBeanImplementation localAttribute,
			String name,
			final org.apache.axiom.om.OMFactory factory,
			org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) 
					throws XMLStreamException {
		if (localAttributeTracker) {
			if (localAttribute==null) {
				throw new org.apache.axis2.databinding.ADBException(name+" cannot be null!!");
			}
			localAttribute.serialize(new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/",name),
					factory,xmlWriter);
		}

	}
	
	protected abstract void writeAttributes(org.apache.axiom.om.OMFactory factory,
											org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter, 
											String prefix, 
											String namespace) 
													throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException;
}
