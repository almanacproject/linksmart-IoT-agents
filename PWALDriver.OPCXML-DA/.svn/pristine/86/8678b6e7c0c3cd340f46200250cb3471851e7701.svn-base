package eu.ebbits.pwal.impl.driver.opcxmlda.stub;

public class GetProperties extends ADBBeanImplementation {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
			"http://opcfoundation.org/webservices/XMLDA/1.0/",
			"GetProperties",
			"ns1");

	private static final String NAME = GetProperties.class.getSimpleName();
	
	protected String getClassName() {
		return this.getClass().getSimpleName();
	}

	
	/**
	 * field for ItemPath
	 * This was an Attribute!
	 */	
	protected String localItemPath;
	
	
	/**
	 * field for LocaleID
	 * This was an Attribute!
	 */
	protected String localLocaleID ;

	
	/**
	 * field for ClientRequestHandle
	 * This was an Attribute!
	 */
	protected String localClientRequestHandle;
	
	/**
	 * field for ItemIDs
	 * This was an Array!
	 */


	protected ItemIdentifier[] localItemIDs ;

	/*  This tracker boolean wil be used to detect whether the user called the set method
	 *   for this attribute. It will be used to determine whether to include this field
	 *   in the serialized XML
	 */
	protected boolean localItemIDsTracker = false ;


	/**
	 * Auto generated getter method
	 * @return ItemIdentifier[]
	 */
	public  ItemIdentifier[] getItemIDs() {
		return localItemIDs;
	}

	/**
	 * validate the array for ItemIDs
	 */
	protected void validateItemIDs(ItemIdentifier[] param) {
	}


	/**
	 * Auto generated setter method
	 * @param param ItemIDs
	 */
	public void setItemIDs(ItemIdentifier[] param) {
		ItemIdentifier[] itemIDsToUse = param.clone();
		validateItemIDs(itemIDsToUse);
		if (itemIDsToUse != null) {
			//update the setting tracker
			localItemIDsTracker = true;
		} else {
			localItemIDsTracker = false;
		}
		this.localItemIDs=itemIDsToUse;
	}



	/**
	 * Auto generated add method for the array for convenience
	 * @param param ItemIdentifier
	 */
	public void addItemIDs(ItemIdentifier param) {
		if (localItemIDs == null) {
			localItemIDs = new ItemIdentifier[]{};
		}
		//update the setting tracker
		localItemIDsTracker = true;
		java.util.List list =
				org.apache.axis2.databinding.utils.ConverterUtil.toList(localItemIDs);
		list.add(param);
		this.localItemIDs =
				(ItemIdentifier[])list.toArray(
						new ItemIdentifier[list.size()]);
	}


	/**
	 * field for PropertyNames
	 * This was an Array!
	 */
	protected javax.xml.namespace.QName[] localPropertyNames ;

	/*  This tracker boolean wil be used to detect whether the user called the set method
	 *   for this attribute. It will be used to determine whether to include this field
	 *   in the serialized XML
	 */
	protected boolean localPropertyNamesTracker = false;
	




	/**
	 * field for ReturnAllProperties
	 * This was an Attribute!
	 */
	protected boolean localReturnAllProperties ;



	/**
	 * field for ReturnPropertyValues
	 * This was an Attribute!
	 */
	protected boolean localReturnPropertyValues ;


	/**
	 * Auto generated getter method
	 * @return boolean
	 */
	public  boolean getReturnPropertyValues() {
		return localReturnPropertyValues;
	}


	/**
	 * field for ReturnErrorText
	 * This was an Attribute!
	 */
	protected boolean localReturnErrorText ;




	protected void writeAttributes(org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter, String prefix, String namespace) 
			throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
		writeAttribute("", "LocaleID", localLocaleID, xmlWriter);
		writeAttribute("", "ClientRequestHandle", localClientRequestHandle, xmlWriter);
		writeAttribute("", "ItemPath", localItemPath, xmlWriter);
		writeAttribute("",
				"ReturnAllProperties",
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReturnAllProperties), xmlWriter);
		writeAttribute("",
				"ReturnPropertyValues",
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReturnPropertyValues), xmlWriter);
		writeAttribute("",
				"ReturnErrorText",
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReturnErrorText), xmlWriter);
		serializeAttributes(localItemIDsTracker,localItemIDs,"ItemIDs",factory,xmlWriter);
		writeAttributesWithNamespace(localPropertyNamesTracker,localPropertyNames,"PropertyNames",xmlWriter);
		xmlWriter.writeEndElement();
	}


	/**
	 * databinding method to get an XML representation of this object
	 *
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
			throws org.apache.axis2.databinding.ADBException{


		java.util.ArrayList<Object> elementList = new java.util.ArrayList<Object>();
		java.util.ArrayList<Object> attribList = new java.util.ArrayList<Object>();

		addItems(localItemIDsTracker,localItemIDs,"ItemIDs",elementList);
		addItems(localPropertyNamesTracker,localPropertyNames,"PropertyNames",elementList);
		attribList.add(new javax.xml.namespace.QName("","LocaleID"));
		attribList.add(localLocaleID);
		attribList.add(new javax.xml.namespace.QName("","ClientRequestHandle"));
		attribList.add(localClientRequestHandle);
		attribList.add(new javax.xml.namespace.QName("","ItemPath"));
		attribList.add(localItemPath);
		attribList.add(new javax.xml.namespace.QName("","ReturnAllProperties"));
		attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReturnAllProperties));
		attribList.add(new javax.xml.namespace.QName("","ReturnPropertyValues"));
		attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReturnPropertyValues));
		attribList.add(new javax.xml.namespace.QName("","ReturnErrorText"));
		attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReturnErrorText));
		return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
	}



	/**
	 *  Factory class that keeps the parse method
	 */
	public static class Factory extends GenericFactory {

		/**
		 * static method to create the object
		 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
		 *			 If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
		 * Postcondition: If this object is an element, the reader is positioned at its end element
		 *			 If this object is a complex type, the reader is positioned at the end element of its outer element
		 */
		public static GetProperties parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
			GetProperties object =
					new GetProperties();

			try {

				while (!reader.isStartElement() && !reader.isEndElement())
					reader.next();

				GetProperties result = (GetProperties) checkADBBeanType(NAME,reader); 
				if(result!=null) {
					return result;
				}

				// Note all attributes that were handled. Used to differ normal attributes
				// from anyAttributes.
				java.util.Vector <String> handledAttributes = new java.util.Vector <String>();

				// handle attribute "LocaleID"
				handleLocaleID(reader.getAttributeValue(null,"LocaleID"), object, handledAttributes);
				
				// handle attribute "ClientRequestHandle"
				handleClientRequestHandle(reader.getAttributeValue(null,"ClientRequestHandle"), object, handledAttributes);

				// handle attribute "ItemPath"
				handleItemPath(reader.getAttributeValue(null,"ItemPath"), object, handledAttributes);

				// handle attribute "ReturnAllProperties"
				handleReturnAllProperties(reader.getAttributeValue(null,"ReturnAllProperties"), object, handledAttributes);
				
				// handle attribute "ReturnPropertyValues"
				handleReturnPropertyValues(reader.getAttributeValue(null,"ReturnPropertyValues"), object, handledAttributes);

				// handle attribute "ReturnErrorText"
				handleReturnErrorText(reader.getAttributeValue(null,"ReturnErrorText"), object, handledAttributes);

				reader.next();

				java.util.ArrayList<Object> list1 = new java.util.ArrayList<Object>();

				java.util.ArrayList<Object> list2 = new java.util.ArrayList<Object>();

				while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

				if (reader.isStartElement() && new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/","ItemIDs").equals(reader.getName())) {

					// Process the array and step past its final element's end.
					list1.add(ItemIdentifier.Factory.parse(reader));

					//loop until we find a start element that is not part of this array
					boolean loopDone1 = false;
					while(!loopDone1) {
						loopDone1 = findStartElementNotPartOfTheArray("ItemIDs",reader);
						if(!loopDone1) {
							list1.add(ItemIdentifier.Factory.parse(reader));
						}
					}
					// call the converter utility  to convert and set the array

					object.setItemIDs((ItemIdentifier[])
							org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
									ItemIdentifier.class,
									list1));

				}  // End of if for expected property start element

				while (!reader.isStartElement() && !reader.isEndElement()) {
					reader.next();
				}

				if (reader.isStartElement() && new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/","PropertyNames").equals(reader.getName())) {

					// Process the array and step past its final element's end.
					list2.add(reader.getElementText());

					//loop until we find a start element that is not part of this array
					boolean loopDone2 = false;
					while(!loopDone2) {
						loopDone2 = findStartElementNotPartOfTheArray("PropertyNames",reader);
						if(!loopDone2) {
							list2.add(reader.getElementText());							
						}
					}
					// call the converter utility  to convert and set the array

					object.setPropertyNames((javax.xml.namespace.QName[])
							org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
									javax.xml.namespace.QName.class,list2));

				}  // End of if for expected property start element

				while (!reader.isStartElement() && !reader.isEndElement())
					reader.next();

				if (reader.isStartElement())
					// A start element we are not expecting indicates a trailing invalid property
					throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
			} catch (javax.xml.stream.XMLStreamException e) {
				throw new java.lang.Exception(e);
			}
			return object;
		}
	}//end of factory class
}