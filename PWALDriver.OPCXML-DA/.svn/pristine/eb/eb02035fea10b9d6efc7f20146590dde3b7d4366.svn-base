package eu.ebbits.pwal.impl.driver.opcxmlda.stub;

public class BrowseResponse extends ADBBeanImplementation {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
			"http://opcfoundation.org/webservices/XMLDA/1.0/",
			"BrowseResponse",
			"ns1");

	private static final String NAME = BrowseResponse.class.getSimpleName();
	
	protected String getClassName() {
		return this.getClass().getSimpleName();
	}

	/**
	 * field for BrowseResult
	 */


	protected ReplyBase localBrowseResult ;

	/*  This tracker boolean wil be used to detect whether the user called the set method
	 *   for this attribute. It will be used to determine whether to include this field
	 *   in the serialized XML
	 */
	protected boolean localBrowseResultTracker = false ;


	/**
	 * Auto generated getter method
	 * @return ReplyBase
	 */
	public  ReplyBase getBrowseResult() {
		return localBrowseResult;
	}



	/**
	 * Auto generated setter method
	 * @param param BrowseResult
	 */
	public void setBrowseResult(ReplyBase param) {

		if (param != null) {
			//update the setting tracker
			localBrowseResultTracker = true;
		} else {
			localBrowseResultTracker = false;

		}

		this.localBrowseResult=param;


	}


	/**
	 * field for Elements
	 * This was an Array!
	 */


	protected BrowseElement[] localElements ;

	/*  This tracker boolean wil be used to detect whether the user called the set method
	 *   for this attribute. It will be used to determine whether to include this field
	 *   in the serialized XML
	 */
	protected boolean localElementsTracker = false ;


	/**
	 * Auto generated getter method
	 * @return BrowseElement[]
	 */
	public  BrowseElement[] getElements() {
		return localElements;
	}






	/**
	 * validate the array for Elements
	 */
	protected void validateElements(BrowseElement[] param) {

	}


	/**
	 * Auto generated setter method
	 * @param param Elements
	 */
	public void setElements(BrowseElement[] param) {
		BrowseElement[] elementsToUse = param.clone();
		
		validateElements(elementsToUse);


		if (elementsToUse != null) {
			//update the setting tracker
			localElementsTracker = true;
		} else {
			localElementsTracker = false;

		}

		this.localElements=elementsToUse;
	}



	/**
	 * Auto generated add method for the array for convenience
	 * @param param BrowseElement
	 */
	public void addElements(BrowseElement param) {
		if (localElements == null) {
			localElements = new BrowseElement[]{};
		}


		//update the setting tracker
		localElementsTracker = true;


		java.util.List list =
				org.apache.axis2.databinding.utils.ConverterUtil.toList(localElements);
		list.add(param);
		this.localElements =
				(BrowseElement[])list.toArray(
						new BrowseElement[list.size()]);

	}


	/**
	 * field for Errors
	 * This was an Array!
	 */


	protected OPCError[] localErrors ;

	/*  This tracker boolean wil be used to detect whether the user called the set method
	 *   for this attribute. It will be used to determine whether to include this field
	 *   in the serialized XML
	 */
	protected boolean localErrorsTracker = false ;


	/**
	 * field for ContinuationPoint
	 * This was an Attribute!
	 */
	protected String localContinuationPoint ;


	/**
	 * field for MoreElements
	 * This was an Attribute!
	 */
	protected boolean localMoreElements ;


	/**
	 * Auto generated getter method
	 * @return boolean
	 */
	public  boolean getMoreElements() {
		return localMoreElements;
	}



	/**
	 * Auto generated setter method
	 * @param param MoreElements
	 */
	public void setMoreElements(boolean param) {
		this.localMoreElements=param;
	}

	protected void writeAttributes(org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter, String prefix, String namespace) 
			throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
		writeAttribute("", "ContinuationPoint", localContinuationPoint, xmlWriter);
		writeAttribute("",
				"MoreElements",
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMoreElements), xmlWriter);
		serializeAttribute(localBrowseResultTracker,localBrowseResult,"BrowseResult",factory,xmlWriter);
		serializeAttributes(localElementsTracker,localElements,"Elements",factory,xmlWriter);
		serializeAttributes(localErrorsTracker,localErrors,"Errors",factory,xmlWriter);
		xmlWriter.writeEndElement();
	}



	/**
	 * databinding method to get an XML representation of this object
	 *
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
			throws org.apache.axis2.databinding.ADBException{

		java.util.ArrayList<Object> elementList = new java.util.ArrayList<Object>();
		java.util.ArrayList<Object> attribList = new java.util.ArrayList<Object>();

		addItem(localBrowseResultTracker,localBrowseResult,"BrowseResult",elementList);
		addItems(localElementsTracker,localElements,"Elements",elementList);
		addItems(localErrorsTracker,localErrors,"Errors",elementList);
		attribList.add(new javax.xml.namespace.QName("","ContinuationPoint"));
		attribList.add(localContinuationPoint);
		attribList.add(new javax.xml.namespace.QName("","MoreElements"));
		attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMoreElements));
		return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
	}



	/**
	 *  Factory class that keeps the parse method
	 */
	public static class Factory extends GenericFactory {

		/**
		 * static method to create the object
		 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
		 *			 If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
		 * Postcondition: If this object is an element, the reader is positioned at its end element
		 *			 If this object is a complex type, the reader is positioned at the end element of its outer element
		 */
		public static BrowseResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
			BrowseResponse object =
					new BrowseResponse();
			try {
				goToNextStartElement(reader);
				BrowseResponse result = (BrowseResponse) checkADBBeanType(NAME,reader); 
				if(result!=null) {
					return result;
				}
				// Note all attributes that were handled. Used to differ normal attributes
				// from anyAttributes.
				java.util.Vector<String> handledAttributes = new java.util.Vector<String>();
				// handle attribute "ContinuationPoint"
				handleContinuationPoint(reader.getAttributeValue(null,"ContinuationPoint"),object,handledAttributes);
				// handle attribute "MoreElements"
				String tempAttribMoreElements = reader.getAttributeValue(null,"MoreElements");
				if (tempAttribMoreElements!=null) {
					object.setMoreElements(
							org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(tempAttribMoreElements));
				} else {
					throw new org.apache.axis2.databinding.ADBException("Required attribute MoreElements is missing");
				}
				handledAttributes.add("MoreElements");
				reader.next();
				java.util.ArrayList <Object> list2 = new java.util.ArrayList<Object>();
				java.util.ArrayList <Object> list3 = new java.util.ArrayList<Object>();
				goToNextStartElement(reader);
				if (reader.isStartElement() && new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/","BrowseResult").equals(reader.getName())) {
					object.setBrowseResult(ReplyBase.Factory.parse(reader));
					reader.next();
				}  // End of if for expected property start element
				goToNextStartElement(reader);
				if (reader.isStartElement() && new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/","Elements").equals(reader.getName())) {
					// Process the array and step past its final element's end.
					list2.add(BrowseElement.Factory.parse(reader));
					//loop until we find a start element that is not part of this array
					boolean loopDone2 = false;
					while(!loopDone2) {
						loopDone2 = findStartElementNotPartOfTheArray("Elements",reader);
						if(!loopDone2) {
							list2.add(BrowseElement.Factory.parse(reader));
						}
					}
					// call the converter utility  to convert and set the array
					object.setElements((BrowseElement[])
							org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
									BrowseElement.class,
									list2));
				}  // End of if for expected property start element
				readErrorsElement(reader,object);
				checkUnexpectedStartElements(reader);
			} catch (javax.xml.stream.XMLStreamException e) {
				throw new java.lang.Exception(e);
			}
			return object;
		}
	}//end of factory class
}