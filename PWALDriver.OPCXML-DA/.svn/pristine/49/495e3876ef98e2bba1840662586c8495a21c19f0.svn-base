package eu.ebbits.pwal.impl.driver.opcxmlda.stub;

import javax.xml.namespace.QName;


/**
 * 
 * Inner class, wrapping Webservices calls to OPC server - WWSDL STUB
 *  
 * Copyright (c) 2010-2013 the ebbits project. All Rights Reserved.
 *
 * * This file was auto-generated from WSDL
 * by the Apache Axis2 version: 1.5.1  Built on : Oct 19, 2009 (10:59:00 EDT)
 *
 * @author	 ISMB
 * @version	%I%, %G%
 * @see	    eu.ebbits.pwal.impl.driver.framework.PWALDriver
 * @since	  PWAL 0.1.0
 */
@SuppressWarnings({ "rawtypes", "serial", "unchecked", "unused" })
public class OPCXML_DataAccessStub extends org.apache.axis2.client.Stub
{
	protected org.apache.axis2.description.AxisOperation[] _operations;

	//hashmaps to keep the fault mapping
	private java.util.HashMap<QName,String> faultExceptionNameMap = new java.util.HashMap<QName,String>();
	private java.util.HashMap<QName,String> faultExceptionClassNameMap = new java.util.HashMap<QName,String>();
	private java.util.HashMap<QName,String> faultMessageMap = new java.util.HashMap<QName,String>();

	private static int counter = 0;

	private static synchronized String getUniqueSuffix() {
		// reset the counter if it is greater than 99999
		if (counter > 99999) {
			counter = 0;
		}
		counter = counter + 1; 
		return java.lang.Long.toString(System.currentTimeMillis()) + "_" + counter;
	}


	private void populateAxisService() throws org.apache.axis2.AxisFault {

		//creating the Service with a unique name
		_service = new org.apache.axis2.description.AxisService("OPCXML_DataAccess" + getUniqueSuffix());
		addAnonymousOperations();

		//creating the operations
		org.apache.axis2.description.AxisOperation __operation;

		_operations = new org.apache.axis2.description.AxisOperation[8];

		__operation = new org.apache.axis2.description.OutInAxisOperation();


		__operation.setName(new javax.xml.namespace.QName(OPC_NAMESPACE, "read"));
		_service.addOperation(__operation);




		_operations[0]=__operation;


		__operation = new org.apache.axis2.description.OutInAxisOperation();


		__operation.setName(new javax.xml.namespace.QName(OPC_NAMESPACE, "write"));
		_service.addOperation(__operation);




		_operations[1]=__operation;


		__operation = new org.apache.axis2.description.OutInAxisOperation();


		__operation.setName(new javax.xml.namespace.QName(OPC_NAMESPACE, "subscribe"));
		_service.addOperation(__operation);




		_operations[2]=__operation;


		__operation = new org.apache.axis2.description.OutInAxisOperation();


		__operation.setName(new javax.xml.namespace.QName(OPC_NAMESPACE, "subscriptionPolledRefresh"));
		_service.addOperation(__operation);




		_operations[3]=__operation;


		__operation = new org.apache.axis2.description.OutInAxisOperation();


		__operation.setName(new javax.xml.namespace.QName(OPC_NAMESPACE, "getStatus"));
		_service.addOperation(__operation);




		_operations[4]=__operation;


		__operation = new org.apache.axis2.description.OutInAxisOperation();


		__operation.setName(new javax.xml.namespace.QName(OPC_NAMESPACE, "subscriptionCancel"));
		_service.addOperation(__operation);




		_operations[5]=__operation;


		__operation = new org.apache.axis2.description.OutInAxisOperation();


		__operation.setName(new javax.xml.namespace.QName(OPC_NAMESPACE, "getProperties"));
		_service.addOperation(__operation);




		_operations[6]=__operation;


		__operation = new org.apache.axis2.description.OutInAxisOperation();


		__operation.setName(new javax.xml.namespace.QName(OPC_NAMESPACE, "browse"));
		_service.addOperation(__operation);




		_operations[7]=__operation;


	}

	//populates the faults
	private void populateFaults() {



	}

	/**
	 *Constructor that takes in a configContext
	 */

	public OPCXML_DataAccessStub(org.apache.axis2.context.ConfigurationContext configurationContext,
			String targetEndpoint)
					throws org.apache.axis2.AxisFault {
		this(configurationContext,targetEndpoint,false);
	}


	/**
	 * Constructor that takes in a configContext  and useseperate listner
	 */
	public OPCXML_DataAccessStub(org.apache.axis2.context.ConfigurationContext configurationContext,
			String targetEndpoint, boolean useSeparateListener)
					throws org.apache.axis2.AxisFault {
		//To populate AxisService
		populateAxisService();
		populateFaults();

		_serviceClient = new org.apache.axis2.client.ServiceClient(configurationContext,_service);


		_serviceClient.getOptions().setTo(new org.apache.axis2.addressing.EndpointReference(
				targetEndpoint));
		_serviceClient.getOptions().setUseSeparateListener(useSeparateListener);


	}

	/**
	 * Default Constructor
	 */
	public OPCXML_DataAccessStub(org.apache.axis2.context.ConfigurationContext configurationContext) throws org.apache.axis2.AxisFault {

		this(configurationContext,"http://192.168.87.101/OPCXMLServer/sopcweb.asmx" );

	}

	/**
	 * Default Constructor
	 */
	public OPCXML_DataAccessStub() throws org.apache.axis2.AxisFault {

		this("http://192.168.87.101/OPCXMLServer/sopcweb.asmx" );

	}

	/**
	 * Constructor taking the target endpoint
	 */
	public OPCXML_DataAccessStub(String targetEndpoint) throws org.apache.axis2.AxisFault {
		this(null,targetEndpoint);
	}




	/**
	 * Auto generated method signature
	 * 
	 * @see eu.ebbits.m12demo.manufacturing.pwal.opcaxis2.OPCXML_DataAccess#read
	 * @param read

	 */



	public  ReadResponse read(

			Read read)


					throws java.rmi.RemoteException

					{
		org.apache.axis2.context.MessageContext _messageContext = null;
		try{
			org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[0].getName());
			_operationClient.getOptions().setAction("http://opcfoundation.org/webservices/XMLDA/1.0/Read");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



			addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();



			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;


			env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
					read,
					optimizeContent(new javax.xml.namespace.QName(OPC_NAMESPACE,
							"read")));

			//adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			//execute the operation client
			_operationClient.execute(true);


			org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
					org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


			java.lang.Object object = fromOM(
					_returnEnv.getBody().getFirstElement() ,
					ReadResponse.class,
					getEnvelopeNamespaces(_returnEnv));


			return (ReadResponse)object;

		}catch(org.apache.axis2.AxisFault f) {

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt!=null) {
				if (faultExceptionNameMap.containsKey(faultElt.getQName())) {
					//make the fault by reflection
					try{
						String exceptionClassName = (String)faultExceptionClassNameMap.get(faultElt.getQName());
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex=
								(java.lang.Exception) exceptionClass.newInstance();
						//message class
						String messageClassName = (String)faultMessageMap.get(faultElt.getQName());
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
						java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
								new java.lang.Class[]{messageClass});
						m.invoke(ex,new java.lang.Object[]{messageObject});


						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					}catch(java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}  catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}   catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}
				}else{
					throw f;
				}
			}else{
				throw f;
			}
		} finally {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}
					}

	/**
	 * Auto generated method signature
	 * 
	 * @see eu.ebbits.m12demo.manufacturing.pwal.opcaxis2.OPCXML_DataAccess#write
	 * @param write

	 */



	public  WriteResponse write(

			Write write)


					throws java.rmi.RemoteException

					{
		org.apache.axis2.context.MessageContext _messageContext = null;
		try{
			org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[1].getName());
			_operationClient.getOptions().setAction("http://opcfoundation.org/webservices/XMLDA/1.0/Write");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



			addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();



			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;


			env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
					write,
					optimizeContent(new javax.xml.namespace.QName(OPC_NAMESPACE,
							"write")));

			//adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			//execute the operation client
			_operationClient.execute(true);


			org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
					org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


			java.lang.Object object = fromOM(
					_returnEnv.getBody().getFirstElement() ,
					WriteResponse.class,
					getEnvelopeNamespaces(_returnEnv));


			return (WriteResponse)object;

		}catch(org.apache.axis2.AxisFault f) {

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt!=null) {
				if (faultExceptionNameMap.containsKey(faultElt.getQName())) {
					//make the fault by reflection
					try{
						String exceptionClassName = (String)faultExceptionClassNameMap.get(faultElt.getQName());
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex=
								(java.lang.Exception) exceptionClass.newInstance();
						//message class
						String messageClassName = (String)faultMessageMap.get(faultElt.getQName());
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
						java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
								new java.lang.Class[]{messageClass});
						m.invoke(ex,new java.lang.Object[]{messageObject});


						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					}catch(java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}  catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}   catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}
				}else{
					throw f;
				}
			}else{
				throw f;
			}
		} finally {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}
					}


	/**
	 * Auto generated method signature
	 * 
	 * @see eu.ebbits.m12demo.manufacturing.pwal.opcaxis2.OPCXML_DataAccess#browse
	 * @param browse

	 */



	public  BrowseResponse browse(

			Browse browse)


					throws java.rmi.RemoteException

					{
		org.apache.axis2.context.MessageContext _messageContext = null;
		try{
			org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[7].getName());
			_operationClient.getOptions().setAction("http://opcfoundation.org/webservices/XMLDA/1.0/Browse");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



			addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();



			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;


			env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
					browse,
					optimizeContent(new javax.xml.namespace.QName(OPC_NAMESPACE,
							"browse")));

			//adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			//execute the operation client
			_operationClient.execute(true);


			org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
					org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


			java.lang.Object object = fromOM(
					_returnEnv.getBody().getFirstElement() ,
					BrowseResponse.class,
					getEnvelopeNamespaces(_returnEnv));


			return (BrowseResponse)object;

		}catch(org.apache.axis2.AxisFault f) {

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt!=null) {
				if (faultExceptionNameMap.containsKey(faultElt.getQName())) {
					//make the fault by reflection
					try{
						String exceptionClassName = (String)faultExceptionClassNameMap.get(faultElt.getQName());
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex=
								(java.lang.Exception) exceptionClass.newInstance();
						//message class
						String messageClassName = (String)faultMessageMap.get(faultElt.getQName());
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
						java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
								new java.lang.Class[]{messageClass});
						m.invoke(ex,new java.lang.Object[]{messageObject});


						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					}catch(java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}  catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}   catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original Axis fault
						throw f;
					}
				}else{
					throw f;
				}
			}else{
				throw f;
			}
		} finally {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}
					}



	/**
	 *  A utility method that copies the namepaces from the SOAPEnvelope
	 */
	private java.util.Map getEnvelopeNamespaces(org.apache.axiom.soap.SOAPEnvelope env) {
		java.util.Map returnMap = new java.util.HashMap();
		java.util.Iterator namespaceIterator = env.getAllDeclaredNamespaces();
		while (namespaceIterator.hasNext()) {
			org.apache.axiom.om.OMNamespace ns = (org.apache.axiom.om.OMNamespace) namespaceIterator.next();
			returnMap.put(ns.getPrefix(),ns.GenericFactory.getNamespaceURI());
		}
		return returnMap;
	}



	private javax.xml.namespace.QName[] opNameArray = null;
	private boolean optimizeContent(javax.xml.namespace.QName opName) {


		if (opNameArray == null) {
			return false;
		}
		for (int i = 0; i < opNameArray.length; i++) {
			if (opName.equals(opNameArray[i])) {
				return true;   
			}
		}
		return false;
	}


	public static class ExtensionMapper{

		public static java.lang.Object getTypeObject(String namespaceURI,
				String typeName,
				javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{


			if (
					OPC_NAMESPACE.equals(namespaceURI) &&
					"BrowseElement".equals(typeName)) {

				return  BrowseElement.Factory.parse(reader);


			}


			if (
					OPC_NAMESPACE.equals(namespaceURI) &&
					"ReadRequestItem".equals(typeName)) {

				return  ReadRequestItem.Factory.parse(reader);


			}


			if (
					OPC_NAMESPACE.equals(namespaceURI) &&
					"browseFilter".equals(typeName)) {

				return  BrowseFilter.Factory.parse(reader);


			}



			if (
					OPC_NAMESPACE.equals(namespaceURI) &&
					"OPCError".equals(typeName)) {

				return  OPCError.Factory.parse(reader);


			}


			if (
					OPC_NAMESPACE.equals(namespaceURI) &&
					"RequestOptions".equals(typeName)) {

				return  RequestOptions.Factory.parse(reader);


			}



			if (
					OPC_NAMESPACE.equals(namespaceURI) &&
					"ReadRequestItemList".equals(typeName)) {

				return  ReadRequestItemList.Factory.parse(reader);


			}


			if (
					OPC_NAMESPACE.equals(namespaceURI) &&
					"WriteRequestItemList".equals(typeName)) {

				return  WriteRequestItemList.Factory.parse(reader);


			}


			throw new org.apache.axis2.databinding.ADBException("Unsupported type " + namespaceURI + " " + typeName);
		}

	}

	public static class RequestOptions
	implements org.apache.axis2.databinding.ADBBean{
		/* This type was generated from the piece of schema that had
			 name = RequestOptions
			 Namespace URI = http://opcfoundation.org/webservices/XMLDA/1.0/
			 Namespace Prefix = ns1
		 */


		private static String generatePrefix(String namespace) {
			if(namespace.equals(OPC_NAMESPACE)) {
				return OPC_PREFIX;
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}



		/**
		 * field for RequestDeadline
		 * This was an Attribute!
		 */


		protected java.util.Calendar localRequestDeadline ;


		/**
		 * Auto generated getter method
		 * @return java.util.Calendar
		 */
		public  java.util.Calendar getRequestDeadline() {
			return localRequestDeadline;
		}



		/**
		 * Auto generated setter method
		 * @param param RequestDeadline
		 */
		public void setRequestDeadline(java.util.Calendar param) {

			this.localRequestDeadline=param;


		}


		/**
		 * field for ReturnErrorText
		 * This was an Attribute!
		 */


		protected boolean localReturnErrorText =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean("true");


		/**
		 * Auto generated getter method
		 * @return boolean
		 */
		public  boolean getReturnErrorText() {
			return localReturnErrorText;
		}



		/**
		 * Auto generated setter method
		 * @param param ReturnErrorText
		 */
		public void setReturnErrorText(boolean param) {

			this.localReturnErrorText=param;


		}


		/**
		 * field for ReturnDiagnosticInfo
		 * This was an Attribute!
		 */


		protected boolean localReturnDiagnosticInfo =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean("false");


		/**
		 * Auto generated getter method
		 * @return boolean
		 */
		public  boolean getReturnDiagnosticInfo() {
			return localReturnDiagnosticInfo;
		}



		/**
		 * Auto generated setter method
		 * @param param ReturnDiagnosticInfo
		 */
		public void setReturnDiagnosticInfo(boolean param) {

			this.localReturnDiagnosticInfo=param;


		}


		/**
		 * field for ReturnItemTime
		 * This was an Attribute!
		 */


		protected boolean localReturnItemTime =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean("false");


		/**
		 * Auto generated getter method
		 * @return boolean
		 */
		public  boolean getReturnItemTime() {
			return localReturnItemTime;
		}



		/**
		 * Auto generated setter method
		 * @param param ReturnItemTime
		 */
		public void setReturnItemTime(boolean param) {

			this.localReturnItemTime=param;


		}


		/**
		 * field for ReturnItemPath
		 * This was an Attribute!
		 */


		protected boolean localReturnItemPath =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean("false");


		/**
		 * Auto generated getter method
		 * @return boolean
		 */
		public  boolean getReturnItemPath() {
			return localReturnItemPath;
		}



		/**
		 * Auto generated setter method
		 * @param param ReturnItemPath
		 */
		public void setReturnItemPath(boolean param) {

			this.localReturnItemPath=param;


		}


		/**
		 * field for ReturnItemName
		 * This was an Attribute!
		 */


		protected boolean localReturnItemName =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean("false");


		/**
		 * Auto generated getter method
		 * @return boolean
		 */
		public  boolean getReturnItemName() {
			return localReturnItemName;
		}



		/**
		 * Auto generated setter method
		 * @param param ReturnItemName
		 */
		public void setReturnItemName(boolean param) {

			this.localReturnItemName=param;


		}


		/**
		 * field for ClientRequestHandle
		 * This was an Attribute!
		 */


		protected String localClientRequestHandle ;


		/**
		 * Auto generated getter method
		 * @return String
		 */
		public  String getClientRequestHandle() {
			return localClientRequestHandle;
		}



		/**
		 * Auto generated setter method
		 * @param param ClientRequestHandle
		 */
		public void setClientRequestHandle(String param) {

			this.localClientRequestHandle=param;


		}


		/**
		 * field for LocaleID
		 * This was an Attribute!
		 */


		protected String localLocaleID ;


		/**
		 * Auto generated getter method
		 * @return String
		 */
		public  String getLocaleID() {
			return localLocaleID;
		}



		/**
		 * Auto generated setter method
		 * @param param LocaleID
		 */
		public void setLocaleID(String param) {

			this.localLocaleID=param;


		}


		/**
		 * isReaderMTOMAware
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
			boolean isReaderMTOMAware = false;

			try{
				isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}catch(java.lang.IllegalArgumentException e) {
				isReaderMTOMAware = false;
			}
			return isReaderMTOMAware;
		}


		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,parentQName) {

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
					RequestOptions.this.serialize(parentQName,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
					parentQName,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory,
				org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory,
				org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			String prefix = null;
			String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.GenericFactory.getNamespaceURI();

			if ((namespace != null) && (namespace.trim().length() > 0)) {
				String writerPrefix = xmlWriter.getPrefix(namespace);
				if (writerPrefix != null) {
					xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
				} else {
					if (prefix == null) {
						prefix = generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
					xmlWriter.writeNamespace(prefix, namespace);
					xmlWriter.setPrefix(prefix, namespace);
				}
			} else {
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if (serializeType) {


				String namespacePrefix = registerPrefix(xmlWriter,OPC_NAMESPACE);
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":RequestOptions",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"RequestOptions",
							xmlWriter);
				}


			}

			if (localRequestDeadline != null) {

				writeAttribute("",
						"RequestDeadline",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRequestDeadline), xmlWriter);


			}

			if (true) {

				writeAttribute("",
						"ReturnErrorText",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReturnErrorText), xmlWriter);


			}

			if (true) {

				writeAttribute("",
						"ReturnDiagnosticInfo",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReturnDiagnosticInfo), xmlWriter);


			}

			if (true) {

				writeAttribute("",
						"ReturnItemTime",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReturnItemTime), xmlWriter);


			}

			if (true) {

				writeAttribute("",
						"ReturnItemPath",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReturnItemPath), xmlWriter);


			}

			if (true) {

				writeAttribute("",
						"ReturnItemName",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReturnItemName), xmlWriter);


			}

			if (localClientRequestHandle != null) {

				writeAttribute("",
						"ClientRequestHandle",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localClientRequestHandle), xmlWriter);


			}

			if (localLocaleID != null) {

				writeAttribute("",
						"LocaleID",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLocaleID), xmlWriter);


			}

			xmlWriter.writeEndElement();


		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(String prefix,String namespace,String attName,
				String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(String namespace,String attName,
				String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals(""))
			{
				xmlWriter.writeAttribute(attName,attValue);
			}
			else
			{
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(String namespace, String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			String attributeNamespace = qname.GenericFactory.getNamespaceURI();
			String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			String namespaceURI = qname.GenericFactory.getNamespaceURI();
			if (namespaceURI != null) {
				String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				StringBuffer stringToWrite = new StringBuffer();
				String namespaceURI = null;
				String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].GenericFactory.getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
			String prefix = xmlWriter.getPrefix(namespace);

			if (prefix == null) {
				prefix = generatePrefix(namespace);

				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}

			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();


			attribList.add(
					new javax.xml.namespace.QName("","RequestDeadline"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRequestDeadline));

			attribList.add(
					new javax.xml.namespace.QName("","ReturnErrorText"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReturnErrorText));

			attribList.add(
					new javax.xml.namespace.QName("","ReturnDiagnosticInfo"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReturnDiagnosticInfo));

			attribList.add(
					new javax.xml.namespace.QName("","ReturnItemTime"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReturnItemTime));

			attribList.add(
					new javax.xml.namespace.QName("","ReturnItemPath"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReturnItemPath));

			attribList.add(
					new javax.xml.namespace.QName("","ReturnItemName"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReturnItemName));

			attribList.add(
					new javax.xml.namespace.QName("","ClientRequestHandle"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localClientRequestHandle));

			attribList.add(
					new javax.xml.namespace.QName("","LocaleID"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLocaleID));


			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *			 If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *			 If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static RequestOptions parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				RequestOptions object =
						new RequestOptions();

				int event;
				String nillableValue = null;
				String prefix ="";
				String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null) {
						String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null) {
							String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"RequestOptions".equals(type)) {
								//find namespace for the prefix
								String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (RequestOptions)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();



					// handle attribute "RequestDeadline"
					String tempAttribRequestDeadline =

							reader.getAttributeValue(null,"RequestDeadline");

					if (tempAttribRequestDeadline!=null) {
						String content = tempAttribRequestDeadline;

						object.setRequestDeadline(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(tempAttribRequestDeadline));

					} else {

					}
					handledAttributes.add("RequestDeadline");

					// handle attribute "ReturnErrorText"
					String tempAttribReturnErrorText =

					reader.getAttributeValue(null,"ReturnErrorText");

					if (tempAttribReturnErrorText!=null) {
						String content = tempAttribReturnErrorText;

						object.setReturnErrorText(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(tempAttribReturnErrorText));

					} else {

					}
					handledAttributes.add("ReturnErrorText");

					// handle attribute "ReturnDiagnosticInfo"
					String tempAttribReturnDiagnosticInfo =

					reader.getAttributeValue(null,"ReturnDiagnosticInfo");

					if (tempAttribReturnDiagnosticInfo!=null) {
						String content = tempAttribReturnDiagnosticInfo;

						object.setReturnDiagnosticInfo(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(tempAttribReturnDiagnosticInfo));

					} else {

					}
					handledAttributes.add("ReturnDiagnosticInfo");

					// handle attribute "ReturnItemTime"
					String tempAttribReturnItemTime =

					reader.getAttributeValue(null,"ReturnItemTime");

					if (tempAttribReturnItemTime!=null) {
						String content = tempAttribReturnItemTime;

						object.setReturnItemTime(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(tempAttribReturnItemTime));

					} else {

					}
					handledAttributes.add("ReturnItemTime");

					// handle attribute "ReturnItemPath"
					String tempAttribReturnItemPath =

					reader.getAttributeValue(null,"ReturnItemPath");

					if (tempAttribReturnItemPath!=null) {
						String content = tempAttribReturnItemPath;

						object.setReturnItemPath(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(tempAttribReturnItemPath));

					} else {

					}
					handledAttributes.add("ReturnItemPath");

					// handle attribute "ReturnItemName"
					String tempAttribReturnItemName =

					reader.getAttributeValue(null,"ReturnItemName");

					if (tempAttribReturnItemName!=null) {
						String content = tempAttribReturnItemName;

						object.setReturnItemName(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(tempAttribReturnItemName));

					} else {

					}
					handledAttributes.add("ReturnItemName");

					// handle attribute "ClientRequestHandle"
					String tempAttribClientRequestHandle =

					reader.getAttributeValue(null,"ClientRequestHandle");

					if (tempAttribClientRequestHandle!=null) {
						String content = tempAttribClientRequestHandle;

						object.setClientRequestHandle(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(tempAttribClientRequestHandle));

					} else {

					}
					handledAttributes.add("ClientRequestHandle");

					// handle attribute "LocaleID"
					String tempAttribLocaleID =

					reader.getAttributeValue(null,"LocaleID");

					if (tempAttribLocaleID!=null) {
						String content = tempAttribLocaleID;

						object.setLocaleID(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(tempAttribLocaleID));

					} else {

					}
					handledAttributes.add("LocaleID");


					reader.next();




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class Read
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				OPC_NAMESPACE,
				"Read",
				OPC_PREFIX);



		private static String generatePrefix(String namespace) {
			if(namespace.equals(OPC_NAMESPACE)) {
				return OPC_PREFIX;
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}



		/**
		 * field for Options
		 */


		protected RequestOptions localOptions ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localOptionsTracker = false ;


		/**
		 * Auto generated getter method
		 * @return RequestOptions
		 */
		public  RequestOptions getOptions() {
			return localOptions;
		}



		/**
		 * Auto generated setter method
		 * @param param Options
		 */
		public void setOptions(RequestOptions param) {

			if (param != null) {
				//update the setting tracker
				localOptionsTracker = true;
			} else {
				localOptionsTracker = false;

			}

			this.localOptions=param;


		}


		/**
		 * field for ItemList
		 */


		protected ReadRequestItemList localItemList ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localItemListTracker = false ;


		/**
		 * Auto generated getter method
		 * @return ReadRequestItemList
		 */
		public  ReadRequestItemList getItemList() {
			return localItemList;
		}



		/**
		 * Auto generated setter method
		 * @param param ItemList
		 */
		public void setItemList(ReadRequestItemList param) {

			if (param != null) {
				//update the setting tracker
				localItemListTracker = true;
			} else {
				localItemListTracker = false;

			}

			this.localItemList=param;


		}


		/**
		 * isReaderMTOMAware
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
			boolean isReaderMTOMAware = false;

			try{
				isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}catch(java.lang.IllegalArgumentException e) {
				isReaderMTOMAware = false;
			}
			return isReaderMTOMAware;
		}


		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME) {

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
					Read.this.serialize(MY_QNAME,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
					MY_QNAME,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory,
				org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory,
				org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			String prefix = null;
			String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.GenericFactory.getNamespaceURI();

			if ((namespace != null) && (namespace.trim().length() > 0)) {
				String writerPrefix = xmlWriter.getPrefix(namespace);
				if (writerPrefix != null) {
					xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
				} else {
					if (prefix == null) {
						prefix = generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
					xmlWriter.writeNamespace(prefix, namespace);
					xmlWriter.setPrefix(prefix, namespace);
				}
			} else {
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if (serializeType) {


				String namespacePrefix = registerPrefix(xmlWriter,OPC_NAMESPACE);
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":Read",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"Read",
							xmlWriter);
				}


			}
			if (localOptionsTracker) {
				if (localOptions==null) {
					throw new org.apache.axis2.databinding.ADBException("Options cannot be null!!");
				}
				localOptions.serialize(new javax.xml.namespace.QName(OPC_NAMESPACE,"Options"),
						factory,xmlWriter);
			} if (localItemListTracker) {
				if (localItemList==null) {
					throw new org.apache.axis2.databinding.ADBException("ItemList cannot be null!!");
				}
				localItemList.serialize(new javax.xml.namespace.QName(OPC_NAMESPACE,"ItemList"),
						factory,xmlWriter);
			}
			xmlWriter.writeEndElement();


		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(String prefix,String namespace,String attName,
				String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(String namespace,String attName,
				String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals(""))
			{
				xmlWriter.writeAttribute(attName,attValue);
			}
			else
			{
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(String namespace, String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			String attributeNamespace = qname.GenericFactory.getNamespaceURI();
			String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			String namespaceURI = qname.GenericFactory.getNamespaceURI();
			if (namespaceURI != null) {
				String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				StringBuffer stringToWrite = new StringBuffer();
				String namespaceURI = null;
				String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].GenericFactory.getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
			String prefix = xmlWriter.getPrefix(namespace);

			if (prefix == null) {
				prefix = generatePrefix(namespace);

				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}

			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localOptionsTracker) {
				elementList.add(new javax.xml.namespace.QName(OPC_NAMESPACE,
						"Options"));


				if (localOptions==null) {
					throw new org.apache.axis2.databinding.ADBException("Options cannot be null!!");
				}
				elementList.add(localOptions);
			} if (localItemListTracker) {
				elementList.add(new javax.xml.namespace.QName(OPC_NAMESPACE,
						"ItemList"));


				if (localItemList==null) {
					throw new org.apache.axis2.databinding.ADBException("ItemList cannot be null!!");
				}
				elementList.add(localItemList);
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *			 If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *			 If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static Read parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				Read object =
						new Read();

				int event;
				String nillableValue = null;
				String prefix ="";
				String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null) {
						String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null) {
							String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"Read".equals(type)) {
								//find namespace for the prefix
								String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (Read)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName(OPC_NAMESPACE,"Options").equals(reader.getName())) {

						object.setOptions(RequestOptions.Factory.parse(reader));

						reader.next();

					}  // End of if for expected property start element

					else {

					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName(OPC_NAMESPACE,"ItemList").equals(reader.getName())) {

						object.setItemList(ReadRequestItemList.Factory.parse(reader));

						reader.next();

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class Browse
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				OPC_NAMESPACE,
				"Browse",
				OPC_PREFIX);



		private static String generatePrefix(String namespace) {
			if(namespace.equals(OPC_NAMESPACE)) {
				return OPC_PREFIX;
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}



		/**
		 * field for PropertyNames
		 * This was an Array!
		 */


		protected javax.xml.namespace.QName[] localPropertyNames ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localPropertyNamesTracker = false ;


		/**
		 * Auto generated getter method
		 * @return javax.xml.namespace.QName[]
		 */
		public  javax.xml.namespace.QName[] getPropertyNames() {
			return localPropertyNames;
		}






		/**
		 * validate the array for PropertyNames
		 */
		protected void validatePropertyNames(javax.xml.namespace.QName[] param) {

		}


		/**
		 * Auto generated setter method
		 * @param param PropertyNames
		 */
		public void setPropertyNames(javax.xml.namespace.QName[] param) {

			validatePropertyNames(param);


			if (param != null) {
				//update the setting tracker
				localPropertyNamesTracker = true;
			} else {
				localPropertyNamesTracker = false;

			}

			this.localPropertyNames=param;
		}



		/**
		 * Auto generated add method for the array for convenience
		 * @param param javax.xml.namespace.QName
		 */
		public void addPropertyNames(javax.xml.namespace.QName param) {
			if (localPropertyNames == null) {
				localPropertyNames = new javax.xml.namespace.QName[]{};
			}


			//update the setting tracker
			localPropertyNamesTracker = true;


			java.util.List list =
					org.apache.axis2.databinding.utils.ConverterUtil.toList(localPropertyNames);
			list.add(param);
			this.localPropertyNames =
					(javax.xml.namespace.QName[])list.toArray(
							new javax.xml.namespace.QName[list.size()]);

		}


		/**
		 * field for LocaleID
		 * This was an Attribute!
		 */


		protected String localLocaleID ;


		/**
		 * Auto generated getter method
		 * @return String
		 */
		public  String getLocaleID() {
			return localLocaleID;
		}



		/**
		 * Auto generated setter method
		 * @param param LocaleID
		 */
		public void setLocaleID(String param) {

			this.localLocaleID=param;


		}


		/**
		 * field for ClientRequestHandle
		 * This was an Attribute!
		 */


		protected String localClientRequestHandle ;


		/**
		 * Auto generated getter method
		 * @return String
		 */
		public  String getClientRequestHandle() {
			return localClientRequestHandle;
		}



		/**
		 * Auto generated setter method
		 * @param param ClientRequestHandle
		 */
		public void setClientRequestHandle(String param) {

			this.localClientRequestHandle=param;


		}


		/**
		 * field for ItemPath
		 * This was an Attribute!
		 */


		protected String localItemPath ;


		/**
		 * Auto generated getter method
		 * @return String
		 */
		public  String getItemPath() {
			return localItemPath;
		}



		/**
		 * Auto generated setter method
		 * @param param ItemPath
		 */
		public void setItemPath(String param) {

			this.localItemPath=param;


		}


		/**
		 * field for ItemName
		 * This was an Attribute!
		 */


		protected String localItemName ;


		/**
		 * Auto generated getter method
		 * @return String
		 */
		public  String getItemName() {
			return localItemName;
		}



		/**
		 * Auto generated setter method
		 * @param param ItemName
		 */
		public void setItemName(String param) {

			this.localItemName=param;


		}


		/**
		 * field for ContinuationPoint
		 * This was an Attribute!
		 */


		protected String localContinuationPoint ;


		/**
		 * Auto generated getter method
		 * @return String
		 */
		public  String getContinuationPoint() {
			return localContinuationPoint;
		}



		/**
		 * Auto generated setter method
		 * @param param ContinuationPoint
		 */
		public void setContinuationPoint(String param) {

			this.localContinuationPoint=param;


		}


		/**
		 * field for MaxElementsReturned
		 * This was an Attribute!
		 */


		protected int localMaxElementsReturned ;


		/**
		 * Auto generated getter method
		 * @return int
		 */
		public  int getMaxElementsReturned() {
			return localMaxElementsReturned;
		}



		/**
		 * Auto generated setter method
		 * @param param MaxElementsReturned
		 */
		public void setMaxElementsReturned(int param) {

			this.localMaxElementsReturned=param;


		}


		/**
		 * field for BrowseFilter
		 * This was an Attribute!
		 */


		protected BrowseFilter localBrowseFilter ;


		/**
		 * Auto generated getter method
		 * @return BrowseFilter
		 */
		public  BrowseFilter getBrowseFilter() {
			return localBrowseFilter;
		}



		/**
		 * Auto generated setter method
		 * @param param BrowseFilter
		 */
		public void setBrowseFilter(BrowseFilter param) {

			this.localBrowseFilter=param;


		}


		/**
		 * field for ElementNameFilter
		 * This was an Attribute!
		 */


		protected String localElementNameFilter ;


		/**
		 * Auto generated getter method
		 * @return String
		 */
		public  String getElementNameFilter() {
			return localElementNameFilter;
		}



		/**
		 * Auto generated setter method
		 * @param param ElementNameFilter
		 */
		public void setElementNameFilter(String param) {

			this.localElementNameFilter=param;


		}


		/**
		 * field for VendorFilter
		 * This was an Attribute!
		 */


		protected String localVendorFilter ;


		/**
		 * Auto generated getter method
		 * @return String
		 */
		public  String getVendorFilter() {
			return localVendorFilter;
		}



		/**
		 * Auto generated setter method
		 * @param param VendorFilter
		 */
		public void setVendorFilter(String param) {

			this.localVendorFilter=param;


		}


		/**
		 * field for ReturnAllProperties
		 * This was an Attribute!
		 */


		protected boolean localReturnAllProperties ;


		/**
		 * Auto generated getter method
		 * @return boolean
		 */
		public  boolean getReturnAllProperties() {
			return localReturnAllProperties;
		}



		/**
		 * Auto generated setter method
		 * @param param ReturnAllProperties
		 */
		public void setReturnAllProperties(boolean param) {

			this.localReturnAllProperties=param;


		}


		/**
		 * field for ReturnPropertyValues
		 * This was an Attribute!
		 */


		protected boolean localReturnPropertyValues ;


		/**
		 * Auto generated getter method
		 * @return boolean
		 */
		public  boolean getReturnPropertyValues() {
			return localReturnPropertyValues;
		}



		/**
		 * Auto generated setter method
		 * @param param ReturnPropertyValues
		 */
		public void setReturnPropertyValues(boolean param) {

			this.localReturnPropertyValues=param;


		}


		/**
		 * field for ReturnErrorText
		 * This was an Attribute!
		 */


		protected boolean localReturnErrorText ;


		/**
		 * Auto generated getter method
		 * @return boolean
		 */
		public  boolean getReturnErrorText() {
			return localReturnErrorText;
		}



		/**
		 * Auto generated setter method
		 * @param param ReturnErrorText
		 */
		public void setReturnErrorText(boolean param) {

			this.localReturnErrorText=param;


		}


		/**
		 * isReaderMTOMAware
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
			boolean isReaderMTOMAware = false;

			try{
				isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}catch(java.lang.IllegalArgumentException e) {
				isReaderMTOMAware = false;
			}
			return isReaderMTOMAware;
		}


		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME) {

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
					Browse.this.serialize(MY_QNAME,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
					MY_QNAME,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory,
				org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory,
				org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			String prefix = null;
			String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.GenericFactory.getNamespaceURI();

			if ((namespace != null) && (namespace.trim().length() > 0)) {
				String writerPrefix = xmlWriter.getPrefix(namespace);
				if (writerPrefix != null) {
					xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
				} else {
					if (prefix == null) {
						prefix = generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
					xmlWriter.writeNamespace(prefix, namespace);
					xmlWriter.setPrefix(prefix, namespace);
				}
			} else {
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if (serializeType) {


				String namespacePrefix = registerPrefix(xmlWriter,OPC_NAMESPACE);
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":Browse",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"Browse",
							xmlWriter);
				}


			}

			if (localLocaleID != null) {

				writeAttribute("",
						"LocaleID",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLocaleID), xmlWriter);


			}

			if (localClientRequestHandle != null) {

				writeAttribute("",
						"ClientRequestHandle",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localClientRequestHandle), xmlWriter);


			}

			if (localItemPath != null) {

				writeAttribute("",
						"ItemPath",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localItemPath), xmlWriter);


			}

			if (localItemName != null) {

				writeAttribute("",
						"ItemName",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localItemName), xmlWriter);


			}

			if (localContinuationPoint != null) {

				writeAttribute("",
						"ContinuationPoint",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localContinuationPoint), xmlWriter);


			}

			if (localMaxElementsReturned!=java.lang.Integer.MIN_VALUE) {

				writeAttribute("",
						"MaxElementsReturned",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMaxElementsReturned), xmlWriter);


			}

			else {
				throw new org.apache.axis2.databinding.ADBException("required attribute localMaxElementsReturned is null");
			}


			if (localBrowseFilter != null) {
				writeAttribute("",
						"BrowseFilter",
						localBrowseFilter.toString(), xmlWriter);
			}

			else {
				throw new org.apache.axis2.databinding.ADBException("required attribute localBrowseFilter is null");
			}

			if (localElementNameFilter != null) {

				writeAttribute("",
						"ElementNameFilter",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localElementNameFilter), xmlWriter);


			}

			if (localVendorFilter != null) {

				writeAttribute("",
						"VendorFilter",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localVendorFilter), xmlWriter);


			}

			if (true) {

				writeAttribute("",
						"ReturnAllProperties",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReturnAllProperties), xmlWriter);


			}

			else {
				throw new org.apache.axis2.databinding.ADBException("required attribute localReturnAllProperties is null");
			}

			if (true) {

				writeAttribute("",
						"ReturnPropertyValues",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReturnPropertyValues), xmlWriter);


			}

			else {
				throw new org.apache.axis2.databinding.ADBException("required attribute localReturnPropertyValues is null");
			}

			if (true) {

				writeAttribute("",
						"ReturnErrorText",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReturnErrorText), xmlWriter);


			}

			else {
				throw new org.apache.axis2.databinding.ADBException("required attribute localReturnErrorText is null");
			}
			if (localPropertyNamesTracker) {
				if (localPropertyNames!=null) {
					namespace = OPC_NAMESPACE;
					boolean emptyNamespace = namespace == null || namespace.length() == 0;
					prefix =  emptyNamespace ? null : xmlWriter.getPrefix(namespace);
					for (int i = 0;i < localPropertyNames.length;i++) {

						if (localPropertyNames[i] != null) {

							if (!emptyNamespace) {
								if (prefix == null) {
									String prefix2 = generatePrefix(namespace);

									xmlWriter.writeStartElement(prefix2,"PropertyNames", namespace);
									xmlWriter.writeNamespace(prefix2, namespace);
									xmlWriter.setPrefix(prefix2, namespace);

								} else {
									xmlWriter.writeStartElement(namespace,"PropertyNames");
								}

							} else {
								xmlWriter.writeStartElement("PropertyNames");
							}


							xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPropertyNames[i]));

							xmlWriter.writeEndElement();

						} else {

							// we have to do nothing since minOccurs is zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException("PropertyNames cannot be null!!");

				}

			}
			xmlWriter.writeEndElement();


		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(String prefix,String namespace,String attName,
				String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(String namespace,String attName,
				String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals(""))
			{
				xmlWriter.writeAttribute(attName,attValue);
			}
			else
			{
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(String namespace, String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			String attributeNamespace = qname.GenericFactory.getNamespaceURI();
			String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			String namespaceURI = qname.GenericFactory.getNamespaceURI();
			if (namespaceURI != null) {
				String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				StringBuffer stringToWrite = new StringBuffer();
				String namespaceURI = null;
				String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].GenericFactory.getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
			String prefix = xmlWriter.getPrefix(namespace);

			if (prefix == null) {
				prefix = generatePrefix(namespace);

				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}

			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localPropertyNamesTracker) {
				if (localPropertyNames!=null) {
					for (int i = 0;i < localPropertyNames.length;i++) {

						if (localPropertyNames[i] != null) {
							elementList.add(new javax.xml.namespace.QName(OPC_NAMESPACE,
									"PropertyNames"));
							elementList.add(
									org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPropertyNames[i]));
						} else {

							// have to do nothing

						}


					}
				} else {

					throw new org.apache.axis2.databinding.ADBException("PropertyNames cannot be null!!");

				}

			}
			attribList.add(
					new javax.xml.namespace.QName("","LocaleID"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLocaleID));

			attribList.add(
					new javax.xml.namespace.QName("","ClientRequestHandle"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localClientRequestHandle));

			attribList.add(
					new javax.xml.namespace.QName("","ItemPath"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localItemPath));

			attribList.add(
					new javax.xml.namespace.QName("","ItemName"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localItemName));

			attribList.add(
					new javax.xml.namespace.QName("","ContinuationPoint"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localContinuationPoint));

			attribList.add(
					new javax.xml.namespace.QName("","MaxElementsReturned"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMaxElementsReturned));

			attribList.add(
					new javax.xml.namespace.QName("","BrowseFilter"));

			attribList.add(localBrowseFilter.toString());

			attribList.add(
					new javax.xml.namespace.QName("","ElementNameFilter"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localElementNameFilter));

			attribList.add(
					new javax.xml.namespace.QName("","VendorFilter"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localVendorFilter));

			attribList.add(
					new javax.xml.namespace.QName("","ReturnAllProperties"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReturnAllProperties));

			attribList.add(
					new javax.xml.namespace.QName("","ReturnPropertyValues"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReturnPropertyValues));

			attribList.add(
					new javax.xml.namespace.QName("","ReturnErrorText"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReturnErrorText));


			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *			 If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *			 If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static Browse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				Browse object =
						new Browse();

				int event;
				String nillableValue = null;
				String prefix ="";
				String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null) {
						String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null) {
							String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"Browse".equals(type)) {
								//find namespace for the prefix
								String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (Browse)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();



					// handle attribute "LocaleID"
					String tempAttribLocaleID =

							reader.getAttributeValue(null,"LocaleID");

					if (tempAttribLocaleID!=null) {
						String content = tempAttribLocaleID;

						object.setLocaleID(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(tempAttribLocaleID));

					} else {

					}
					handledAttributes.add("LocaleID");

					// handle attribute "ClientRequestHandle"
					String tempAttribClientRequestHandle =

					reader.getAttributeValue(null,"ClientRequestHandle");

					if (tempAttribClientRequestHandle!=null) {
						String content = tempAttribClientRequestHandle;

						object.setClientRequestHandle(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(tempAttribClientRequestHandle));

					} else {

					}
					handledAttributes.add("ClientRequestHandle");

					// handle attribute "ItemPath"
					String tempAttribItemPath =

					reader.getAttributeValue(null,"ItemPath");

					if (tempAttribItemPath!=null) {
						String content = tempAttribItemPath;

						object.setItemPath(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(tempAttribItemPath));

					} else {

					}
					handledAttributes.add("ItemPath");

					// handle attribute "ItemName"
					String tempAttribItemName =

					reader.getAttributeValue(null,"ItemName");

					if (tempAttribItemName!=null) {
						String content = tempAttribItemName;

						object.setItemName(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(tempAttribItemName));

					} else {

					}
					handledAttributes.add("ItemName");

					// handle attribute "ContinuationPoint"
					String tempAttribContinuationPoint =

					reader.getAttributeValue(null,"ContinuationPoint");

					if (tempAttribContinuationPoint!=null) {
						String content = tempAttribContinuationPoint;

						object.setContinuationPoint(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(tempAttribContinuationPoint));

					} else {

					}
					handledAttributes.add("ContinuationPoint");

					// handle attribute "MaxElementsReturned"
					String tempAttribMaxElementsReturned =

					reader.getAttributeValue(null,"MaxElementsReturned");

					if (tempAttribMaxElementsReturned!=null) {
						String content = tempAttribMaxElementsReturned;

						object.setMaxElementsReturned(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(tempAttribMaxElementsReturned));

					} else {

						throw new org.apache.axis2.databinding.ADBException("Required attribute MaxElementsReturned is missing");

					}
					handledAttributes.add("MaxElementsReturned");

					// handle attribute "BrowseFilter"
					String tempAttribBrowseFilter =

							reader.getAttributeValue(null,"BrowseFilter");

					if (tempAttribBrowseFilter!=null) {
						String content = tempAttribBrowseFilter;

						object.setBrowseFilter(
								BrowseFilter.Factory.fromString(reader,tempAttribBrowseFilter));

					} else {

						throw new org.apache.axis2.databinding.ADBException("Required attribute BrowseFilter is missing");

					}
					handledAttributes.add("BrowseFilter");

					// handle attribute "ElementNameFilter"
					String tempAttribElementNameFilter =

					reader.getAttributeValue(null,"ElementNameFilter");

					if (tempAttribElementNameFilter!=null) {
						String content = tempAttribElementNameFilter;

						object.setElementNameFilter(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(tempAttribElementNameFilter));

					} else {

					}
					handledAttributes.add("ElementNameFilter");

					// handle attribute "VendorFilter"
					String tempAttribVendorFilter =

					reader.getAttributeValue(null,"VendorFilter");

					if (tempAttribVendorFilter!=null) {
						String content = tempAttribVendorFilter;

						object.setVendorFilter(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(tempAttribVendorFilter));

					} else {

					}
					handledAttributes.add("VendorFilter");

					// handle attribute "ReturnAllProperties"
					String tempAttribReturnAllProperties =

					reader.getAttributeValue(null,"ReturnAllProperties");

					if (tempAttribReturnAllProperties!=null) {
						String content = tempAttribReturnAllProperties;

						object.setReturnAllProperties(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(tempAttribReturnAllProperties));

					} else {

						throw new org.apache.axis2.databinding.ADBException("Required attribute ReturnAllProperties is missing");

					}
					handledAttributes.add("ReturnAllProperties");

					// handle attribute "ReturnPropertyValues"
					String tempAttribReturnPropertyValues =

							reader.getAttributeValue(null,"ReturnPropertyValues");

					if (tempAttribReturnPropertyValues!=null) {
						String content = tempAttribReturnPropertyValues;

						object.setReturnPropertyValues(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(tempAttribReturnPropertyValues));

					} else {

						throw new org.apache.axis2.databinding.ADBException("Required attribute ReturnPropertyValues is missing");

					}
					handledAttributes.add("ReturnPropertyValues");

					// handle attribute "ReturnErrorText"
					String tempAttribReturnErrorText =

							reader.getAttributeValue(null,"ReturnErrorText");

					if (tempAttribReturnErrorText!=null) {
						String content = tempAttribReturnErrorText;

						object.setReturnErrorText(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(tempAttribReturnErrorText));

					} else {

						throw new org.apache.axis2.databinding.ADBException("Required attribute ReturnErrorText is missing");

					}
					handledAttributes.add("ReturnErrorText");


					reader.next();

					java.util.ArrayList list1 = new java.util.ArrayList();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName(OPC_NAMESPACE,"PropertyNames").equals(reader.getName())) {



						// Process the array and step past its final element's end.
						list1.add(reader.getElementText());

						//loop until we find a start element that is not part of this array
						boolean loopDone1 = false;
						while(!loopDone1) {
							// Ensure we are at the EndElement
							while (!reader.isEndElement()) {
								reader.next();
							}
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								//two continuous end elements means we are exiting the xml structure
								loopDone1 = true;
							} else {
								if (new javax.xml.namespace.QName(OPC_NAMESPACE,"PropertyNames").equals(reader.getName())) {
									list1.add(reader.getElementText());

								}else{
									loopDone1 = true;
								}
							}
						}
						// call the converter utility  to convert and set the array

						object.setPropertyNames((javax.xml.namespace.QName[])
								org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
										javax.xml.namespace.QName.class,list1));

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}



	public static class WriteRequestItemList
	implements org.apache.axis2.databinding.ADBBean{
		/* This type was generated from the piece of schema that had
			 name = WriteRequestItemList
			 Namespace URI = http://opcfoundation.org/webservices/XMLDA/1.0/
			 Namespace Prefix = ns1
		 */


		private static String generatePrefix(String namespace) {
			if(namespace.equals(OPC_NAMESPACE)) {
				return OPC_PREFIX;
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}



		/**
		 * field for Items
		 * This was an Array!
		 */


		protected ItemValue[] localItems ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localItemsTracker = false ;


		/**
		 * Auto generated getter method
		 * @return ItemValue[]
		 */
		public  ItemValue[] getItems() {
			return localItems;
		}






		/**
		 * validate the array for Items
		 */
		protected void validateItems(ItemValue[] param) {

		}


		/**
		 * Auto generated setter method
		 * @param param Items
		 */
		public void setItems(ItemValue[] param) {

			validateItems(param);


			if (param != null) {
				//update the setting tracker
				localItemsTracker = true;
			} else {
				localItemsTracker = false;

			}

			this.localItems=param;
		}



		/**
		 * Auto generated add method for the array for convenience
		 * @param param ItemValue
		 */
		public void addItems(ItemValue param) {
			if (localItems == null) {
				localItems = new ItemValue[]{};
			}


			//update the setting tracker
			localItemsTracker = true;


			java.util.List list =
					org.apache.axis2.databinding.utils.ConverterUtil.toList(localItems);
			list.add(param);
			this.localItems =
					(ItemValue[])list.toArray(
							new ItemValue[list.size()]);

		}


		/**
		 * field for ItemPath
		 * This was an Attribute!
		 */


		protected String localItemPath ;


		/**
		 * Auto generated getter method
		 * @return String
		 */
		public  String getItemPath() {
			return localItemPath;
		}



		/**
		 * Auto generated setter method
		 * @param param ItemPath
		 */
		public void setItemPath(String param) {

			this.localItemPath=param;


		}


		/**
		 * isReaderMTOMAware
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
			boolean isReaderMTOMAware = false;

			try{
				isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}catch(java.lang.IllegalArgumentException e) {
				isReaderMTOMAware = false;
			}
			return isReaderMTOMAware;
		}


		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,parentQName) {

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
					WriteRequestItemList.this.serialize(parentQName,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
					parentQName,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory,
				org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory,
				org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			String prefix = null;
			String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.GenericFactory.getNamespaceURI();

			if ((namespace != null) && (namespace.trim().length() > 0)) {
				String writerPrefix = xmlWriter.getPrefix(namespace);
				if (writerPrefix != null) {
					xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
				} else {
					if (prefix == null) {
						prefix = generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
					xmlWriter.writeNamespace(prefix, namespace);
					xmlWriter.setPrefix(prefix, namespace);
				}
			} else {
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if (serializeType) {


				String namespacePrefix = registerPrefix(xmlWriter,OPC_NAMESPACE);
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":WriteRequestItemList",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"WriteRequestItemList",
							xmlWriter);
				}


			}

			if (localItemPath != null) {

				writeAttribute("",
						"ItemPath",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localItemPath), xmlWriter);


			}
			if (localItemsTracker) {
				if (localItems!=null) {
					for (int i = 0;i < localItems.length;i++) {
						if (localItems[i] != null) {
							localItems[i].serialize(new javax.xml.namespace.QName(OPC_NAMESPACE,"Items"),
									factory,xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException("Items cannot be null!!");

				}
			}
			xmlWriter.writeEndElement();


		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(String prefix,String namespace,String attName,
				String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(String namespace,String attName,
				String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals(""))
			{
				xmlWriter.writeAttribute(attName,attValue);
			}
			else
			{
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(String namespace, String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			String attributeNamespace = qname.GenericFactory.getNamespaceURI();
			String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			String namespaceURI = qname.GenericFactory.getNamespaceURI();
			if (namespaceURI != null) {
				String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				StringBuffer stringToWrite = new StringBuffer();
				String namespaceURI = null;
				String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].GenericFactory.getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
			String prefix = xmlWriter.getPrefix(namespace);

			if (prefix == null) {
				prefix = generatePrefix(namespace);

				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}

			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localItemsTracker) {
				if (localItems!=null) {
					for (int i = 0;i < localItems.length;i++) {

						if (localItems[i] != null) {
							elementList.add(new javax.xml.namespace.QName(OPC_NAMESPACE,
									"Items"));
							elementList.add(localItems[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException("Items cannot be null!!");

				}

			}
			attribList.add(
					new javax.xml.namespace.QName("","ItemPath"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localItemPath));


			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *			 If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *			 If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static WriteRequestItemList parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				WriteRequestItemList object =
						new WriteRequestItemList();

				int event;
				String nillableValue = null;
				String prefix ="";
				String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null) {
						String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null) {
							String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"WriteRequestItemList".equals(type)) {
								//find namespace for the prefix
								String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (WriteRequestItemList)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();



					// handle attribute "ItemPath"
					String tempAttribItemPath =

							reader.getAttributeValue(null,"ItemPath");

					if (tempAttribItemPath!=null) {
						String content = tempAttribItemPath;

						object.setItemPath(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(tempAttribItemPath));

					} else {

					}
					handledAttributes.add("ItemPath");


					reader.next();

					java.util.ArrayList list1 = new java.util.ArrayList();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName(OPC_NAMESPACE,"Items").equals(reader.getName())) {



						// Process the array and step past its final element's end.
						list1.add(ItemValue.Factory.parse(reader));

						//loop until we find a start element that is not part of this array
						boolean loopDone1 = false;
						while(!loopDone1) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								//two continuous end elements means we are exiting the xml structure
								loopDone1 = true;
							} else {
								if (new javax.xml.namespace.QName(OPC_NAMESPACE,"Items").equals(reader.getName())) {
									list1.add(ItemValue.Factory.parse(reader));

								}else{
									loopDone1 = true;
								}
							}
						}
						// call the converter utility  to convert and set the array

						object.setItems((ItemValue[])
								org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
										ItemValue.class,
										list1));

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}

	public static class ReplyItemList
	implements org.apache.axis2.databinding.ADBBean{
		/* This type was generated from the piece of schema that had
			 name = ReplyItemList
			 Namespace URI = http://opcfoundation.org/webservices/XMLDA/1.0/
			 Namespace Prefix = ns1
		 */


		private static String generatePrefix(String namespace) {
			if(namespace.equals(OPC_NAMESPACE)) {
				return OPC_PREFIX;
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}



		/**
		 * field for Items
		 * This was an Array!
		 */


		protected ItemValue[] localItems ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localItemsTracker = false ;


		/**
		 * Auto generated getter method
		 * @return ItemValue[]
		 */
		public  ItemValue[] getItems() {
			return localItems;
		}






		/**
		 * validate the array for Items
		 */
		protected void validateItems(ItemValue[] param) {

		}


		/**
		 * Auto generated setter method
		 * @param param Items
		 */
		public void setItems(ItemValue[] param) {

			validateItems(param);


			if (param != null) {
				//update the setting tracker
				localItemsTracker = true;
			} else {
				localItemsTracker = false;

			}

			this.localItems=param;
		}



		/**
		 * Auto generated add method for the array for convenience
		 * @param param ItemValue
		 */
		public void addItems(ItemValue param) {
			if (localItems == null) {
				localItems = new ItemValue[]{};
			}


			//update the setting tracker
			localItemsTracker = true;


			java.util.List list =
					org.apache.axis2.databinding.utils.ConverterUtil.toList(localItems);
			list.add(param);
			this.localItems =
					(ItemValue[])list.toArray(
							new ItemValue[list.size()]);

		}


		/**
		 * field for Reserved
		 * This was an Attribute!
		 */


		protected String localReserved ;


		/**
		 * Auto generated getter method
		 * @return String
		 */
		public  String getReserved() {
			return localReserved;
		}



		/**
		 * Auto generated setter method
		 * @param param Reserved
		 */
		public void setReserved(String param) {

			this.localReserved=param;


		}


		/**
		 * isReaderMTOMAware
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
			boolean isReaderMTOMAware = false;

			try{
				isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}catch(java.lang.IllegalArgumentException e) {
				isReaderMTOMAware = false;
			}
			return isReaderMTOMAware;
		}


		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,parentQName) {

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
					ReplyItemList.this.serialize(parentQName,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
					parentQName,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory,
				org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory,
				org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			String prefix = null;
			String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.GenericFactory.getNamespaceURI();

			if ((namespace != null) && (namespace.trim().length() > 0)) {
				String writerPrefix = xmlWriter.getPrefix(namespace);
				if (writerPrefix != null) {
					xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
				} else {
					if (prefix == null) {
						prefix = generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
					xmlWriter.writeNamespace(prefix, namespace);
					xmlWriter.setPrefix(prefix, namespace);
				}
			} else {
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if (serializeType) {


				String namespacePrefix = registerPrefix(xmlWriter,OPC_NAMESPACE);
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":ReplyItemList",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"ReplyItemList",
							xmlWriter);
				}


			}

			if (localReserved != null) {

				writeAttribute("",
						"Reserved",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReserved), xmlWriter);


			}
			if (localItemsTracker) {
				if (localItems!=null) {
					for (int i = 0;i < localItems.length;i++) {
						if (localItems[i] != null) {
							localItems[i].serialize(new javax.xml.namespace.QName(OPC_NAMESPACE,"Items"),
									factory,xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException("Items cannot be null!!");

				}
			}
			xmlWriter.writeEndElement();


		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(String prefix,String namespace,String attName,
				String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(String namespace,String attName,
				String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals(""))
			{
				xmlWriter.writeAttribute(attName,attValue);
			}
			else
			{
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(String namespace, String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			String attributeNamespace = qname.GenericFactory.getNamespaceURI();
			String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			String namespaceURI = qname.GenericFactory.getNamespaceURI();
			if (namespaceURI != null) {
				String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				StringBuffer stringToWrite = new StringBuffer();
				String namespaceURI = null;
				String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].GenericFactory.getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
			String prefix = xmlWriter.getPrefix(namespace);

			if (prefix == null) {
				prefix = generatePrefix(namespace);

				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}

			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localItemsTracker) {
				if (localItems!=null) {
					for (int i = 0;i < localItems.length;i++) {

						if (localItems[i] != null) {
							elementList.add(new javax.xml.namespace.QName(OPC_NAMESPACE,
									"Items"));
							elementList.add(localItems[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException("Items cannot be null!!");

				}

			}
			attribList.add(
					new javax.xml.namespace.QName("","Reserved"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReserved));


			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *			 If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *			 If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static ReplyItemList parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				ReplyItemList object =
						new ReplyItemList();

				int event;
				String nillableValue = null;
				String prefix ="";
				String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null) {
						String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null) {
							String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"ReplyItemList".equals(type)) {
								//find namespace for the prefix
								String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (ReplyItemList)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();



					// handle attribute "Reserved"
					String tempAttribReserved =

							reader.getAttributeValue(null,"Reserved");

					if (tempAttribReserved!=null) {
						String content = tempAttribReserved;

						object.setReserved(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(tempAttribReserved));

					} else {

					}
					handledAttributes.add("Reserved");


					reader.next();

					java.util.ArrayList list1 = new java.util.ArrayList();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName(OPC_NAMESPACE,"Items").equals(reader.getName())) {



						// Process the array and step past its final element's end.
						ItemValue myvalzzz = ItemValue.Factory.parse(reader);
						list1.add(myvalzzz);

						//loop until we find a start element that is not part of this array
						boolean loopDone1 = false;
						while(!loopDone1) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								//two continuous end elements means we are exiting the xml structure
								loopDone1 = true;
							} else {
								if (new javax.xml.namespace.QName(OPC_NAMESPACE,"Items").equals(reader.getName())) {
									list1.add(ItemValue.Factory.parse(reader));

								}else{
									loopDone1 = true;
								}
							}
						}
						// call the converter utility  to convert and set the array

						object.setItems((ItemValue[])
								org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
										ItemValue.class,
										list1));

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}
	


	public static class ReadResponse
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				OPC_NAMESPACE,
				"ReadResponse",
				OPC_PREFIX);



		private static String generatePrefix(String namespace) {
			if(namespace.equals(OPC_NAMESPACE)) {
				return OPC_PREFIX;
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}



		/**
		 * field for ReadResult
		 */


		protected ReplyBase localReadResult ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localReadResultTracker = false ;


		/**
		 * Auto generated getter method
		 * @return ReplyBase
		 */
		public  ReplyBase getReadResult() {
			return localReadResult;
		}



		/**
		 * Auto generated setter method
		 * @param param ReadResult
		 */
		public void setReadResult(ReplyBase param) {

			if (param != null) {
				//update the setting tracker
				localReadResultTracker = true;
			} else {
				localReadResultTracker = false;

			}

			this.localReadResult=param;


		}


		/**
		 * field for RItemList
		 */


		protected ReplyItemList localRItemList ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localRItemListTracker = false ;


		/**
		 * Auto generated getter method
		 * @return ReplyItemList
		 */
		public  ReplyItemList getRItemList() {
			return localRItemList;
		}



		/**
		 * Auto generated setter method
		 * @param param RItemList
		 */
		public void setRItemList(ReplyItemList param) {

			if (param != null) {
				//update the setting tracker
				localRItemListTracker = true;
			} else {
				localRItemListTracker = false;

			}

			this.localRItemList=param;


		}


		/**
		 * field for Errors
		 * This was an Array!
		 */


		protected OPCError[] localErrors ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localErrorsTracker = false ;


		/**
		 * Auto generated getter method
		 * @return OPCError[]
		 */
		public  OPCError[] getErrors() {
			return localErrors;
		}






		/**
		 * validate the array for Errors
		 */
		protected void validateErrors(OPCError[] param) {

		}


		/**
		 * Auto generated setter method
		 * @param param Errors
		 */
		public void setErrors(OPCError[] param) {

			validateErrors(param);


			if (param != null) {
				//update the setting tracker
				localErrorsTracker = true;
			} else {
				localErrorsTracker = false;

			}

			this.localErrors=param;
		}



		/**
		 * Auto generated add method for the array for convenience
		 * @param param OPCError
		 */
		public void addErrors(OPCError param) {
			if (localErrors == null) {
				localErrors = new OPCError[]{};
			}


			//update the setting tracker
			localErrorsTracker = true;


			java.util.List list =
					org.apache.axis2.databinding.utils.ConverterUtil.toList(localErrors);
			list.add(param);
			this.localErrors =
					(OPCError[])list.toArray(
							new OPCError[list.size()]);

		}


		/**
		 * isReaderMTOMAware
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
			boolean isReaderMTOMAware = false;

			try{
				isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}catch(java.lang.IllegalArgumentException e) {
				isReaderMTOMAware = false;
			}
			return isReaderMTOMAware;
		}


		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME) {

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
					ReadResponse.this.serialize(MY_QNAME,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
					MY_QNAME,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory,
				org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory,
				org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			String prefix = null;
			String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.GenericFactory.getNamespaceURI();

			if ((namespace != null) && (namespace.trim().length() > 0)) {
				String writerPrefix = xmlWriter.getPrefix(namespace);
				if (writerPrefix != null) {
					xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
				} else {
					if (prefix == null) {
						prefix = generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
					xmlWriter.writeNamespace(prefix, namespace);
					xmlWriter.setPrefix(prefix, namespace);
				}
			} else {
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if (serializeType) {


				String namespacePrefix = registerPrefix(xmlWriter,OPC_NAMESPACE);
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":ReadResponse",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"ReadResponse",
							xmlWriter);
				}


			}
			if (localReadResultTracker) {
				if (localReadResult==null) {
					throw new org.apache.axis2.databinding.ADBException("ReadResult cannot be null!!");
				}
				localReadResult.serialize(new javax.xml.namespace.QName(OPC_NAMESPACE,"ReadResult"),
						factory,xmlWriter);
			} if (localRItemListTracker) {
				if (localRItemList==null) {
					throw new org.apache.axis2.databinding.ADBException("RItemList cannot be null!!");
				}
				localRItemList.serialize(new javax.xml.namespace.QName(OPC_NAMESPACE,"RItemList"),
						factory,xmlWriter);
			} if (localErrorsTracker) {
				if (localErrors!=null) {
					for (int i = 0;i < localErrors.length;i++) {
						if (localErrors[i] != null) {
							localErrors[i].serialize(new javax.xml.namespace.QName(OPC_NAMESPACE,"Errors"),
									factory,xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException("Errors cannot be null!!");

				}
			}
			xmlWriter.writeEndElement();


		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(String prefix,String namespace,String attName,
				String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(String namespace,String attName,
				String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals(""))
			{
				xmlWriter.writeAttribute(attName,attValue);
			}
			else
			{
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(String namespace, String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			String attributeNamespace = qname.GenericFactory.getNamespaceURI();
			String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			String namespaceURI = qname.GenericFactory.getNamespaceURI();
			if (namespaceURI != null) {
				String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				StringBuffer stringToWrite = new StringBuffer();
				String namespaceURI = null;
				String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].GenericFactory.getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
			String prefix = xmlWriter.getPrefix(namespace);

			if (prefix == null) {
				prefix = generatePrefix(namespace);

				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}

			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localReadResultTracker) {
				elementList.add(new javax.xml.namespace.QName(OPC_NAMESPACE,
						"ReadResult"));


				if (localReadResult==null) {
					throw new org.apache.axis2.databinding.ADBException("ReadResult cannot be null!!");
				}
				elementList.add(localReadResult);
			} if (localRItemListTracker) {
				elementList.add(new javax.xml.namespace.QName(OPC_NAMESPACE,
						"RItemList"));


				if (localRItemList==null) {
					throw new org.apache.axis2.databinding.ADBException("RItemList cannot be null!!");
				}
				elementList.add(localRItemList);
			} if (localErrorsTracker) {
				if (localErrors!=null) {
					for (int i = 0;i < localErrors.length;i++) {

						if (localErrors[i] != null) {
							elementList.add(new javax.xml.namespace.QName(OPC_NAMESPACE,
									"Errors"));
							elementList.add(localErrors[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException("Errors cannot be null!!");

				}

			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *			 If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *			 If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static ReadResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				ReadResponse object =
						new ReadResponse();

				int event;
				String nillableValue = null;
				String prefix ="";
				String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null) {
						String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null) {
							String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"ReadResponse".equals(type)) {
								//find namespace for the prefix
								String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (ReadResponse)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();

					java.util.ArrayList list3 = new java.util.ArrayList();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName(OPC_NAMESPACE,"ReadResult").equals(reader.getName())) {

						object.setReadResult(ReplyBase.Factory.parse(reader));

						reader.next();

					}  // End of if for expected property start element

					else {

					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName(OPC_NAMESPACE,"RItemList").equals(reader.getName())) {

						object.setRItemList(ReplyItemList.Factory.parse(reader));

						reader.next();

					}  // End of if for expected property start element

					else {

					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName(OPC_NAMESPACE,"Errors").equals(reader.getName())) {



						// Process the array and step past its final element's end.
						list3.add(OPCError.Factory.parse(reader));

						//loop until we find a start element that is not part of this array
						boolean loopDone3 = false;
						while(!loopDone3) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								//two continuous end elements means we are exiting the xml structure
								loopDone3 = true;
							} else {
								if (new javax.xml.namespace.QName(OPC_NAMESPACE,"Errors").equals(reader.getName())) {
									list3.add(OPCError.Factory.parse(reader));

								}else{
									loopDone3 = true;
								}
							}
						}
						// call the converter utility  to convert and set the array

						object.setErrors((OPCError[])
								org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
										OPCError.class,
										list3));

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}





	public static class BrowseElement
	implements org.apache.axis2.databinding.ADBBean{
		/* This type was generated from the piece of schema that had
			 name = BrowseElement
			 Namespace URI = http://opcfoundation.org/webservices/XMLDA/1.0/
			 Namespace Prefix = ns1
		 */


		private static String generatePrefix(String namespace) {
			if(namespace.equals(OPC_NAMESPACE)) {
				return OPC_PREFIX;
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}



		/**
		 * field for Properties
		 * This was an Array!
		 */


		protected ItemProperty[] localProperties ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localPropertiesTracker = false ;


		/**
		 * Auto generated getter method
		 * @return ItemProperty[]
		 */
		public  ItemProperty[] getProperties() {
			return localProperties;
		}






		/**
		 * validate the array for Properties
		 */
		protected void validateProperties(ItemProperty[] param) {

		}


		/**
		 * Auto generated setter method
		 * @param param Properties
		 */
		public void setProperties(ItemProperty[] param) {

			validateProperties(param);


			if (param != null) {
				//update the setting tracker
				localPropertiesTracker = true;
			} else {
				localPropertiesTracker = false;

			}

			this.localProperties=param;
		}



		/**
		 * Auto generated add method for the array for convenience
		 * @param param ItemProperty
		 */
		public void addProperties(ItemProperty param) {
			if (localProperties == null) {
				localProperties = new ItemProperty[]{};
			}


			//update the setting tracker
			localPropertiesTracker = true;


			java.util.List list =
					org.apache.axis2.databinding.utils.ConverterUtil.toList(localProperties);
			list.add(param);
			this.localProperties =
					(ItemProperty[])list.toArray(
							new ItemProperty[list.size()]);

		}


		/**
		 * field for Name
		 * This was an Attribute!
		 */


		protected String localName ;


		/**
		 * Auto generated getter method
		 * @return String
		 */
		public  String getName() {
			return localName;
		}



		/**
		 * Auto generated setter method
		 * @param param Name
		 */
		public void setName(String param) {

			this.localName=param;


		}


		/**
		 * field for ItemPath
		 * This was an Attribute!
		 */


		protected String localItemPath ;


		/**
		 * Auto generated getter method
		 * @return String
		 */
		public  String getItemPath() {
			return localItemPath;
		}



		/**
		 * Auto generated setter method
		 * @param param ItemPath
		 */
		public void setItemPath(String param) {

			this.localItemPath=param;


		}


		/**
		 * field for ItemName
		 * This was an Attribute!
		 */


		protected String localItemName ;


		/**
		 * Auto generated getter method
		 * @return String
		 */
		public  String getItemName() {
			return localItemName;
		}



		/**
		 * Auto generated setter method
		 * @param param ItemName
		 */
		public void setItemName(String param) {

			this.localItemName=param;


		}


		/**
		 * field for IsItem
		 * This was an Attribute!
		 */


		protected boolean localIsItem ;


		/**
		 * Auto generated getter method
		 * @return boolean
		 */
		public  boolean getIsItem() {
			return localIsItem;
		}



		/**
		 * Auto generated setter method
		 * @param param IsItem
		 */
		public void setIsItem(boolean param) {

			this.localIsItem=param;


		}


		/**
		 * field for HasChildren
		 * This was an Attribute!
		 */


		protected boolean localHasChildren ;


		/**
		 * Auto generated getter method
		 * @return boolean
		 */
		public  boolean getHasChildren() {
			return localHasChildren;
		}



		/**
		 * Auto generated setter method
		 * @param param HasChildren
		 */
		public void setHasChildren(boolean param) {

			this.localHasChildren=param;


		}


		/**
		 * isReaderMTOMAware
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
			boolean isReaderMTOMAware = false;

			try{
				isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}catch(java.lang.IllegalArgumentException e) {
				isReaderMTOMAware = false;
			}
			return isReaderMTOMAware;
		}


		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,parentQName) {

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
					BrowseElement.this.serialize(parentQName,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
					parentQName,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory,
				org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory,
				org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			String prefix = null;
			String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.GenericFactory.getNamespaceURI();

			if ((namespace != null) && (namespace.trim().length() > 0)) {
				String writerPrefix = xmlWriter.getPrefix(namespace);
				if (writerPrefix != null) {
					xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
				} else {
					if (prefix == null) {
						prefix = generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
					xmlWriter.writeNamespace(prefix, namespace);
					xmlWriter.setPrefix(prefix, namespace);
				}
			} else {
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if (serializeType) {


				String namespacePrefix = registerPrefix(xmlWriter,OPC_NAMESPACE);
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":BrowseElement",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"BrowseElement",
							xmlWriter);
				}


			}

			if (localName != null) {

				writeAttribute("",
						"Name",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localName), xmlWriter);


			}

			if (localItemPath != null) {

				writeAttribute("",
						"ItemPath",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localItemPath), xmlWriter);


			}

			if (localItemName != null) {

				writeAttribute("",
						"ItemName",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localItemName), xmlWriter);


			}

			if (true) {

				writeAttribute("",
						"IsItem",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localIsItem), xmlWriter);


			}

			else {
				throw new org.apache.axis2.databinding.ADBException("required attribute localIsItem is null");
			}

			if (true) {

				writeAttribute("",
						"HasChildren",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localHasChildren), xmlWriter);


			}

			else {
				throw new org.apache.axis2.databinding.ADBException("required attribute localHasChildren is null");
			}
			if (localPropertiesTracker) {
				if (localProperties!=null) {
					for (int i = 0;i < localProperties.length;i++) {
						if (localProperties[i] != null) {
							localProperties[i].serialize(new javax.xml.namespace.QName(OPC_NAMESPACE,"Properties"),
									factory,xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException("Properties cannot be null!!");

				}
			}
			xmlWriter.writeEndElement();


		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(String prefix,String namespace,String attName,
				String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(String namespace,String attName,
				String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals(""))
			{
				xmlWriter.writeAttribute(attName,attValue);
			}
			else
			{
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(String namespace, String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			String attributeNamespace = qname.GenericFactory.getNamespaceURI();
			String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			String namespaceURI = qname.GenericFactory.getNamespaceURI();
			if (namespaceURI != null) {
				String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				StringBuffer stringToWrite = new StringBuffer();
				String namespaceURI = null;
				String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].GenericFactory.getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
			String prefix = xmlWriter.getPrefix(namespace);

			if (prefix == null) {
				prefix = generatePrefix(namespace);

				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}

			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localPropertiesTracker) {
				if (localProperties!=null) {
					for (int i = 0;i < localProperties.length;i++) {

						if (localProperties[i] != null) {
							elementList.add(new javax.xml.namespace.QName(OPC_NAMESPACE,
									"Properties"));
							elementList.add(localProperties[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException("Properties cannot be null!!");

				}

			}
			attribList.add(
					new javax.xml.namespace.QName("","Name"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localName));

			attribList.add(
					new javax.xml.namespace.QName("","ItemPath"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localItemPath));

			attribList.add(
					new javax.xml.namespace.QName("","ItemName"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localItemName));

			attribList.add(
					new javax.xml.namespace.QName("","IsItem"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localIsItem));

			attribList.add(
					new javax.xml.namespace.QName("","HasChildren"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localHasChildren));


			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *			 If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *			 If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static BrowseElement parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				BrowseElement object =
						new BrowseElement();

				int event;
				String nillableValue = null;
				String prefix ="";
				String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null) {
						String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null) {
							String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"BrowseElement".equals(type)) {
								//find namespace for the prefix
								String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (BrowseElement)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();



					// handle attribute "Name"
					String tempAttribName =

							reader.getAttributeValue(null,"Name");

					if (tempAttribName!=null) {
						String content = tempAttribName;

						object.setName(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(tempAttribName));

					} else {

					}
					handledAttributes.add("Name");

					// handle attribute "ItemPath"
					String tempAttribItemPath =

					reader.getAttributeValue(null,"ItemPath");

					if (tempAttribItemPath!=null) {
						String content = tempAttribItemPath;

						object.setItemPath(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(tempAttribItemPath));

					} else {

					}
					handledAttributes.add("ItemPath");

					// handle attribute "ItemName"
					String tempAttribItemName =

					reader.getAttributeValue(null,"ItemName");

					if (tempAttribItemName!=null) {
						String content = tempAttribItemName;

						object.setItemName(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(tempAttribItemName));

					} else {

					}
					handledAttributes.add("ItemName");

					// handle attribute "IsItem"
					String tempAttribIsItem =

					reader.getAttributeValue(null,"IsItem");

					if (tempAttribIsItem!=null) {
						String content = tempAttribIsItem;

						object.setIsItem(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(tempAttribIsItem));

					} else {

						throw new org.apache.axis2.databinding.ADBException("Required attribute IsItem is missing");

					}
					handledAttributes.add("IsItem");

					// handle attribute "HasChildren"
					String tempAttribHasChildren =

					reader.getAttributeValue(null,"HasChildren");

					if (tempAttribHasChildren!=null) {
						String content = tempAttribHasChildren;

						object.setHasChildren(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(tempAttribHasChildren));

					} else {

						throw new org.apache.axis2.databinding.ADBException("Required attribute HasChildren is missing");

					}
					handledAttributes.add("HasChildren");


					reader.next();

					java.util.ArrayList list1 = new java.util.ArrayList();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName(OPC_NAMESPACE,"Properties").equals(reader.getName())) {



						// Process the array and step past its final element's end.
						list1.add(ItemProperty.Factory.parse(reader));

						//loop until we find a start element that is not part of this array
						boolean loopDone1 = false;
						while(!loopDone1) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								//two continuous end elements means we are exiting the xml structure
								loopDone1 = true;
							} else {
								if (new javax.xml.namespace.QName(OPC_NAMESPACE,"Properties").equals(reader.getName())) {
									list1.add(ItemProperty.Factory.parse(reader));

								}else{
									loopDone1 = true;
								}
							}
						}
						// call the converter utility  to convert and set the array

						object.setProperties((ItemProperty[])
								org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
										ItemProperty.class,
										list1));

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class ReadRequestItem
	implements org.apache.axis2.databinding.ADBBean{
		/* This type was generated from the piece of schema that had
			 name = ReadRequestItem
			 Namespace URI = http://opcfoundation.org/webservices/XMLDA/1.0/
			 Namespace Prefix = ns1
		 */


		private static String generatePrefix(String namespace) {
			if(namespace.equals(OPC_NAMESPACE)) {
				return OPC_PREFIX;
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}



		/**
		 * field for ItemPath
		 * This was an Attribute!
		 */


		protected String localItemPath ;


		/**
		 * Auto generated getter method
		 * @return String
		 */
		public  String getItemPath() {
			return localItemPath;
		}



		/**
		 * Auto generated setter method
		 * @param param ItemPath
		 */
		public void setItemPath(String param) {

			this.localItemPath=param;


		}


		/**
		 * field for ReqType
		 * This was an Attribute!
		 */


		protected javax.xml.namespace.QName localReqType ;


		/**
		 * Auto generated getter method
		 * @return javax.xml.namespace.QName
		 */
		public  javax.xml.namespace.QName getReqType() {
			return localReqType;
		}



		/**
		 * Auto generated setter method
		 * @param param ReqType
		 */
		public void setReqType(javax.xml.namespace.QName param) {

			this.localReqType=param;


		}


		/**
		 * field for ItemName
		 * This was an Attribute!
		 */


		protected String localItemName ;


		/**
		 * Auto generated getter method
		 * @return String
		 */
		public  String getItemName() {
			return localItemName;
		}



		/**
		 * Auto generated setter method
		 * @param param ItemName
		 */
		public void setItemName(String param) {

			this.localItemName=param;


		}


		/**
		 * field for ClientItemHandle
		 * This was an Attribute!
		 */


		protected String localClientItemHandle ;


		/**
		 * Auto generated getter method
		 * @return String
		 */
		public  String getClientItemHandle() {
			return localClientItemHandle;
		}



		/**
		 * Auto generated setter method
		 * @param param ClientItemHandle
		 */
		public void setClientItemHandle(String param) {

			this.localClientItemHandle=param;


		}


		/**
		 * field for MaxAge
		 * This was an Attribute!
		 */


		protected int localMaxAge ;


		/**
		 * Auto generated getter method
		 * @return int
		 */
		public  int getMaxAge() {
			return localMaxAge;
		}



		/**
		 * Auto generated setter method
		 * @param param MaxAge
		 */
		public void setMaxAge(int param) {

			this.localMaxAge=param;


		}


		/**
		 * isReaderMTOMAware
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
			boolean isReaderMTOMAware = false;

			try{
				isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}catch(java.lang.IllegalArgumentException e) {
				isReaderMTOMAware = false;
			}
			return isReaderMTOMAware;
		}


		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,parentQName) {

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
					ReadRequestItem.this.serialize(parentQName,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
					parentQName,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory,
				org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory,
				org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			String prefix = null;
			String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.GenericFactory.getNamespaceURI();

			if ((namespace != null) && (namespace.trim().length() > 0)) {
				String writerPrefix = xmlWriter.getPrefix(namespace);
				if (writerPrefix != null) {
					xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
				} else {
					if (prefix == null) {
						prefix = generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
					xmlWriter.writeNamespace(prefix, namespace);
					xmlWriter.setPrefix(prefix, namespace);
				}
			} else {
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if (serializeType) {


				String namespacePrefix = registerPrefix(xmlWriter,OPC_NAMESPACE);
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":ReadRequestItem",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"ReadRequestItem",
							xmlWriter);
				}


			}

			if (localItemPath != null) {

				writeAttribute("",
						"ItemPath",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localItemPath), xmlWriter);


			}

			if (localReqType != null) {

				writeQNameAttribute("",
						"ReqType",
						localReqType, xmlWriter);


			}

			if (localItemName != null) {

				writeAttribute("",
						"ItemName",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localItemName), xmlWriter);


			}

			if (localClientItemHandle != null) {

				writeAttribute("",
						"ClientItemHandle",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localClientItemHandle), xmlWriter);


			}

			if (localMaxAge!=java.lang.Integer.MIN_VALUE) {

				writeAttribute("",
						"MaxAge",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMaxAge), xmlWriter);


			}

			xmlWriter.writeEndElement();


		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(String prefix,String namespace,String attName,
				String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(String namespace,String attName,
				String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals(""))
			{
				xmlWriter.writeAttribute(attName,attValue);
			}
			else
			{
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(String namespace, String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			String attributeNamespace = qname.GenericFactory.getNamespaceURI();
			String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			String namespaceURI = qname.GenericFactory.getNamespaceURI();
			if (namespaceURI != null) {
				String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				StringBuffer stringToWrite = new StringBuffer();
				String namespaceURI = null;
				String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].GenericFactory.getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
			String prefix = xmlWriter.getPrefix(namespace);

			if (prefix == null) {
				prefix = generatePrefix(namespace);

				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}

			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();


			attribList.add(
					new javax.xml.namespace.QName("","ItemPath"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localItemPath));

			attribList.add(
					new javax.xml.namespace.QName("","ReqType"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReqType));

			attribList.add(
					new javax.xml.namespace.QName("","ItemName"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localItemName));

			attribList.add(
					new javax.xml.namespace.QName("","ClientItemHandle"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localClientItemHandle));

			attribList.add(
					new javax.xml.namespace.QName("","MaxAge"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMaxAge));


			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *			 If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *			 If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static ReadRequestItem parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				ReadRequestItem object =
						new ReadRequestItem();

				int event;
				String nillableValue = null;
				String prefix ="";
				String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null) {
						String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null) {
							String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"ReadRequestItem".equals(type)) {
								//find namespace for the prefix
								String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (ReadRequestItem)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();



					// handle attribute "ItemPath"
					String tempAttribItemPath =

							reader.getAttributeValue(null,"ItemPath");

					if (tempAttribItemPath!=null) {
						String content = tempAttribItemPath;

						object.setItemPath(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(tempAttribItemPath));

					} else {

					}
					handledAttributes.add("ItemPath");

					// handle attribute "ReqType"
					String tempAttribReqType =

					reader.getAttributeValue(null,"ReqType");

					if (tempAttribReqType!=null) {
						String content = tempAttribReqType;

						int index = tempAttribReqType.indexOf(":");
						if(index > -1) {
							prefix = tempAttribReqType.substring(0,index);
						} else {
							// i.e this is in default namesace
							prefix = "";
						}
						namespaceuri = reader.getNamespaceURI(prefix);

						object.setReqType(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToQName(tempAttribReqType,namespaceuri));

					} else {

					}
					handledAttributes.add("ReqType");

					// handle attribute "ItemName"
					String tempAttribItemName =

							reader.getAttributeValue(null,"ItemName");

					if (tempAttribItemName!=null) {
						String content = tempAttribItemName;

						object.setItemName(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(tempAttribItemName));

					} else {

					}
					handledAttributes.add("ItemName");

					// handle attribute "ClientItemHandle"
					String tempAttribClientItemHandle =

					reader.getAttributeValue(null,"ClientItemHandle");

					if (tempAttribClientItemHandle!=null) {
						String content = tempAttribClientItemHandle;

						object.setClientItemHandle(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(tempAttribClientItemHandle));

					} else {

					}
					handledAttributes.add("ClientItemHandle");

					// handle attribute "MaxAge"
					String tempAttribMaxAge =

					reader.getAttributeValue(null,"MaxAge");

					if (tempAttribMaxAge!=null) {
						String content = tempAttribMaxAge;

						object.setMaxAge(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(tempAttribMaxAge));

					} else {

						object.setMaxAge(java.lang.Integer.MIN_VALUE);

					}
					handledAttributes.add("MaxAge");


					reader.next();




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class ServerState
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				OPC_NAMESPACE,
				"serverState",
				OPC_PREFIX);



		private static String generatePrefix(String namespace) {
			if(namespace.equals(OPC_NAMESPACE)) {
				return OPC_PREFIX;
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}



		/**
		 * field for ServerState
		 */


		protected String localServerState ;

		private static java.util.HashMap _table_ = new java.util.HashMap();

		// Constructor

		protected ServerState(String value, boolean isRegisterValue) {
			localServerState = value;
			if (isRegisterValue) {

				_table_.put(localServerState, this);

			}

		}

		public static final String _running =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("running");

		public static final String _failed =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("failed");

		public static final String _noConfig =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("noConfig");

		public static final String _suspended =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("suspended");

		public static final String _test =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("test");

		public static final String _commFault =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("commFault");

		public static final ServerState running =
				new ServerState(_running,true);

		public static final ServerState failed =
				new ServerState(_failed,true);

		public static final ServerState noConfig =
				new ServerState(_noConfig,true);

		public static final ServerState suspended =
				new ServerState(_suspended,true);

		public static final ServerState test =
				new ServerState(_test,true);

		public static final ServerState commFault =
				new ServerState(_commFault,true);


		public String getValue() { return localServerState;}

		public boolean equals(java.lang.Object obj) {return (obj == this);}
		public int hashCode() { return toString().hashCode();}
		public String toString() {

			return localServerState.toString();


		}



		/**
		 * isReaderMTOMAware
		 * @return true if the reader supports MTOM
		 */
		 public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
			 boolean isReaderMTOMAware = false;

			 try{
				 isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			 }catch(java.lang.IllegalArgumentException e) {
				 isReaderMTOMAware = false;
			 }
			 return isReaderMTOMAware;
		 }


		 /**
		  *
		  * @param parentQName
		  * @param factory
		  * @return org.apache.axiom.om.OMElement
		  */
		 public org.apache.axiom.om.OMElement getOMElement (
				 final javax.xml.namespace.QName parentQName,
				 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			 org.apache.axiom.om.OMDataSource dataSource =
					 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME) {

				 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
					 ServerState.this.serialize(MY_QNAME,factory,xmlWriter);
				 }
			 };
			 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
					 MY_QNAME,factory,dataSource);

		 }

		 public void serialize(final javax.xml.namespace.QName parentQName,
				 final org.apache.axiom.om.OMFactory factory,
				 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
						 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			 serialize(parentQName,factory,xmlWriter,false);
		 }

		 public void serialize(final javax.xml.namespace.QName parentQName,
				 final org.apache.axiom.om.OMFactory factory,
				 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
				 boolean serializeType)
						 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{


			 //We can safely assume an element has only one type associated with it

			 String namespace = parentQName.GenericFactory.getNamespaceURI();
			 String localName = parentQName.getLocalPart();

			 if (! namespace.equals("")) {
				 String prefix = xmlWriter.getPrefix(namespace);

				 if (prefix == null) {
					 prefix = generatePrefix(namespace);

					 xmlWriter.writeStartElement(prefix, localName, namespace);
					 xmlWriter.writeNamespace(prefix, namespace);
					 xmlWriter.setPrefix(prefix, namespace);

				 } else {
					 xmlWriter.writeStartElement(namespace, localName);
				 }

			 } else {
				 xmlWriter.writeStartElement(localName);
			 }

			 // add the type details if this is used in a simple type
			 if (serializeType) {
				 String namespacePrefix = registerPrefix(xmlWriter,OPC_NAMESPACE);
				 if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							 namespacePrefix+":serverState",
							 xmlWriter);
				 } else {
					 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							 "serverState",
							 xmlWriter);
				 }
			 }

			 if (localServerState==null) {

				 throw new org.apache.axis2.databinding.ADBException("Value cannot be null !!");

			 }else{

				 xmlWriter.writeCharacters(localServerState);

			 }

			 xmlWriter.writeEndElement();



		 }

		 /**
		  * Util method to write an attribute with the ns prefix
		  */
		 private void writeAttribute(String prefix,String namespace,String attName,
				 String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			 if (xmlWriter.getPrefix(namespace) == null) {
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);

			 }

			 xmlWriter.writeAttribute(namespace,attName,attValue);

		 }

		 /**
		  * Util method to write an attribute without the ns prefix
		  */
		 private void writeAttribute(String namespace,String attName,
				 String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			 if (namespace.equals(""))
			 {
				 xmlWriter.writeAttribute(attName,attValue);
			 }
			 else
			 {
				 registerPrefix(xmlWriter, namespace);
				 xmlWriter.writeAttribute(namespace,attName,attValue);
			 }
		 }


		 /**
		  * Util method to write an attribute without the ns prefix
		  */
		 private void writeQNameAttribute(String namespace, String attName,
				 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			 String attributeNamespace = qname.GenericFactory.getNamespaceURI();
			 String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			 if (attributePrefix == null) {
				 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			 }
			 String attributeValue;
			 if (attributePrefix.trim().length() > 0) {
				 attributeValue = attributePrefix + ":" + qname.getLocalPart();
			 } else {
				 attributeValue = qname.getLocalPart();
			 }

			 if (namespace.equals("")) {
				 xmlWriter.writeAttribute(attName, attributeValue);
			 } else {
				 registerPrefix(xmlWriter, namespace);
				 xmlWriter.writeAttribute(namespace, attName, attributeValue);
			 }
		 }
		 /**
		  *  method to handle Qnames
		  */

		 private void writeQName(javax.xml.namespace.QName qname,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			 String namespaceURI = qname.GenericFactory.getNamespaceURI();
			 if (namespaceURI != null) {
				 String prefix = xmlWriter.getPrefix(namespaceURI);
				 if (prefix == null) {
					 prefix = generatePrefix(namespaceURI);
					 xmlWriter.writeNamespace(prefix, namespaceURI);
					 xmlWriter.setPrefix(prefix,namespaceURI);
				 }

				 if (prefix.trim().length() > 0) {
					 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				 } else {
					 // i.e this is the default namespace
					 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				 }

			 } else {
				 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			 }
		 }

		 private void writeQNames(javax.xml.namespace.QName[] qnames,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			 if (qnames != null) {
				 // we have to store this data until last moment since it is not possible to write any
				 // namespace data after writing the charactor data
				 StringBuffer stringToWrite = new StringBuffer();
				 String namespaceURI = null;
				 String prefix = null;

				 for (int i = 0; i < qnames.length; i++) {
					 if (i > 0) {
						 stringToWrite.append(" ");
					 }
					 namespaceURI = qnames[i].GenericFactory.getNamespaceURI();
					 if (namespaceURI != null) {
						 prefix = xmlWriter.getPrefix(namespaceURI);
						 if ((prefix == null) || (prefix.length() == 0)) {
							 prefix = generatePrefix(namespaceURI);
							 xmlWriter.writeNamespace(prefix, namespaceURI);
							 xmlWriter.setPrefix(prefix,namespaceURI);
						 }

						 if (prefix.trim().length() > 0) {
							 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						 } else {
							 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						 }
					 } else {
						 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					 }
				 }
				 xmlWriter.writeCharacters(stringToWrite.toString());
			 }

		 }


		 /**
		  * Register a namespace prefix
		  */
		 private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
			 String prefix = xmlWriter.getPrefix(namespace);

			 if (prefix == null) {
				 prefix = generatePrefix(namespace);

				 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					 prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				 }

				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }

			 return prefix;
		 }



		 /**
		  * databinding method to get an XML representation of this object
		  *
		  */
		 public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				 throws org.apache.axis2.databinding.ADBException{




			 //We can safely assume an element has only one type associated with it
			 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
					 new java.lang.Object[]{
					 org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
					 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localServerState)
			 },
			 null);

		 }



		 /**
		  *  Factory class that keeps the parse method
		  */
		 public static class Factory{



			 public static ServerState fromValue(String value)
					 throws java.lang.IllegalArgumentException {
				 ServerState enumeration = (ServerState)

						 _table_.get(value);


				 if (enumeration==null) throw new java.lang.IllegalArgumentException();
				 return enumeration;
			 }
			 public static ServerState fromString(String value,String namespaceURI)
					 throws java.lang.IllegalArgumentException {
				 try {

					 return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));


				 } catch (java.lang.Exception e) {
					 throw new java.lang.IllegalArgumentException();
				 }
			 }

			 public static ServerState fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
					 String content) {
				 if (content.indexOf(":") > -1) {
					 String prefix = content.substring(0,content.indexOf(":"));
					 String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
					 return ServerState.Factory.fromString(content,namespaceUri);
				 } else {
					 return ServerState.Factory.fromString(content,"");
				 }
			 }


			 /**
			  * static method to create the object
			  * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			  *			 If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			  * Postcondition: If this object is an element, the reader is positioned at its end element
			  *			 If this object is a complex type, the reader is positioned at the end element of its outer element
			  */
			 public static ServerState parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				 ServerState object = null;
				 // initialize a hash map to keep values
				 java.util.Map attributeMap = new java.util.HashMap();
				 java.util.List extraAttributeList = new java.util.ArrayList();


				 int event;
				 String nillableValue = null;
				 String prefix ="";
				 String namespaceuri ="";
				 try {

					 while (!reader.isStartElement() && !reader.isEndElement())
						 reader.next();




					 // Note all attributes that were handled. Used to differ normal attributes
					 // from anyAttributes.
					 java.util.Vector handledAttributes = new java.util.Vector();



					 while(!reader.isEndElement()) {
						 if (reader.isStartElement()  || reader.hasText()) {

							 String content = reader.getElementText();

							 if (content.indexOf(":") > 0) {
								 // this seems to be a Qname so find the namespace and send
								 prefix = content.substring(0, content.indexOf(":"));
								 namespaceuri = reader.getNamespaceURI(prefix);
								 object = ServerState.Factory.fromString(content,namespaceuri);
							 } else {
								 // this seems to be not a qname send and empty namespace incase of it is
								 // check is done in fromString method
								 object = ServerState.Factory.fromString(content,"");
							 }


						 } else {
							 reader.next();
						 }  
					 }  // end of while loop




				 } catch (javax.xml.stream.XMLStreamException e) {
					 throw new java.lang.Exception(e);
				 }

				 return object;
			 }

		 }//end of factory class



	}

	

	public static class ReplyBase
	implements org.apache.axis2.databinding.ADBBean{
		/* This type was generated from the piece of schema that had
			 name = ReplyBase
			 Namespace URI = http://opcfoundation.org/webservices/XMLDA/1.0/
			 Namespace Prefix = ns1
		 */


		private static String generatePrefix(String namespace) {
			if(namespace.equals(OPC_NAMESPACE)) {
				return OPC_PREFIX;
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}



		/**
		 * field for RcvTime
		 * This was an Attribute!
		 */


		protected java.util.Calendar localRcvTime ;


		/**
		 * Auto generated getter method
		 * @return java.util.Calendar
		 */
		public  java.util.Calendar getRcvTime() {
			return localRcvTime;
		}



		/**
		 * Auto generated setter method
		 * @param param RcvTime
		 */
		public void setRcvTime(java.util.Calendar param) {

			this.localRcvTime=param;


		}


		/**
		 * field for ReplyTime
		 * This was an Attribute!
		 */


		protected java.util.Calendar localReplyTime ;


		/**
		 * Auto generated getter method
		 * @return java.util.Calendar
		 */
		public  java.util.Calendar getReplyTime() {
			return localReplyTime;
		}



		/**
		 * Auto generated setter method
		 * @param param ReplyTime
		 */
		public void setReplyTime(java.util.Calendar param) {

			this.localReplyTime=param;


		}


		/**
		 * field for ClientRequestHandle
		 * This was an Attribute!
		 */


		protected String localClientRequestHandle ;


		/**
		 * Auto generated getter method
		 * @return String
		 */
		public  String getClientRequestHandle() {
			return localClientRequestHandle;
		}



		/**
		 * Auto generated setter method
		 * @param param ClientRequestHandle
		 */
		public void setClientRequestHandle(String param) {

			this.localClientRequestHandle=param;


		}


		/**
		 * field for RevisedLocaleID
		 * This was an Attribute!
		 */


		protected String localRevisedLocaleID ;


		/**
		 * Auto generated getter method
		 * @return String
		 */
		public  String getRevisedLocaleID() {
			return localRevisedLocaleID;
		}



		/**
		 * Auto generated setter method
		 * @param param RevisedLocaleID
		 */
		public void setRevisedLocaleID(String param) {

			this.localRevisedLocaleID=param;


		}


		/**
		 * field for ServerState
		 * This was an Attribute!
		 */


		protected ServerState localServerState ;


		/**
		 * Auto generated getter method
		 * @return ServerState
		 */
		public  ServerState getServerState() {
			return localServerState;
		}



		/**
		 * Auto generated setter method
		 * @param param ServerState
		 */
		public void setServerState(ServerState param) {

			this.localServerState=param;


		}


		/**
		 * isReaderMTOMAware
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
			boolean isReaderMTOMAware = false;

			try{
				isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}catch(java.lang.IllegalArgumentException e) {
				isReaderMTOMAware = false;
			}
			return isReaderMTOMAware;
		}


		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,parentQName) {

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
					ReplyBase.this.serialize(parentQName,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
					parentQName,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory,
				org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory,
				org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			String prefix = null;
			String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.GenericFactory.getNamespaceURI();

			if ((namespace != null) && (namespace.trim().length() > 0)) {
				String writerPrefix = xmlWriter.getPrefix(namespace);
				if (writerPrefix != null) {
					xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
				} else {
					if (prefix == null) {
						prefix = generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
					xmlWriter.writeNamespace(prefix, namespace);
					xmlWriter.setPrefix(prefix, namespace);
				}
			} else {
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if (serializeType) {


				String namespacePrefix = registerPrefix(xmlWriter,OPC_NAMESPACE);
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":ReplyBase",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"ReplyBase",
							xmlWriter);
				}


			}

			if (localRcvTime != null) {

				writeAttribute("",
						"RcvTime",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRcvTime), xmlWriter);


			}

			else {
				throw new org.apache.axis2.databinding.ADBException("required attribute localRcvTime is null");
			}

			if (localReplyTime != null) {

				writeAttribute("",
						"ReplyTime",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReplyTime), xmlWriter);


			}

			else {
				throw new org.apache.axis2.databinding.ADBException("required attribute localReplyTime is null");
			}

			if (localClientRequestHandle != null) {

				writeAttribute("",
						"ClientRequestHandle",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localClientRequestHandle), xmlWriter);


			}

			if (localRevisedLocaleID != null) {

				writeAttribute("",
						"RevisedLocaleID",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRevisedLocaleID), xmlWriter);


			}


			if (localServerState != null) {
				writeAttribute("",
						"ServerState",
						localServerState.toString(), xmlWriter);
			}

			else {
				throw new org.apache.axis2.databinding.ADBException("required attribute localServerState is null");
			}

			xmlWriter.writeEndElement();


		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(String prefix,String namespace,String attName,
				String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(String namespace,String attName,
				String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals(""))
			{
				xmlWriter.writeAttribute(attName,attValue);
			}
			else
			{
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(String namespace, String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			String attributeNamespace = qname.GenericFactory.getNamespaceURI();
			String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			String namespaceURI = qname.GenericFactory.getNamespaceURI();
			if (namespaceURI != null) {
				String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				StringBuffer stringToWrite = new StringBuffer();
				String namespaceURI = null;
				String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].GenericFactory.getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
			String prefix = xmlWriter.getPrefix(namespace);

			if (prefix == null) {
				prefix = generatePrefix(namespace);

				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}

			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();


			attribList.add(
					new javax.xml.namespace.QName("","RcvTime"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRcvTime));

			attribList.add(
					new javax.xml.namespace.QName("","ReplyTime"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReplyTime));

			attribList.add(
					new javax.xml.namespace.QName("","ClientRequestHandle"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localClientRequestHandle));

			attribList.add(
					new javax.xml.namespace.QName("","RevisedLocaleID"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRevisedLocaleID));

			attribList.add(
					new javax.xml.namespace.QName("","ServerState"));

			attribList.add(localServerState.toString());


			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *			 If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *			 If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static ReplyBase parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				ReplyBase object =
						new ReplyBase();

				int event;
				String nillableValue = null;
				String prefix ="";
				String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null) {
						String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null) {
							String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"ReplyBase".equals(type)) {
								//find namespace for the prefix
								String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (ReplyBase)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();



					// handle attribute "RcvTime"
					String tempAttribRcvTime =

							reader.getAttributeValue(null,"RcvTime");

					if (tempAttribRcvTime!=null) {
						String content = tempAttribRcvTime;

						object.setRcvTime(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(tempAttribRcvTime));

					} else {

						throw new org.apache.axis2.databinding.ADBException("Required attribute RcvTime is missing");

					}
					handledAttributes.add("RcvTime");

					// handle attribute "ReplyTime"
					String tempAttribReplyTime =

					reader.getAttributeValue(null,"ReplyTime");

					if (tempAttribReplyTime!=null) {
						String content = tempAttribReplyTime;

						object.setReplyTime(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(tempAttribReplyTime));

					} else {

						throw new org.apache.axis2.databinding.ADBException("Required attribute ReplyTime is missing");

					}
					handledAttributes.add("ReplyTime");

					// handle attribute "ClientRequestHandle"
					String tempAttribClientRequestHandle =

					reader.getAttributeValue(null,"ClientRequestHandle");

					if (tempAttribClientRequestHandle!=null) {
						String content = tempAttribClientRequestHandle;

						object.setClientRequestHandle(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(tempAttribClientRequestHandle));

					} else {

					}
					handledAttributes.add("ClientRequestHandle");

					// handle attribute "RevisedLocaleID"
					String tempAttribRevisedLocaleID =

					reader.getAttributeValue(null,"RevisedLocaleID");

					if (tempAttribRevisedLocaleID!=null) {
						String content = tempAttribRevisedLocaleID;

						object.setRevisedLocaleID(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(tempAttribRevisedLocaleID));

					} else {

					}
					handledAttributes.add("RevisedLocaleID");

					// handle attribute "ServerState"
					String tempAttribServerState =

					reader.getAttributeValue(null,"ServerState");

					if (tempAttribServerState!=null) {
						String content = tempAttribServerState;

						object.setServerState(
								ServerState.Factory.fromString(reader,tempAttribServerState));

					} else {

						throw new org.apache.axis2.databinding.ADBException("Required attribute ServerState is missing");

					}
					handledAttributes.add("ServerState");


					reader.next();




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class OPCError
	implements org.apache.axis2.databinding.ADBBean{
		/* This type was generated from the piece of schema that had
			 name = OPCError
			 Namespace URI = http://opcfoundation.org/webservices/XMLDA/1.0/
			 Namespace Prefix = ns1
		 */


		private static String generatePrefix(String namespace) {
			if(namespace.equals(OPC_NAMESPACE)) {
				return OPC_PREFIX;
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}



		/**
		 * field for Text
		 */


		protected String localText ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localTextTracker = false ;


		/**
		 * Auto generated getter method
		 * @return String
		 */
		public  String getText() {
			return localText;
		}



		/**
		 * Auto generated setter method
		 * @param param Text
		 */
		public void setText(String param) {

			if (param != null) {
				//update the setting tracker
				localTextTracker = true;
			} else {
				localTextTracker = false;

			}

			this.localText=param;


		}


		/**
		 * field for ID
		 * This was an Attribute!
		 */


		protected javax.xml.namespace.QName localID ;


		/**
		 * Auto generated getter method
		 * @return javax.xml.namespace.QName
		 */
		public  javax.xml.namespace.QName getID() {
			return localID;
		}



		/**
		 * Auto generated setter method
		 * @param param ID
		 */
		public void setID(javax.xml.namespace.QName param) {

			this.localID=param;


		}


		/**
		 * isReaderMTOMAware
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
			boolean isReaderMTOMAware = false;

			try{
				isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}catch(java.lang.IllegalArgumentException e) {
				isReaderMTOMAware = false;
			}
			return isReaderMTOMAware;
		}


		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,parentQName) {

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
					OPCError.this.serialize(parentQName,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
					parentQName,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory,
				org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory,
				org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			String prefix = null;
			String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.GenericFactory.getNamespaceURI();

			if ((namespace != null) && (namespace.trim().length() > 0)) {
				String writerPrefix = xmlWriter.getPrefix(namespace);
				if (writerPrefix != null) {
					xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
				} else {
					if (prefix == null) {
						prefix = generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
					xmlWriter.writeNamespace(prefix, namespace);
					xmlWriter.setPrefix(prefix, namespace);
				}
			} else {
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if (serializeType) {


				String namespacePrefix = registerPrefix(xmlWriter,OPC_NAMESPACE);
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":OPCError",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"OPCError",
							xmlWriter);
				}


			}

			if (localID != null) {

				writeQNameAttribute("",
						"ID",
						localID, xmlWriter);


			}
			if (localTextTracker) {
				namespace = OPC_NAMESPACE;
				if (! namespace.equals("")) {
					prefix = xmlWriter.getPrefix(namespace);

					if (prefix == null) {
						prefix = generatePrefix(namespace);

						xmlWriter.writeStartElement(prefix,"Text", namespace);
						xmlWriter.writeNamespace(prefix, namespace);
						xmlWriter.setPrefix(prefix, namespace);

					} else {
						xmlWriter.writeStartElement(namespace,"Text");
					}

				} else {
					xmlWriter.writeStartElement("Text");
				}


				if (localText==null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("Text cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localText);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();


		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(String prefix,String namespace,String attName,
				String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(String namespace,String attName,
				String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals(""))
			{
				xmlWriter.writeAttribute(attName,attValue);
			}
			else
			{
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(String namespace, String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			String attributeNamespace = qname.GenericFactory.getNamespaceURI();
			String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			String namespaceURI = qname.GenericFactory.getNamespaceURI();
			if (namespaceURI != null) {
				String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				StringBuffer stringToWrite = new StringBuffer();
				String namespaceURI = null;
				String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].GenericFactory.getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
			String prefix = xmlWriter.getPrefix(namespace);

			if (prefix == null) {
				prefix = generatePrefix(namespace);

				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}

			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localTextTracker) {
				elementList.add(new javax.xml.namespace.QName(OPC_NAMESPACE,
						"Text"));

				if (localText != null) {
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localText));
				} else {
					throw new org.apache.axis2.databinding.ADBException("Text cannot be null!!");
				}
			}
			attribList.add(
					new javax.xml.namespace.QName("","ID"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localID));


			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *			 If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *			 If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static OPCError parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				OPCError object =
						new OPCError();

				int event;
				String nillableValue = null;
				String prefix ="";
				String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null) {
						String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null) {
							String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"OPCError".equals(type)) {
								//find namespace for the prefix
								String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (OPCError)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();



					// handle attribute "ID"
					String tempAttribID =

							reader.getAttributeValue(null,"ID");

					if (tempAttribID!=null) {
						String content = tempAttribID;

						int index = tempAttribID.indexOf(":");
						if(index > -1) {
							prefix = tempAttribID.substring(0,index);
						} else {
							// i.e this is in default namesace
							prefix = "";
						}
						namespaceuri = reader.getNamespaceURI(prefix);

						object.setID(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToQName(tempAttribID,namespaceuri));

					} else {

					}
					handledAttributes.add("ID");


					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName(OPC_NAMESPACE,"Text").equals(reader.getName())) {

						String content = reader.getElementText();

						object.setText(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}








	
	public static class BrowseFilter
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				OPC_NAMESPACE,
				"browseFilter",
				OPC_PREFIX);



		private static String generatePrefix(String namespace) {
			if(namespace.equals(OPC_NAMESPACE)) {
				return OPC_PREFIX;
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}



		/**
		 * field for BrowseFilter
		 */


		protected String localBrowseFilter ;

		private static java.util.HashMap _table_ = new java.util.HashMap();

		// Constructor

		protected BrowseFilter(String value, boolean isRegisterValue) {
			localBrowseFilter = value;
			if (isRegisterValue) {

				_table_.put(localBrowseFilter, this);

			}

		}

		public static final String _all =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("all");

		public static final String _branch =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("branch");

		public static final String _item =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("item");

		public static final BrowseFilter all =
				new BrowseFilter(_all,true);

		public static final BrowseFilter branch =
				new BrowseFilter(_branch,true);

		public static final BrowseFilter item =
				new BrowseFilter(_item,true);


		public String getValue() { return localBrowseFilter;}

		public boolean equals(java.lang.Object obj) {return (obj == this);}
		public int hashCode() { return toString().hashCode();}
		public String toString() {

			return localBrowseFilter.toString();


		}



		/**
		 * isReaderMTOMAware
		 * @return true if the reader supports MTOM
		 */
		 public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
			 boolean isReaderMTOMAware = false;

			 try{
				 isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			 }catch(java.lang.IllegalArgumentException e) {
				 isReaderMTOMAware = false;
			 }
			 return isReaderMTOMAware;
		 }


		 /**
		  *
		  * @param parentQName
		  * @param factory
		  * @return org.apache.axiom.om.OMElement
		  */
		 public org.apache.axiom.om.OMElement getOMElement (
				 final javax.xml.namespace.QName parentQName,
				 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			 org.apache.axiom.om.OMDataSource dataSource =
					 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME) {

				 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
					 BrowseFilter.this.serialize(MY_QNAME,factory,xmlWriter);
				 }
			 };
			 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
					 MY_QNAME,factory,dataSource);

		 }

		 public void serialize(final javax.xml.namespace.QName parentQName,
				 final org.apache.axiom.om.OMFactory factory,
				 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
						 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			 serialize(parentQName,factory,xmlWriter,false);
		 }

		 public void serialize(final javax.xml.namespace.QName parentQName,
				 final org.apache.axiom.om.OMFactory factory,
				 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
				 boolean serializeType)
						 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{


			 //We can safely assume an element has only one type associated with it

			 String namespace = parentQName.GenericFactory.getNamespaceURI();
			 String localName = parentQName.getLocalPart();

			 if (! namespace.equals("")) {
				 String prefix = xmlWriter.getPrefix(namespace);

				 if (prefix == null) {
					 prefix = generatePrefix(namespace);

					 xmlWriter.writeStartElement(prefix, localName, namespace);
					 xmlWriter.writeNamespace(prefix, namespace);
					 xmlWriter.setPrefix(prefix, namespace);

				 } else {
					 xmlWriter.writeStartElement(namespace, localName);
				 }

			 } else {
				 xmlWriter.writeStartElement(localName);
			 }

			 // add the type details if this is used in a simple type
			 if (serializeType) {
				 String namespacePrefix = registerPrefix(xmlWriter,OPC_NAMESPACE);
				 if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							 namespacePrefix+":browseFilter",
							 xmlWriter);
				 } else {
					 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							 "browseFilter",
							 xmlWriter);
				 }
			 }

			 if (localBrowseFilter==null) {

				 throw new org.apache.axis2.databinding.ADBException("Value cannot be null !!");

			 }else{

				 xmlWriter.writeCharacters(localBrowseFilter);

			 }

			 xmlWriter.writeEndElement();



		 }

		 /**
		  * Util method to write an attribute with the ns prefix
		  */
		 private void writeAttribute(String prefix,String namespace,String attName,
				 String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			 if (xmlWriter.getPrefix(namespace) == null) {
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);

			 }

			 xmlWriter.writeAttribute(namespace,attName,attValue);

		 }

		 /**
		  * Util method to write an attribute without the ns prefix
		  */
		 private void writeAttribute(String namespace,String attName,
				 String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			 if (namespace.equals(""))
			 {
				 xmlWriter.writeAttribute(attName,attValue);
			 }
			 else
			 {
				 registerPrefix(xmlWriter, namespace);
				 xmlWriter.writeAttribute(namespace,attName,attValue);
			 }
		 }


		 /**
		  * Util method to write an attribute without the ns prefix
		  */
		 private void writeQNameAttribute(String namespace, String attName,
				 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			 String attributeNamespace = qname.GenericFactory.getNamespaceURI();
			 String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			 if (attributePrefix == null) {
				 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			 }
			 String attributeValue;
			 if (attributePrefix.trim().length() > 0) {
				 attributeValue = attributePrefix + ":" + qname.getLocalPart();
			 } else {
				 attributeValue = qname.getLocalPart();
			 }

			 if (namespace.equals("")) {
				 xmlWriter.writeAttribute(attName, attributeValue);
			 } else {
				 registerPrefix(xmlWriter, namespace);
				 xmlWriter.writeAttribute(namespace, attName, attributeValue);
			 }
		 }
		 /**
		  *  method to handle Qnames
		  */

		 private void writeQName(javax.xml.namespace.QName qname,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			 String namespaceURI = qname.GenericFactory.getNamespaceURI();
			 if (namespaceURI != null) {
				 String prefix = xmlWriter.getPrefix(namespaceURI);
				 if (prefix == null) {
					 prefix = generatePrefix(namespaceURI);
					 xmlWriter.writeNamespace(prefix, namespaceURI);
					 xmlWriter.setPrefix(prefix,namespaceURI);
				 }

				 if (prefix.trim().length() > 0) {
					 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				 } else {
					 // i.e this is the default namespace
					 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				 }

			 } else {
				 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			 }
		 }

		 private void writeQNames(javax.xml.namespace.QName[] qnames,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			 if (qnames != null) {
				 // we have to store this data until last moment since it is not possible to write any
				 // namespace data after writing the charactor data
				 StringBuffer stringToWrite = new StringBuffer();
				 String namespaceURI = null;
				 String prefix = null;

				 for (int i = 0; i < qnames.length; i++) {
					 if (i > 0) {
						 stringToWrite.append(" ");
					 }
					 namespaceURI = qnames[i].GenericFactory.getNamespaceURI();
					 if (namespaceURI != null) {
						 prefix = xmlWriter.getPrefix(namespaceURI);
						 if ((prefix == null) || (prefix.length() == 0)) {
							 prefix = generatePrefix(namespaceURI);
							 xmlWriter.writeNamespace(prefix, namespaceURI);
							 xmlWriter.setPrefix(prefix,namespaceURI);
						 }

						 if (prefix.trim().length() > 0) {
							 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						 } else {
							 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						 }
					 } else {
						 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					 }
				 }
				 xmlWriter.writeCharacters(stringToWrite.toString());
			 }

		 }


		 /**
		  * Register a namespace prefix
		  */
		 private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
			 String prefix = xmlWriter.getPrefix(namespace);

			 if (prefix == null) {
				 prefix = generatePrefix(namespace);

				 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					 prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				 }

				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }

			 return prefix;
		 }



		 /**
		  * databinding method to get an XML representation of this object
		  *
		  */
		 public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				 throws org.apache.axis2.databinding.ADBException{




			 //We can safely assume an element has only one type associated with it
			 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
					 new java.lang.Object[]{
					 org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
					 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBrowseFilter)
			 },
			 null);

		 }



		 /**
		  *  Factory class that keeps the parse method
		  */
		 public static class Factory{



			 public static BrowseFilter fromValue(String value)
					 throws java.lang.IllegalArgumentException {
				 BrowseFilter enumeration = (BrowseFilter)

						 _table_.get(value);


				 if (enumeration==null) throw new java.lang.IllegalArgumentException();
				 return enumeration;
			 }
			 public static BrowseFilter fromString(String value,String namespaceURI)
					 throws java.lang.IllegalArgumentException {
				 try {

					 return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));


				 } catch (java.lang.Exception e) {
					 throw new java.lang.IllegalArgumentException();
				 }
			 }

			 public static BrowseFilter fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
					 String content) {
				 if (content.indexOf(":") > -1) {
					 String prefix = content.substring(0,content.indexOf(":"));
					 String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
					 return BrowseFilter.Factory.fromString(content,namespaceUri);
				 } else {
					 return BrowseFilter.Factory.fromString(content,"");
				 }
			 }


			 /**
			  * static method to create the object
			  * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			  *			 If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			  * Postcondition: If this object is an element, the reader is positioned at its end element
			  *			 If this object is a complex type, the reader is positioned at the end element of its outer element
			  */
			 public static BrowseFilter parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				 BrowseFilter object = null;
				 // initialize a hash map to keep values
				 java.util.Map attributeMap = new java.util.HashMap();
				 java.util.List extraAttributeList = new java.util.ArrayList();


				 int event;
				 String nillableValue = null;
				 String prefix ="";
				 String namespaceuri ="";
				 try {

					 while (!reader.isStartElement() && !reader.isEndElement())
						 reader.next();




					 // Note all attributes that were handled. Used to differ normal attributes
					 // from anyAttributes.
					 java.util.Vector handledAttributes = new java.util.Vector();



					 while(!reader.isEndElement()) {
						 if (reader.isStartElement()  || reader.hasText()) {

							 String content = reader.getElementText();

							 if (content.indexOf(":") > 0) {
								 // this seems to be a Qname so find the namespace and send
								 prefix = content.substring(0, content.indexOf(":"));
								 namespaceuri = reader.getNamespaceURI(prefix);
								 object = BrowseFilter.Factory.fromString(content,namespaceuri);
							 } else {
								 // this seems to be not a qname send and empty namespace incase of it is
								 // check is done in fromString method
								 object = BrowseFilter.Factory.fromString(content,"");
							 }


						 } else {
							 reader.next();
						 }  
					 }  // end of while loop




				 } catch (javax.xml.stream.XMLStreamException e) {
					 throw new java.lang.Exception(e);
				 }

				 return object;
			 }

		 }//end of factory class



	}


	public static class ItemProperty
	implements org.apache.axis2.databinding.ADBBean{
		/* This type was generated from the piece of schema that had
			 name = ItemProperty
			 Namespace URI = http://opcfoundation.org/webservices/XMLDA/1.0/
			 Namespace Prefix = ns1
		 */


		private static String generatePrefix(String namespace) {
			if(namespace.equals(OPC_NAMESPACE)) {
				return OPC_PREFIX;
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}



		/**
		 * field for Value
		 */


		protected org.apache.axiom.om.OMElement localValue ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localValueTracker = false ;


		/**
		 * Auto generated getter method
		 * @return org.apache.axiom.om.OMElement
		 */
		public  org.apache.axiom.om.OMElement getValue() {
			return localValue;
		}



		/**
		 * Auto generated setter method
		 * @param param Value
		 */
		public void setValue(org.apache.axiom.om.OMElement param) {

			if (param != null) {
				//update the setting tracker
				localValueTracker = true;
			} else {
				localValueTracker = false;

			}

			this.localValue=param;


		}


		/**
		 * field for Name
		 * This was an Attribute!
		 */


		protected javax.xml.namespace.QName localName ;


		/**
		 * Auto generated getter method
		 * @return javax.xml.namespace.QName
		 */
		public  javax.xml.namespace.QName getName() {
			return localName;
		}



		/**
		 * Auto generated setter method
		 * @param param Name
		 */
		public void setName(javax.xml.namespace.QName param) {

			this.localName=param;


		}


		/**
		 * field for Description
		 * This was an Attribute!
		 */


		protected String localDescription ;


		/**
		 * Auto generated getter method
		 * @return String
		 */
		public  String getDescription() {
			return localDescription;
		}



		/**
		 * Auto generated setter method
		 * @param param Description
		 */
		public void setDescription(String param) {

			this.localDescription=param;


		}


		/**
		 * field for ItemPath
		 * This was an Attribute!
		 */


		protected String localItemPath ;


		/**
		 * Auto generated getter method
		 * @return String
		 */
		public  String getItemPath() {
			return localItemPath;
		}



		/**
		 * Auto generated setter method
		 * @param param ItemPath
		 */
		public void setItemPath(String param) {

			this.localItemPath=param;


		}


		/**
		 * field for ItemName
		 * This was an Attribute!
		 */


		protected String localItemName ;


		/**
		 * Auto generated getter method
		 * @return String
		 */
		public  String getItemName() {
			return localItemName;
		}



		/**
		 * Auto generated setter method
		 * @param param ItemName
		 */
		public void setItemName(String param) {

			this.localItemName=param;


		}


		/**
		 * field for ResultID
		 * This was an Attribute!
		 */


		protected javax.xml.namespace.QName localResultID ;


		/**
		 * Auto generated getter method
		 * @return javax.xml.namespace.QName
		 */
		public  javax.xml.namespace.QName getResultID() {
			return localResultID;
		}



		/**
		 * Auto generated setter method
		 * @param param ResultID
		 */
		public void setResultID(javax.xml.namespace.QName param) {

			this.localResultID=param;


		}


		/**
		 * isReaderMTOMAware
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
			boolean isReaderMTOMAware = false;

			try{
				isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}catch(java.lang.IllegalArgumentException e) {
				isReaderMTOMAware = false;
			}
			return isReaderMTOMAware;
		}


		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,parentQName) {

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
					ItemProperty.this.serialize(parentQName,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
					parentQName,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory,
				org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory,
				org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			String prefix = null;
			String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.GenericFactory.getNamespaceURI();

			if ((namespace != null) && (namespace.trim().length() > 0)) {
				String writerPrefix = xmlWriter.getPrefix(namespace);
				if (writerPrefix != null) {
					xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
				} else {
					if (prefix == null) {
						prefix = generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
					xmlWriter.writeNamespace(prefix, namespace);
					xmlWriter.setPrefix(prefix, namespace);
				}
			} else {
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if (serializeType) {


				String namespacePrefix = registerPrefix(xmlWriter,OPC_NAMESPACE);
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":ItemProperty",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"ItemProperty",
							xmlWriter);
				}


			}

			if (localName != null) {

				writeQNameAttribute("",
						"Name",
						localName, xmlWriter);


			}

			if (localDescription != null) {

				writeAttribute("",
						"Description",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDescription), xmlWriter);


			}

			if (localItemPath != null) {

				writeAttribute("",
						"ItemPath",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localItemPath), xmlWriter);


			}

			if (localItemName != null) {

				writeAttribute("",
						"ItemName",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localItemName), xmlWriter);


			}

			if (localResultID != null) {

				writeQNameAttribute("",
						"ResultID",
						localResultID, xmlWriter);


			}
			if (localValueTracker) {
				namespace = OPC_NAMESPACE;
				if (! namespace.equals("")) {
					prefix = xmlWriter.getPrefix(namespace);

					if (prefix == null) {
						prefix = generatePrefix(namespace);

						xmlWriter.writeStartElement(prefix,"Value", namespace);
						xmlWriter.writeNamespace(prefix, namespace);
						xmlWriter.setPrefix(prefix, namespace);

					} else {
						xmlWriter.writeStartElement(namespace,"Value");
					}

				} else {
					xmlWriter.writeStartElement("Value");
				}


				if (localValue==null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("Value cannot be null!!");

				}else{

					localValue.serialize(xmlWriter);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();


		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(String prefix,String namespace,String attName,
				String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(String namespace,String attName,
				String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals(""))
			{
				xmlWriter.writeAttribute(attName,attValue);
			}
			else
			{
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(String namespace, String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			String attributeNamespace = qname.GenericFactory.getNamespaceURI();
			String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			String namespaceURI = qname.GenericFactory.getNamespaceURI();
			if (namespaceURI != null) {
				String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				StringBuffer stringToWrite = new StringBuffer();
				String namespaceURI = null;
				String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].GenericFactory.getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
			String prefix = xmlWriter.getPrefix(namespace);

			if (prefix == null) {
				prefix = generatePrefix(namespace);

				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}

			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localValueTracker) {
				elementList.add(new javax.xml.namespace.QName(OPC_NAMESPACE,
						"Value"));

				if (localValue != null) {
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localValue));
				} else {
					throw new org.apache.axis2.databinding.ADBException("Value cannot be null!!");
				}
			}
			attribList.add(
					new javax.xml.namespace.QName("","Name"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localName));

			attribList.add(
					new javax.xml.namespace.QName("","Description"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDescription));

			attribList.add(
					new javax.xml.namespace.QName("","ItemPath"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localItemPath));

			attribList.add(
					new javax.xml.namespace.QName("","ItemName"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localItemName));

			attribList.add(
					new javax.xml.namespace.QName("","ResultID"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localResultID));


			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *			 If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *			 If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static ItemProperty parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				ItemProperty object =
						new ItemProperty();

				int event;
				String nillableValue = null;
				String prefix ="";
				String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null) {
						String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null) {
							String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"ItemProperty".equals(type)) {
								//find namespace for the prefix
								String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (ItemProperty)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();



					// handle attribute "Name"
					String tempAttribName =

							reader.getAttributeValue(null,"Name");

					if (tempAttribName!=null) {
						String content = tempAttribName;

						int index = tempAttribName.indexOf(":");
						if(index > -1) {
							prefix = tempAttribName.substring(0,index);
						} else {
							// i.e this is in default namesace
							prefix = "";
						}
						namespaceuri = reader.getNamespaceURI(prefix);

						object.setName(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToQName(tempAttribName,namespaceuri));

					} else {

					}
					handledAttributes.add("Name");

					// handle attribute "Description"
					String tempAttribDescription =

							reader.getAttributeValue(null,"Description");

					if (tempAttribDescription!=null) {
						String content = tempAttribDescription;

						object.setDescription(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(tempAttribDescription));

					} else {

					}
					handledAttributes.add("Description");

					// handle attribute "ItemPath"
					String tempAttribItemPath =

					reader.getAttributeValue(null,"ItemPath");

					if (tempAttribItemPath!=null) {
						String content = tempAttribItemPath;

						object.setItemPath(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(tempAttribItemPath));

					} else {

					}
					handledAttributes.add("ItemPath");

					// handle attribute "ItemName"
					String tempAttribItemName =

					reader.getAttributeValue(null,"ItemName");

					if (tempAttribItemName!=null) {
						String content = tempAttribItemName;

						object.setItemName(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(tempAttribItemName));

					} else {

					}
					handledAttributes.add("ItemName");

					// handle attribute "ResultID"
					String tempAttribResultID =

					reader.getAttributeValue(null,"ResultID");

					if (tempAttribResultID!=null) {
						String content = tempAttribResultID;

						int index = tempAttribResultID.indexOf(":");
						if(index > -1) {
							prefix = tempAttribResultID.substring(0,index);
						} else {
							// i.e this is in default namesace
							prefix = "";
						}
						namespaceuri = reader.getNamespaceURI(prefix);

						object.setResultID(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToQName(tempAttribResultID,namespaceuri));

					} else {

					}
					handledAttributes.add("ResultID");


					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement()) {

						String content = reader.getElementText();

						org.apache.axiom.om.OMFactory fac = org.apache.axiom.om.OMAbstractFactory.getOMFactory();
						org.apache.axiom.om.OMNamespace omNs = fac.createOMNamespace(OPC_NAMESPACE, "");
						org.apache.axiom.om.OMElement _valueValue = fac.GenericFactory.createOMElement("Value", omNs);
						_valueValue.addChild(fac.createOMText(_valueValue, content));
						object.setValue(_valueValue);

						reader.next();

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class ItemIdentifier
	implements org.apache.axis2.databinding.ADBBean{
		/* This type was generated from the piece of schema that had
			 name = ItemIdentifier
			 Namespace URI = http://opcfoundation.org/webservices/XMLDA/1.0/
			 Namespace Prefix = ns1
		 */


		private static String generatePrefix(String namespace) {
			if(namespace.equals(OPC_NAMESPACE)) {
				return OPC_PREFIX;
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}



		/**
		 * field for ItemPath
		 * This was an Attribute!
		 */


		protected String localItemPath ;


		/**
		 * Auto generated getter method
		 * @return String
		 */
		public  String getItemPath() {
			return localItemPath;
		}



		/**
		 * Auto generated setter method
		 * @param param ItemPath
		 */
		public void setItemPath(String param) {

			this.localItemPath=param;


		}


		/**
		 * field for ItemName
		 * This was an Attribute!
		 */


		protected String localItemName ;


		/**
		 * Auto generated getter method
		 * @return String
		 */
		public  String getItemName() {
			return localItemName;
		}



		/**
		 * Auto generated setter method
		 * @param param ItemName
		 */
		public void setItemName(String param) {

			this.localItemName=param;


		}


		/**
		 * isReaderMTOMAware
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
			boolean isReaderMTOMAware = false;

			try{
				isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}catch(java.lang.IllegalArgumentException e) {
				isReaderMTOMAware = false;
			}
			return isReaderMTOMAware;
		}


		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,parentQName) {

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
					ItemIdentifier.this.serialize(parentQName,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
					parentQName,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory,
				org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory,
				org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			String prefix = null;
			String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.GenericFactory.getNamespaceURI();

			if ((namespace != null) && (namespace.trim().length() > 0)) {
				String writerPrefix = xmlWriter.getPrefix(namespace);
				if (writerPrefix != null) {
					xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
				} else {
					if (prefix == null) {
						prefix = generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
					xmlWriter.writeNamespace(prefix, namespace);
					xmlWriter.setPrefix(prefix, namespace);
				}
			} else {
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if (serializeType) {


				String namespacePrefix = registerPrefix(xmlWriter,OPC_NAMESPACE);
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":ItemIdentifier",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"ItemIdentifier",
							xmlWriter);
				}


			}

			if (localItemPath != null) {

				writeAttribute("",
						"ItemPath",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localItemPath), xmlWriter);


			}

			if (localItemName != null) {

				writeAttribute("",
						"ItemName",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localItemName), xmlWriter);


			}

			xmlWriter.writeEndElement();


		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(String prefix,String namespace,String attName,
				String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(String namespace,String attName,
				String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals(""))
			{
				xmlWriter.writeAttribute(attName,attValue);
			}
			else
			{
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(String namespace, String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			String attributeNamespace = qname.GenericFactory.getNamespaceURI();
			String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			String namespaceURI = qname.GenericFactory.getNamespaceURI();
			if (namespaceURI != null) {
				String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				StringBuffer stringToWrite = new StringBuffer();
				String namespaceURI = null;
				String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].GenericFactory.getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
			String prefix = xmlWriter.getPrefix(namespace);

			if (prefix == null) {
				prefix = generatePrefix(namespace);

				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}

			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();


			attribList.add(
					new javax.xml.namespace.QName("","ItemPath"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localItemPath));

			attribList.add(
					new javax.xml.namespace.QName("","ItemName"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localItemName));


			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *			 If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *			 If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static ItemIdentifier parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				ItemIdentifier object =
						new ItemIdentifier();

				int event;
				String nillableValue = null;
				String prefix ="";
				String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null) {
						String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null) {
							String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"ItemIdentifier".equals(type)) {
								//find namespace for the prefix
								String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (ItemIdentifier)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();



					// handle attribute "ItemPath"
					String tempAttribItemPath =

							reader.getAttributeValue(null,"ItemPath");

					if (tempAttribItemPath!=null) {
						String content = tempAttribItemPath;

						object.setItemPath(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(tempAttribItemPath));

					} else {

					}
					handledAttributes.add("ItemPath");

					// handle attribute "ItemName"
					String tempAttribItemName =

					reader.getAttributeValue(null,"ItemName");

					if (tempAttribItemName!=null) {
						String content = tempAttribItemName;

						object.setItemName(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(tempAttribItemName));

					} else {

					}
					handledAttributes.add("ItemName");


					reader.next();




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class Write
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				OPC_NAMESPACE,
				"Write",
				OPC_PREFIX);



		private static String generatePrefix(String namespace) {
			if(namespace.equals(OPC_NAMESPACE)) {
				return OPC_PREFIX;
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}



		/**
		 * field for Options
		 */


		protected RequestOptions localOptions ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localOptionsTracker = false ;


		/**
		 * Auto generated getter method
		 * @return RequestOptions
		 */
		public  RequestOptions getOptions() {
			return localOptions;
		}



		/**
		 * Auto generated setter method
		 * @param param Options
		 */
		public void setOptions(RequestOptions param) {

			if (param != null) {
				//update the setting tracker
				localOptionsTracker = true;
			} else {
				localOptionsTracker = false;

			}

			this.localOptions=param;


		}


		/**
		 * field for ItemList
		 */


		protected WriteRequestItemList localItemList ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localItemListTracker = false ;


		/**
		 * Auto generated getter method
		 * @return WriteRequestItemList
		 */
		public  WriteRequestItemList getItemList() {
			return localItemList;
		}



		/**
		 * Auto generated setter method
		 * @param param ItemList
		 */
		public void setItemList(WriteRequestItemList param) {

			if (param != null) {
				//update the setting tracker
				localItemListTracker = true;
			} else {
				localItemListTracker = false;

			}

			this.localItemList=param;


		}


		/**
		 * field for ReturnValuesOnReply
		 * This was an Attribute!
		 */


		protected boolean localReturnValuesOnReply ;


		/**
		 * Auto generated getter method
		 * @return boolean
		 */
		public  boolean getReturnValuesOnReply() {
			return localReturnValuesOnReply;
		}



		/**
		 * Auto generated setter method
		 * @param param ReturnValuesOnReply
		 */
		public void setReturnValuesOnReply(boolean param) {

			this.localReturnValuesOnReply=param;


		}


		/**
		 * isReaderMTOMAware
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
			boolean isReaderMTOMAware = false;

			try{
				isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}catch(java.lang.IllegalArgumentException e) {
				isReaderMTOMAware = false;
			}
			return isReaderMTOMAware;
		}


		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME) {

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
					Write.this.serialize(MY_QNAME,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
					MY_QNAME,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory,
				org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory,
				org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			String prefix = null;
			String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.GenericFactory.getNamespaceURI();

			if ((namespace != null) && (namespace.trim().length() > 0)) {
				String writerPrefix = xmlWriter.getPrefix(namespace);
				if (writerPrefix != null) {
					xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
				} else {
					if (prefix == null) {
						prefix = generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
					xmlWriter.writeNamespace(prefix, namespace);
					xmlWriter.setPrefix(prefix, namespace);
				}
			} else {
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if (serializeType) {


				String namespacePrefix = registerPrefix(xmlWriter,OPC_NAMESPACE);
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":Write",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"Write",
							xmlWriter);
				}


			}

			if (true) {

				writeAttribute("",
						"ReturnValuesOnReply",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReturnValuesOnReply), xmlWriter);


			}

			else {
				throw new org.apache.axis2.databinding.ADBException("required attribute localReturnValuesOnReply is null");
			}
			if (localOptionsTracker) {
				if (localOptions==null) {
					throw new org.apache.axis2.databinding.ADBException("Options cannot be null!!");
				}
				localOptions.serialize(new javax.xml.namespace.QName(OPC_NAMESPACE,"Options"),
						factory,xmlWriter);
			} if (localItemListTracker) {
				if (localItemList==null) {
					throw new org.apache.axis2.databinding.ADBException("ItemList cannot be null!!");
				}
				localItemList.serialize(new javax.xml.namespace.QName(OPC_NAMESPACE,"ItemList"),
						factory,xmlWriter);
			}
			xmlWriter.writeEndElement();


		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(String prefix,String namespace,String attName,
				String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(String namespace,String attName,
				String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals(""))
			{
				xmlWriter.writeAttribute(attName,attValue);
			}
			else
			{
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(String namespace, String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			String attributeNamespace = qname.GenericFactory.getNamespaceURI();
			String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			String namespaceURI = qname.GenericFactory.getNamespaceURI();
			if (namespaceURI != null) {
				String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				StringBuffer stringToWrite = new StringBuffer();
				String namespaceURI = null;
				String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].GenericFactory.getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
			String prefix = xmlWriter.getPrefix(namespace);

			if (prefix == null) {
				prefix = generatePrefix(namespace);

				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}

			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localOptionsTracker) {
				elementList.add(new javax.xml.namespace.QName(OPC_NAMESPACE,
						"Options"));


				if (localOptions==null) {
					throw new org.apache.axis2.databinding.ADBException("Options cannot be null!!");
				}
				elementList.add(localOptions);
			} if (localItemListTracker) {
				elementList.add(new javax.xml.namespace.QName(OPC_NAMESPACE,
						"ItemList"));


				if (localItemList==null) {
					throw new org.apache.axis2.databinding.ADBException("ItemList cannot be null!!");
				}
				elementList.add(localItemList);
			}
			attribList.add(
					new javax.xml.namespace.QName("","ReturnValuesOnReply"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReturnValuesOnReply));


			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *			 If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *			 If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static Write parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				Write object =
						new Write();

				int event;
				String nillableValue = null;
				String prefix ="";
				String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null) {
						String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null) {
							String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"Write".equals(type)) {
								//find namespace for the prefix
								String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (Write)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();



					// handle attribute "ReturnValuesOnReply"
					String tempAttribReturnValuesOnReply =

							reader.getAttributeValue(null,"ReturnValuesOnReply");

					if (tempAttribReturnValuesOnReply!=null) {
						String content = tempAttribReturnValuesOnReply;

						object.setReturnValuesOnReply(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(tempAttribReturnValuesOnReply));

					} else {

						throw new org.apache.axis2.databinding.ADBException("Required attribute ReturnValuesOnReply is missing");

					}
					handledAttributes.add("ReturnValuesOnReply");


					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName(OPC_NAMESPACE,"Options").equals(reader.getName())) {

						object.setOptions(RequestOptions.Factory.parse(reader));

						reader.next();

					}  // End of if for expected property start element

					else {

					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName(OPC_NAMESPACE,"ItemList").equals(reader.getName())) {

						object.setItemList(WriteRequestItemList.Factory.parse(reader));

						reader.next();

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	public static class WriteResponse
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				OPC_NAMESPACE,
				"WriteResponse",
				OPC_PREFIX);



		private static String generatePrefix(String namespace) {
			if(namespace.equals(OPC_NAMESPACE)) {
				return OPC_PREFIX;
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}



		/**
		 * field for WriteResult
		 */


		protected ReplyBase localWriteResult ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localWriteResultTracker = false ;


		/**
		 * Auto generated getter method
		 * @return ReplyBase
		 */
		public  ReplyBase getWriteResult() {
			return localWriteResult;
		}



		/**
		 * Auto generated setter method
		 * @param param WriteResult
		 */
		public void setWriteResult(ReplyBase param) {

			if (param != null) {
				//update the setting tracker
				localWriteResultTracker = true;
			} else {
				localWriteResultTracker = false;

			}

			this.localWriteResult=param;


		}


		/**
		 * field for RItemList
		 */


		protected ReplyItemList localRItemList ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localRItemListTracker = false ;


		/**
		 * Auto generated getter method
		 * @return ReplyItemList
		 */
		public  ReplyItemList getRItemList() {
			return localRItemList;
		}



		/**
		 * Auto generated setter method
		 * @param param RItemList
		 */
		public void setRItemList(ReplyItemList param) {

			if (param != null) {
				//update the setting tracker
				localRItemListTracker = true;
			} else {
				localRItemListTracker = false;

			}

			this.localRItemList=param;


		}


		/**
		 * field for Errors
		 * This was an Array!
		 */


		protected OPCError[] localErrors ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localErrorsTracker = false ;


		/**
		 * Auto generated getter method
		 * @return OPCError[]
		 */
		public  OPCError[] getErrors() {
			return localErrors;
		}






		/**
		 * validate the array for Errors
		 */
		protected void validateErrors(OPCError[] param) {

		}


		/**
		 * Auto generated setter method
		 * @param param Errors
		 */
		public void setErrors(OPCError[] param) {

			validateErrors(param);


			if (param != null) {
				//update the setting tracker
				localErrorsTracker = true;
			} else {
				localErrorsTracker = false;

			}

			this.localErrors=param;
		}



		/**
		 * Auto generated add method for the array for convenience
		 * @param param OPCError
		 */
		public void addErrors(OPCError param) {
			if (localErrors == null) {
				localErrors = new OPCError[]{};
			}


			//update the setting tracker
			localErrorsTracker = true;


			java.util.List list =
					org.apache.axis2.databinding.utils.ConverterUtil.toList(localErrors);
			list.add(param);
			this.localErrors =
					(OPCError[])list.toArray(
							new OPCError[list.size()]);

		}


		/**
		 * isReaderMTOMAware
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
			boolean isReaderMTOMAware = false;

			try{
				isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}catch(java.lang.IllegalArgumentException e) {
				isReaderMTOMAware = false;
			}
			return isReaderMTOMAware;
		}


		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME) {

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
					WriteResponse.this.serialize(MY_QNAME,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
					MY_QNAME,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory,
				org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory,
				org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			String prefix = null;
			String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.GenericFactory.getNamespaceURI();

			if ((namespace != null) && (namespace.trim().length() > 0)) {
				String writerPrefix = xmlWriter.getPrefix(namespace);
				if (writerPrefix != null) {
					xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
				} else {
					if (prefix == null) {
						prefix = generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
					xmlWriter.writeNamespace(prefix, namespace);
					xmlWriter.setPrefix(prefix, namespace);
				}
			} else {
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if (serializeType) {


				String namespacePrefix = registerPrefix(xmlWriter,OPC_NAMESPACE);
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":WriteResponse",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"WriteResponse",
							xmlWriter);
				}


			}
			if (localWriteResultTracker) {
				if (localWriteResult==null) {
					throw new org.apache.axis2.databinding.ADBException("WriteResult cannot be null!!");
				}
				localWriteResult.serialize(new javax.xml.namespace.QName(OPC_NAMESPACE,"WriteResult"),
						factory,xmlWriter);
			} if (localRItemListTracker) {
				if (localRItemList==null) {
					throw new org.apache.axis2.databinding.ADBException("RItemList cannot be null!!");
				}
				localRItemList.serialize(new javax.xml.namespace.QName(OPC_NAMESPACE,"RItemList"),
						factory,xmlWriter);
			} if (localErrorsTracker) {
				if (localErrors!=null) {
					for (int i = 0;i < localErrors.length;i++) {
						if (localErrors[i] != null) {
							localErrors[i].serialize(new javax.xml.namespace.QName(OPC_NAMESPACE,"Errors"),
									factory,xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException("Errors cannot be null!!");

				}
			}
			xmlWriter.writeEndElement();


		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(String prefix,String namespace,String attName,
				String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(String namespace,String attName,
				String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals(""))
			{
				xmlWriter.writeAttribute(attName,attValue);
			}
			else
			{
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(String namespace, String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			String attributeNamespace = qname.GenericFactory.getNamespaceURI();
			String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			String namespaceURI = qname.GenericFactory.getNamespaceURI();
			if (namespaceURI != null) {
				String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				StringBuffer stringToWrite = new StringBuffer();
				String namespaceURI = null;
				String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].GenericFactory.getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
			String prefix = xmlWriter.getPrefix(namespace);

			if (prefix == null) {
				prefix = generatePrefix(namespace);

				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}

			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localWriteResultTracker) {
				elementList.add(new javax.xml.namespace.QName(OPC_NAMESPACE,
						"WriteResult"));


				if (localWriteResult==null) {
					throw new org.apache.axis2.databinding.ADBException("WriteResult cannot be null!!");
				}
				elementList.add(localWriteResult);
			} if (localRItemListTracker) {
				elementList.add(new javax.xml.namespace.QName(OPC_NAMESPACE,
						"RItemList"));


				if (localRItemList==null) {
					throw new org.apache.axis2.databinding.ADBException("RItemList cannot be null!!");
				}
				elementList.add(localRItemList);
			} if (localErrorsTracker) {
				if (localErrors!=null) {
					for (int i = 0;i < localErrors.length;i++) {

						if (localErrors[i] != null) {
							elementList.add(new javax.xml.namespace.QName(OPC_NAMESPACE,
									"Errors"));
							elementList.add(localErrors[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException("Errors cannot be null!!");

				}

			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *			 If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *			 If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static WriteResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				WriteResponse object =
						new WriteResponse();

				int event;
				String nillableValue = null;
				String prefix ="";
				String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null) {
						String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null) {
							String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"WriteResponse".equals(type)) {
								//find namespace for the prefix
								String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (WriteResponse)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();




					reader.next();

					java.util.ArrayList list3 = new java.util.ArrayList();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName(OPC_NAMESPACE,"WriteResult").equals(reader.getName())) {

						object.setWriteResult(ReplyBase.Factory.parse(reader));

						reader.next();

					}  // End of if for expected property start element

					else {

					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName(OPC_NAMESPACE,"RItemList").equals(reader.getName())) {

						object.setRItemList(ReplyItemList.Factory.parse(reader));

						reader.next();

					}  // End of if for expected property start element

					else {

					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName(OPC_NAMESPACE,"Errors").equals(reader.getName())) {



						// Process the array and step past its final element's end.
						list3.add(OPCError.Factory.parse(reader));

						//loop until we find a start element that is not part of this array
						boolean loopDone3 = false;
						while(!loopDone3) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								//two continuous end elements means we are exiting the xml structure
								loopDone3 = true;
							} else {
								if (new javax.xml.namespace.QName(OPC_NAMESPACE,"Errors").equals(reader.getName())) {
									list3.add(OPCError.Factory.parse(reader));

								}else{
									loopDone3 = true;
								}
							}
						}
						// call the converter utility  to convert and set the array

						object.setErrors((OPCError[])
								org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
										OPCError.class,
										list3));

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}




	public static class BrowseResponse
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				OPC_NAMESPACE,
				"BrowseResponse",
				OPC_PREFIX);



		private static String generatePrefix(String namespace) {
			if(namespace.equals(OPC_NAMESPACE)) {
				return OPC_PREFIX;
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}



		/**
		 * field for BrowseResult
		 */


		protected ReplyBase localBrowseResult ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localBrowseResultTracker = false ;


		/**
		 * Auto generated getter method
		 * @return ReplyBase
		 */
		public  ReplyBase getBrowseResult() {
			return localBrowseResult;
		}



		/**
		 * Auto generated setter method
		 * @param param BrowseResult
		 */
		public void setBrowseResult(ReplyBase param) {

			if (param != null) {
				//update the setting tracker
				localBrowseResultTracker = true;
			} else {
				localBrowseResultTracker = false;

			}

			this.localBrowseResult=param;


		}


		/**
		 * field for Elements
		 * This was an Array!
		 */


		protected BrowseElement[] localElements ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localElementsTracker = false ;


		/**
		 * Auto generated getter method
		 * @return BrowseElement[]
		 */
		public  BrowseElement[] getElements() {
			return localElements;
		}






		/**
		 * validate the array for Elements
		 */
		protected void validateElements(BrowseElement[] param) {

		}


		/**
		 * Auto generated setter method
		 * @param param Elements
		 */
		public void setElements(BrowseElement[] param) {

			validateElements(param);


			if (param != null) {
				//update the setting tracker
				localElementsTracker = true;
			} else {
				localElementsTracker = false;

			}

			this.localElements=param;
		}



		/**
		 * Auto generated add method for the array for convenience
		 * @param param BrowseElement
		 */
		public void addElements(BrowseElement param) {
			if (localElements == null) {
				localElements = new BrowseElement[]{};
			}


			//update the setting tracker
			localElementsTracker = true;


			java.util.List list =
					org.apache.axis2.databinding.utils.ConverterUtil.toList(localElements);
			list.add(param);
			this.localElements =
					(BrowseElement[])list.toArray(
							new BrowseElement[list.size()]);

		}


		/**
		 * field for Errors
		 * This was an Array!
		 */


		protected OPCError[] localErrors ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localErrorsTracker = false ;


		/**
		 * Auto generated getter method
		 * @return OPCError[]
		 */
		public  OPCError[] getErrors() {
			return localErrors;
		}






		/**
		 * validate the array for Errors
		 */
		protected void validateErrors(OPCError[] param) {

		}


		/**
		 * Auto generated setter method
		 * @param param Errors
		 */
		public void setErrors(OPCError[] param) {

			validateErrors(param);


			if (param != null) {
				//update the setting tracker
				localErrorsTracker = true;
			} else {
				localErrorsTracker = false;

			}

			this.localErrors=param;
		}



		/**
		 * Auto generated add method for the array for convenience
		 * @param param OPCError
		 */
		public void addErrors(OPCError param) {
			if (localErrors == null) {
				localErrors = new OPCError[]{};
			}


			//update the setting tracker
			localErrorsTracker = true;


			java.util.List list =
					org.apache.axis2.databinding.utils.ConverterUtil.toList(localErrors);
			list.add(param);
			this.localErrors =
					(OPCError[])list.toArray(
							new OPCError[list.size()]);

		}


		/**
		 * field for ContinuationPoint
		 * This was an Attribute!
		 */


		protected String localContinuationPoint ;


		/**
		 * Auto generated getter method
		 * @return String
		 */
		public  String getContinuationPoint() {
			return localContinuationPoint;
		}



		/**
		 * Auto generated setter method
		 * @param param ContinuationPoint
		 */
		public void setContinuationPoint(String param) {

			this.localContinuationPoint=param;


		}


		/**
		 * field for MoreElements
		 * This was an Attribute!
		 */


		protected boolean localMoreElements ;


		/**
		 * Auto generated getter method
		 * @return boolean
		 */
		public  boolean getMoreElements() {
			return localMoreElements;
		}



		/**
		 * Auto generated setter method
		 * @param param MoreElements
		 */
		public void setMoreElements(boolean param) {

			this.localMoreElements=param;


		}


		/**
		 * isReaderMTOMAware
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
			boolean isReaderMTOMAware = false;

			try{
				isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}catch(java.lang.IllegalArgumentException e) {
				isReaderMTOMAware = false;
			}
			return isReaderMTOMAware;
		}


		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME) {

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
					BrowseResponse.this.serialize(MY_QNAME,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
					MY_QNAME,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory,
				org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory,
				org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			String prefix = null;
			String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.GenericFactory.getNamespaceURI();

			if ((namespace != null) && (namespace.trim().length() > 0)) {
				String writerPrefix = xmlWriter.getPrefix(namespace);
				if (writerPrefix != null) {
					xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
				} else {
					if (prefix == null) {
						prefix = generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
					xmlWriter.writeNamespace(prefix, namespace);
					xmlWriter.setPrefix(prefix, namespace);
				}
			} else {
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if (serializeType) {


				String namespacePrefix = registerPrefix(xmlWriter,OPC_NAMESPACE);
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":BrowseResponse",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"BrowseResponse",
							xmlWriter);
				}


			}

			if (localContinuationPoint != null) {

				writeAttribute("",
						"ContinuationPoint",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localContinuationPoint), xmlWriter);


			}

			if (true) {

				writeAttribute("",
						"MoreElements",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMoreElements), xmlWriter);


			}

			else {
				throw new org.apache.axis2.databinding.ADBException("required attribute localMoreElements is null");
			}
			if (localBrowseResultTracker) {
				if (localBrowseResult==null) {
					throw new org.apache.axis2.databinding.ADBException("BrowseResult cannot be null!!");
				}
				localBrowseResult.serialize(new javax.xml.namespace.QName(OPC_NAMESPACE,"BrowseResult"),
						factory,xmlWriter);
			} if (localElementsTracker) {
				if (localElements!=null) {
					for (int i = 0;i < localElements.length;i++) {
						if (localElements[i] != null) {
							localElements[i].serialize(new javax.xml.namespace.QName(OPC_NAMESPACE,"Elements"),
									factory,xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException("Elements cannot be null!!");

				}
			} if (localErrorsTracker) {
				if (localErrors!=null) {
					for (int i = 0;i < localErrors.length;i++) {
						if (localErrors[i] != null) {
							localErrors[i].serialize(new javax.xml.namespace.QName(OPC_NAMESPACE,"Errors"),
									factory,xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException("Errors cannot be null!!");

				}
			}
			xmlWriter.writeEndElement();


		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(String prefix,String namespace,String attName,
				String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(String namespace,String attName,
				String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals(""))
			{
				xmlWriter.writeAttribute(attName,attValue);
			}
			else
			{
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(String namespace, String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			String attributeNamespace = qname.GenericFactory.getNamespaceURI();
			String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			String namespaceURI = qname.GenericFactory.getNamespaceURI();
			if (namespaceURI != null) {
				String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				StringBuffer stringToWrite = new StringBuffer();
				String namespaceURI = null;
				String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].GenericFactory.getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
			String prefix = xmlWriter.getPrefix(namespace);

			if (prefix == null) {
				prefix = generatePrefix(namespace);

				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}

			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localBrowseResultTracker) {
				elementList.add(new javax.xml.namespace.QName(OPC_NAMESPACE,
						"BrowseResult"));


				if (localBrowseResult==null) {
					throw new org.apache.axis2.databinding.ADBException("BrowseResult cannot be null!!");
				}
				elementList.add(localBrowseResult);
			} if (localElementsTracker) {
				if (localElements!=null) {
					for (int i = 0;i < localElements.length;i++) {

						if (localElements[i] != null) {
							elementList.add(new javax.xml.namespace.QName(OPC_NAMESPACE,
									"Elements"));
							elementList.add(localElements[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException("Elements cannot be null!!");

				}

			} if (localErrorsTracker) {
				if (localErrors!=null) {
					for (int i = 0;i < localErrors.length;i++) {

						if (localErrors[i] != null) {
							elementList.add(new javax.xml.namespace.QName(OPC_NAMESPACE,
									"Errors"));
							elementList.add(localErrors[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException("Errors cannot be null!!");

				}

			}
			attribList.add(
					new javax.xml.namespace.QName("","ContinuationPoint"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localContinuationPoint));

			attribList.add(
					new javax.xml.namespace.QName("","MoreElements"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMoreElements));


			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *			 If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *			 If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static BrowseResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				BrowseResponse object =
						new BrowseResponse();

				int event;
				String nillableValue = null;
				String prefix ="";
				String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null) {
						String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null) {
							String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"BrowseResponse".equals(type)) {
								//find namespace for the prefix
								String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (BrowseResponse)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();



					// handle attribute "ContinuationPoint"
					String tempAttribContinuationPoint =

							reader.getAttributeValue(null,"ContinuationPoint");

					if (tempAttribContinuationPoint!=null) {
						String content = tempAttribContinuationPoint;

						object.setContinuationPoint(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(tempAttribContinuationPoint));

					} else {

					}
					handledAttributes.add("ContinuationPoint");

					// handle attribute "MoreElements"
					String tempAttribMoreElements =

					reader.getAttributeValue(null,"MoreElements");

					if (tempAttribMoreElements!=null) {
						String content = tempAttribMoreElements;

						object.setMoreElements(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(tempAttribMoreElements));

					} else {

						throw new org.apache.axis2.databinding.ADBException("Required attribute MoreElements is missing");

					}
					handledAttributes.add("MoreElements");


					reader.next();

					java.util.ArrayList list2 = new java.util.ArrayList();

					java.util.ArrayList list3 = new java.util.ArrayList();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName(OPC_NAMESPACE,"BrowseResult").equals(reader.getName())) {

						object.setBrowseResult(ReplyBase.Factory.parse(reader));

						reader.next();

					}  // End of if for expected property start element

					else {

					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName(OPC_NAMESPACE,"Elements").equals(reader.getName())) {



						// Process the array and step past its final element's end.
						list2.add(BrowseElement.Factory.parse(reader));

						//loop until we find a start element that is not part of this array
						boolean loopDone2 = false;
						while(!loopDone2) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								//two continuous end elements means we are exiting the xml structure
								loopDone2 = true;
							} else {
								if (new javax.xml.namespace.QName(OPC_NAMESPACE,"Elements").equals(reader.getName())) {
									list2.add(BrowseElement.Factory.parse(reader));

								}else{
									loopDone2 = true;
								}
							}
						}
						// call the converter utility  to convert and set the array

						object.setElements((BrowseElement[])
								org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
										BrowseElement.class,
										list2));

					}  // End of if for expected property start element

					else {

					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName(OPC_NAMESPACE,"Errors").equals(reader.getName())) {



						// Process the array and step past its final element's end.
						list3.add(OPCError.Factory.parse(reader));

						//loop until we find a start element that is not part of this array
						boolean loopDone3 = false;
						while(!loopDone3) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								//two continuous end elements means we are exiting the xml structure
								loopDone3 = true;
							} else {
								if (new javax.xml.namespace.QName(OPC_NAMESPACE,"Errors").equals(reader.getName())) {
									list3.add(OPCError.Factory.parse(reader));

								}else{
									loopDone3 = true;
								}
							}
						}
						// call the converter utility  to convert and set the array

						object.setErrors((OPCError[])
								org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
										OPCError.class,
										list3));

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}

	
	
	public static class QualityBits
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				OPC_NAMESPACE,
				"qualityBits",
				OPC_PREFIX);



		private static String generatePrefix(String namespace) {
			if(namespace.equals(OPC_NAMESPACE)) {
				return OPC_PREFIX;
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}



		/**
		 * field for QualityBits
		 */


		protected String localQualityBits ;

		private static java.util.HashMap _table_ = new java.util.HashMap();

		// Constructor

		protected QualityBits(String value, boolean isRegisterValue) {
			localQualityBits = value;
			if (isRegisterValue) {

				_table_.put(localQualityBits, this);

			}

		}

		public static final String _bad =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("bad");

		public static final String _badConfigurationError =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("badConfigurationError");

		public static final String _badNotConnected =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("badNotConnected");

		public static final String _badDeviceFailure =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("badDeviceFailure");

		public static final String _badSensorFailure =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("badSensorFailure");

		public static final String _badLastKnownValue =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("badLastKnownValue");

		public static final String _badCommFailure =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("badCommFailure");

		public static final String _badOutOfService =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("badOutOfService");

		public static final String _badWaitingForInitialData =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("badWaitingForInitialData");

		public static final String _uncertain =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("uncertain");

		public static final String _uncertainLastUsableValue =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("uncertainLastUsableValue");

		public static final String _uncertainSensorNotAccurate =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("uncertainSensorNotAccurate");

		public static final String _uncertainEUExceeded =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("uncertainEUExceeded");

		public static final String _uncertainSubNormal =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("uncertainSubNormal");

		public static final String _good =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("good");

		public static final String _goodLocalOverride =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("goodLocalOverride");

		public static final QualityBits bad =
				new QualityBits(_bad,true);

		public static final QualityBits badConfigurationError =
				new QualityBits(_badConfigurationError,true);

		public static final QualityBits badNotConnected =
				new QualityBits(_badNotConnected,true);

		public static final QualityBits badDeviceFailure =
				new QualityBits(_badDeviceFailure,true);

		public static final QualityBits badSensorFailure =
				new QualityBits(_badSensorFailure,true);

		public static final QualityBits badLastKnownValue =
				new QualityBits(_badLastKnownValue,true);

		public static final QualityBits badCommFailure =
				new QualityBits(_badCommFailure,true);

		public static final QualityBits badOutOfService =
				new QualityBits(_badOutOfService,true);

		public static final QualityBits badWaitingForInitialData =
				new QualityBits(_badWaitingForInitialData,true);

		public static final QualityBits uncertain =
				new QualityBits(_uncertain,true);

		public static final QualityBits uncertainLastUsableValue =
				new QualityBits(_uncertainLastUsableValue,true);

		public static final QualityBits uncertainSensorNotAccurate =
				new QualityBits(_uncertainSensorNotAccurate,true);

		public static final QualityBits uncertainEUExceeded =
				new QualityBits(_uncertainEUExceeded,true);

		public static final QualityBits uncertainSubNormal =
				new QualityBits(_uncertainSubNormal,true);

		public static final QualityBits good =
				new QualityBits(_good,true);

		public static final QualityBits goodLocalOverride =
				new QualityBits(_goodLocalOverride,true);


		public String getValue() { return localQualityBits;}

		public boolean equals(java.lang.Object obj) {return (obj == this);}
		public int hashCode() { return toString().hashCode();}
		public String toString() {

			return localQualityBits.toString();


		}



		/**
		 * isReaderMTOMAware
		 * @return true if the reader supports MTOM
		 */
		 public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
			 boolean isReaderMTOMAware = false;

			 try{
				 isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			 }catch(java.lang.IllegalArgumentException e) {
				 isReaderMTOMAware = false;
			 }
			 return isReaderMTOMAware;
		 }


		 /**
		  *
		  * @param parentQName
		  * @param factory
		  * @return org.apache.axiom.om.OMElement
		  */
		 public org.apache.axiom.om.OMElement getOMElement (
				 final javax.xml.namespace.QName parentQName,
				 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			 org.apache.axiom.om.OMDataSource dataSource =
					 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME) {

				 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
					 QualityBits.this.serialize(MY_QNAME,factory,xmlWriter);
				 }
			 };
			 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
					 MY_QNAME,factory,dataSource);

		 }

		 public void serialize(final javax.xml.namespace.QName parentQName,
				 final org.apache.axiom.om.OMFactory factory,
				 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
						 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			 serialize(parentQName,factory,xmlWriter,false);
		 }

		 public void serialize(final javax.xml.namespace.QName parentQName,
				 final org.apache.axiom.om.OMFactory factory,
				 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
				 boolean serializeType)
						 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{


			 //We can safely assume an element has only one type associated with it

			 String namespace = parentQName.GenericFactory.getNamespaceURI();
			 String localName = parentQName.getLocalPart();

			 if (! namespace.equals("")) {
				 String prefix = xmlWriter.getPrefix(namespace);

				 if (prefix == null) {
					 prefix = generatePrefix(namespace);

					 xmlWriter.writeStartElement(prefix, localName, namespace);
					 xmlWriter.writeNamespace(prefix, namespace);
					 xmlWriter.setPrefix(prefix, namespace);

				 } else {
					 xmlWriter.writeStartElement(namespace, localName);
				 }

			 } else {
				 xmlWriter.writeStartElement(localName);
			 }

			 // add the type details if this is used in a simple type
			 if (serializeType) {
				 String namespacePrefix = registerPrefix(xmlWriter,OPC_NAMESPACE);
				 if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							 namespacePrefix+":qualityBits",
							 xmlWriter);
				 } else {
					 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							 "qualityBits",
							 xmlWriter);
				 }
			 }

			 if (localQualityBits==null) {

				 throw new org.apache.axis2.databinding.ADBException("Value cannot be null !!");

			 }else{

				 xmlWriter.writeCharacters(localQualityBits);

			 }

			 xmlWriter.writeEndElement();



		 }

		 /**
		  * Util method to write an attribute with the ns prefix
		  */
		 private void writeAttribute(String prefix,String namespace,String attName,
				 String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			 if (xmlWriter.getPrefix(namespace) == null) {
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);

			 }

			 xmlWriter.writeAttribute(namespace,attName,attValue);

		 }

		 /**
		  * Util method to write an attribute without the ns prefix
		  */
		 private void writeAttribute(String namespace,String attName,
				 String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			 if (namespace.equals(""))
			 {
				 xmlWriter.writeAttribute(attName,attValue);
			 }
			 else
			 {
				 registerPrefix(xmlWriter, namespace);
				 xmlWriter.writeAttribute(namespace,attName,attValue);
			 }
		 }


		 /**
		  * Util method to write an attribute without the ns prefix
		  */
		 private void writeQNameAttribute(String namespace, String attName,
				 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			 String attributeNamespace = qname.GenericFactory.getNamespaceURI();
			 String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			 if (attributePrefix == null) {
				 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			 }
			 String attributeValue;
			 if (attributePrefix.trim().length() > 0) {
				 attributeValue = attributePrefix + ":" + qname.getLocalPart();
			 } else {
				 attributeValue = qname.getLocalPart();
			 }

			 if (namespace.equals("")) {
				 xmlWriter.writeAttribute(attName, attributeValue);
			 } else {
				 registerPrefix(xmlWriter, namespace);
				 xmlWriter.writeAttribute(namespace, attName, attributeValue);
			 }
		 }
		 /**
		  *  method to handle Qnames
		  */

		 private void writeQName(javax.xml.namespace.QName qname,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			 String namespaceURI = qname.GenericFactory.getNamespaceURI();
			 if (namespaceURI != null) {
				 String prefix = xmlWriter.getPrefix(namespaceURI);
				 if (prefix == null) {
					 prefix = generatePrefix(namespaceURI);
					 xmlWriter.writeNamespace(prefix, namespaceURI);
					 xmlWriter.setPrefix(prefix,namespaceURI);
				 }

				 if (prefix.trim().length() > 0) {
					 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				 } else {
					 // i.e this is the default namespace
					 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				 }

			 } else {
				 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			 }
		 }

		 private void writeQNames(javax.xml.namespace.QName[] qnames,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			 if (qnames != null) {
				 // we have to store this data until last moment since it is not possible to write any
				 // namespace data after writing the charactor data
				 StringBuffer stringToWrite = new StringBuffer();
				 String namespaceURI = null;
				 String prefix = null;

				 for (int i = 0; i < qnames.length; i++) {
					 if (i > 0) {
						 stringToWrite.append(" ");
					 }
					 namespaceURI = qnames[i].GenericFactory.getNamespaceURI();
					 if (namespaceURI != null) {
						 prefix = xmlWriter.getPrefix(namespaceURI);
						 if ((prefix == null) || (prefix.length() == 0)) {
							 prefix = generatePrefix(namespaceURI);
							 xmlWriter.writeNamespace(prefix, namespaceURI);
							 xmlWriter.setPrefix(prefix,namespaceURI);
						 }

						 if (prefix.trim().length() > 0) {
							 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						 } else {
							 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						 }
					 } else {
						 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					 }
				 }
				 xmlWriter.writeCharacters(stringToWrite.toString());
			 }

		 }


		 /**
		  * Register a namespace prefix
		  */
		 private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
			 String prefix = xmlWriter.getPrefix(namespace);

			 if (prefix == null) {
				 prefix = generatePrefix(namespace);

				 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					 prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				 }

				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }

			 return prefix;
		 }



		 /**
		  * databinding method to get an XML representation of this object
		  *
		  */
		 public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				 throws org.apache.axis2.databinding.ADBException{




			 //We can safely assume an element has only one type associated with it
			 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
					 new java.lang.Object[]{
					 org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
					 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localQualityBits)
			 },
			 null);

		 }



		 /**
		  *  Factory class that keeps the parse method
		  */
		 public static class Factory{



			 public static QualityBits fromValue(String value)
					 throws java.lang.IllegalArgumentException {
				 QualityBits enumeration = (QualityBits)

						 _table_.get(value);


				 if (enumeration==null) throw new java.lang.IllegalArgumentException();
				 return enumeration;
			 }
			 public static QualityBits fromString(String value,String namespaceURI)
					 throws java.lang.IllegalArgumentException {
				 try {

					 return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));


				 } catch (java.lang.Exception e) {
					 throw new java.lang.IllegalArgumentException();
				 }
			 }

			 public static QualityBits fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
					 String content) {
				 if (content.indexOf(":") > -1) {
					 String prefix = content.substring(0,content.indexOf(":"));
					 String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
					 return QualityBits.Factory.fromString(content,namespaceUri);
				 } else {
					 return QualityBits.Factory.fromString(content,"");
				 }
			 }


			 /**
			  * static method to create the object
			  * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			  *			 If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			  * Postcondition: If this object is an element, the reader is positioned at its end element
			  *			 If this object is a complex type, the reader is positioned at the end element of its outer element
			  */
			 public static QualityBits parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				 QualityBits object = null;
				 // initialize a hash map to keep values
				 //java.util.Map attributeMapx = new java.util.HashMap();
				 //java.util.List extraAttributeListx = new java.util.ArrayList();


				 int event;
				 String nillableValue = null;
				 String prefix ="";
				 String namespaceuri ="";
				 try {

					 while (!reader.isStartElement() && !reader.isEndElement())
						 reader.next();




					 // Note all attributes that were handled. Used to differ normal attributes
					 // from anyAttributes.
					 java.util.Vector handledAttributes = new java.util.Vector();



					 while(!reader.isEndElement()) {
						 if (reader.isStartElement()  || reader.hasText()) {

							 String content = reader.getElementText();

							 if (content.indexOf(":") > 0) {
								 // this seems to be a Qname so find the namespace and send
								 prefix = content.substring(0, content.indexOf(":"));
								 namespaceuri = reader.getNamespaceURI(prefix);
								 object = QualityBits.Factory.fromString(content,namespaceuri);
							 } else {
								 // this seems to be not a qname send and empty namespace incase of it is
								 // check is done in fromString method
								 object = QualityBits.Factory.fromString(content,"");
							 }


						 } else {
							 reader.next();
						 }  
					 }  // end of while loop




				 } catch (javax.xml.stream.XMLStreamException e) {
					 throw new java.lang.Exception(e);
				 }

				 return object;
			 }

		 }//end of factory class



	}
	
	
	public static class LimitBits
	implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				OPC_NAMESPACE,
				"limitBits",
				OPC_PREFIX);



		private static String generatePrefix(String namespace) {
			if(namespace.equals(OPC_NAMESPACE)) {
				return OPC_PREFIX;
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}



		/**
		 * field for LimitBits
		 */


		protected String localLimitBits ;

		private static java.util.HashMap _table_ = new java.util.HashMap();

		// Constructor

		protected LimitBits(String value, boolean isRegisterValue) {
			localLimitBits = value;
			if (isRegisterValue) {

				_table_.put(localLimitBits, this);

			}

		}

		public static final String _none =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("none");

		public static final String _low =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("low");

		public static final String _high =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("high");

		public static final String _constant =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString("constant");

		public static final LimitBits none =
				new LimitBits(_none,true);

		public static final LimitBits low =
				new LimitBits(_low,true);

		public static final LimitBits high =
				new LimitBits(_high,true);

		public static final LimitBits constant =
				new LimitBits(_constant,true);


		public String getValue() { return localLimitBits;}

		public boolean equals(java.lang.Object obj) {return (obj == this);}
		public int hashCode() { return toString().hashCode();}
		public String toString() {

			return localLimitBits.toString();


		}



		/**
		 * isReaderMTOMAware
		 * @return true if the reader supports MTOM
		 */
		 public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
			 boolean isReaderMTOMAware = false;

			 try{
				 isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			 }catch(java.lang.IllegalArgumentException e) {
				 isReaderMTOMAware = false;
			 }
			 return isReaderMTOMAware;
		 }


		 /**
		  *
		  * @param parentQName
		  * @param factory
		  * @return org.apache.axiom.om.OMElement
		  */
		 public org.apache.axiom.om.OMElement getOMElement (
				 final javax.xml.namespace.QName parentQName,
				 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			 org.apache.axiom.om.OMDataSource dataSource =
					 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME) {

				 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
					 LimitBits.this.serialize(MY_QNAME,factory,xmlWriter);
				 }
			 };
			 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
					 MY_QNAME,factory,dataSource);

		 }

		 public void serialize(final javax.xml.namespace.QName parentQName,
				 final org.apache.axiom.om.OMFactory factory,
				 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
						 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			 serialize(parentQName,factory,xmlWriter,false);
		 }

		 public void serialize(final javax.xml.namespace.QName parentQName,
				 final org.apache.axiom.om.OMFactory factory,
				 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
				 boolean serializeType)
						 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{


			 //We can safely assume an element has only one type associated with it

			 String namespace = parentQName.GenericFactory.getNamespaceURI();
			 String localName = parentQName.getLocalPart();

			 if (! namespace.equals("")) {
				 String prefix = xmlWriter.getPrefix(namespace);

				 if (prefix == null) {
					 prefix = generatePrefix(namespace);

					 xmlWriter.writeStartElement(prefix, localName, namespace);
					 xmlWriter.writeNamespace(prefix, namespace);
					 xmlWriter.setPrefix(prefix, namespace);

				 } else {
					 xmlWriter.writeStartElement(namespace, localName);
				 }

			 } else {
				 xmlWriter.writeStartElement(localName);
			 }

			 // add the type details if this is used in a simple type
			 if (serializeType) {
				 String namespacePrefix = registerPrefix(xmlWriter,OPC_NAMESPACE);
				 if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							 namespacePrefix+":limitBits",
							 xmlWriter);
				 } else {
					 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							 "limitBits",
							 xmlWriter);
				 }
			 }

			 if (localLimitBits==null) {

				 throw new org.apache.axis2.databinding.ADBException("Value cannot be null !!");

			 }else{

				 xmlWriter.writeCharacters(localLimitBits);

			 }

			 xmlWriter.writeEndElement();



		 }

		 /**
		  * Util method to write an attribute with the ns prefix
		  */
		 private void writeAttribute(String prefix,String namespace,String attName,
				 String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			 if (xmlWriter.getPrefix(namespace) == null) {
				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);

			 }

			 xmlWriter.writeAttribute(namespace,attName,attValue);

		 }

		 /**
		  * Util method to write an attribute without the ns prefix
		  */
		 private void writeAttribute(String namespace,String attName,
				 String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			 if (namespace.equals(""))
			 {
				 xmlWriter.writeAttribute(attName,attValue);
			 }
			 else
			 {
				 registerPrefix(xmlWriter, namespace);
				 xmlWriter.writeAttribute(namespace,attName,attValue);
			 }
		 }


		 /**
		  * Util method to write an attribute without the ns prefix
		  */
		 private void writeQNameAttribute(String namespace, String attName,
				 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			 String attributeNamespace = qname.GenericFactory.getNamespaceURI();
			 String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			 if (attributePrefix == null) {
				 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			 }
			 String attributeValue;
			 if (attributePrefix.trim().length() > 0) {
				 attributeValue = attributePrefix + ":" + qname.getLocalPart();
			 } else {
				 attributeValue = qname.getLocalPart();
			 }

			 if (namespace.equals("")) {
				 xmlWriter.writeAttribute(attName, attributeValue);
			 } else {
				 registerPrefix(xmlWriter, namespace);
				 xmlWriter.writeAttribute(namespace, attName, attributeValue);
			 }
		 }
		 /**
		  *  method to handle Qnames
		  */

		 private void writeQName(javax.xml.namespace.QName qname,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			 String namespaceURI = qname.GenericFactory.getNamespaceURI();
			 if (namespaceURI != null) {
				 String prefix = xmlWriter.getPrefix(namespaceURI);
				 if (prefix == null) {
					 prefix = generatePrefix(namespaceURI);
					 xmlWriter.writeNamespace(prefix, namespaceURI);
					 xmlWriter.setPrefix(prefix,namespaceURI);
				 }

				 if (prefix.trim().length() > 0) {
					 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				 } else {
					 // i.e this is the default namespace
					 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				 }

			 } else {
				 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			 }
		 }

		 private void writeQNames(javax.xml.namespace.QName[] qnames,
				 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			 if (qnames != null) {
				 // we have to store this data until last moment since it is not possible to write any
				 // namespace data after writing the charactor data
				 StringBuffer stringToWrite = new StringBuffer();
				 String namespaceURI = null;
				 String prefix = null;

				 for (int i = 0; i < qnames.length; i++) {
					 if (i > 0) {
						 stringToWrite.append(" ");
					 }
					 namespaceURI = qnames[i].GenericFactory.getNamespaceURI();
					 if (namespaceURI != null) {
						 prefix = xmlWriter.getPrefix(namespaceURI);
						 if ((prefix == null) || (prefix.length() == 0)) {
							 prefix = generatePrefix(namespaceURI);
							 xmlWriter.writeNamespace(prefix, namespaceURI);
							 xmlWriter.setPrefix(prefix,namespaceURI);
						 }

						 if (prefix.trim().length() > 0) {
							 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						 } else {
							 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						 }
					 } else {
						 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					 }
				 }
				 xmlWriter.writeCharacters(stringToWrite.toString());
			 }

		 }


		 /**
		  * Register a namespace prefix
		  */
		 private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
			 String prefix = xmlWriter.getPrefix(namespace);

			 if (prefix == null) {
				 prefix = generatePrefix(namespace);

				 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					 prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				 }

				 xmlWriter.writeNamespace(prefix, namespace);
				 xmlWriter.setPrefix(prefix, namespace);
			 }

			 return prefix;
		 }



		 /**
		  * databinding method to get an XML representation of this object
		  *
		  */
		 public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				 throws org.apache.axis2.databinding.ADBException{




			 //We can safely assume an element has only one type associated with it
			 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
					 new java.lang.Object[]{
					 org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
					 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLimitBits)
			 },
			 null);

		 }



		 /**
		  *  Factory class that keeps the parse method
		  */
		 public static class Factory{



			 public static LimitBits fromValue(String value)
					 throws java.lang.IllegalArgumentException {
				 LimitBits enumeration = (LimitBits)

						 _table_.get(value);


				 if (enumeration==null) throw new java.lang.IllegalArgumentException();
				 return enumeration;
			 }
			 public static LimitBits fromString(String value,String namespaceURI)
					 throws java.lang.IllegalArgumentException {
				 try {

					 return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));


				 } catch (java.lang.Exception e) {
					 throw new java.lang.IllegalArgumentException();
				 }
			 }

			 public static LimitBits fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
					 String content) {
				 if (content.indexOf(":") > -1) {
					 String prefix = content.substring(0,content.indexOf(":"));
					 String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
					 return LimitBits.Factory.fromString(content,namespaceUri);
				 } else {
					 return LimitBits.Factory.fromString(content,"");
				 }
			 }


			 /**
			  * static method to create the object
			  * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			  *			 If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			  * Postcondition: If this object is an element, the reader is positioned at its end element
			  *			 If this object is a complex type, the reader is positioned at the end element of its outer element
			  */
			 public static LimitBits parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				 LimitBits object = null;
				 // initialize a hash map to keep values
				 java.util.Map attributeMap = new java.util.HashMap();
				 java.util.List extraAttributeList = new java.util.ArrayList();


				 int event;
				 String nillableValue = null;
				 String prefix ="";
				 String namespaceuri ="";
				 try {

					 while (!reader.isStartElement() && !reader.isEndElement())
						 reader.next();




					 // Note all attributes that were handled. Used to differ normal attributes
					 // from anyAttributes.
					 java.util.Vector handledAttributes = new java.util.Vector();



					 while(!reader.isEndElement()) {
						 if (reader.isStartElement()  || reader.hasText()) {

							 String content = reader.getElementText();

							 if (content.indexOf(":") > 0) {
								 // this seems to be a Qname so find the namespace and send
								 prefix = content.substring(0, content.indexOf(":"));
								 namespaceuri = reader.getNamespaceURI(prefix);
								 object = LimitBits.Factory.fromString(content,namespaceuri);
							 } else {
								 // this seems to be not a qname send and empty namespace incase of it is
								 // check is done in fromString method
								 object = LimitBits.Factory.fromString(content,"");
							 }


						 } else {
							 reader.next();
						 }  
					 }  // end of while loop




				 } catch (javax.xml.stream.XMLStreamException e) {
					 throw new java.lang.Exception(e);
				 }

				 return object;
			 }

		 }//end of factory class



	}

	
	
	public static class OPCQuality
	implements org.apache.axis2.databinding.ADBBean{
		/* This type was generated from the piece of schema that had
			 name = OPCQuality
			 Namespace URI = http://opcfoundation.org/webservices/XMLDA/1.0/
			 Namespace Prefix = ns1
		 */


		private static String generatePrefix(String namespace) {
			if(namespace.equals(OPC_NAMESPACE)) {
				return OPC_PREFIX;
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}



		/**
		 * field for QualityField
		 * This was an Attribute!
		 */


		protected QualityBits localQualityField ;


		/**
		 * Auto generated getter method
		 * @return QualityBits
		 */
		public  QualityBits getQualityField() {
			return localQualityField;
		}



		/**
		 * Auto generated setter method
		 * @param param QualityField
		 */
		public void setQualityField(QualityBits param) {

			this.localQualityField=param;


		}


		/**
		 * field for LimitField
		 * This was an Attribute!
		 */


		protected LimitBits localLimitField ;


		/**
		 * Auto generated getter method
		 * @return LimitBits
		 */
		public  LimitBits getLimitField() {
			return localLimitField;
		}



		/**
		 * Auto generated setter method
		 * @param param LimitField
		 */
		public void setLimitField(LimitBits param) {

			this.localLimitField=param;


		}


		/**
		 * field for VendorField
		 * This was an Attribute!
		 */


		protected org.apache.axis2.databinding.types.UnsignedByte localVendorField =
				org.apache.axis2.databinding.utils.ConverterUtil.convertToUnsignedByte("0");


		/**
		 * Auto generated getter method
		 * @return org.apache.axis2.databinding.types.UnsignedByte
		 */
		public  org.apache.axis2.databinding.types.UnsignedByte getVendorField() {
			return localVendorField;
		}



		/**
		 * Auto generated setter method
		 * @param param VendorField
		 */
		public void setVendorField(org.apache.axis2.databinding.types.UnsignedByte param) {

			this.localVendorField=param;


		}


		/**
		 * isReaderMTOMAware
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
			boolean isReaderMTOMAware = false;

			try{
				isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}catch(java.lang.IllegalArgumentException e) {
				isReaderMTOMAware = false;
			}
			return isReaderMTOMAware;
		}


		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,parentQName) {

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
					OPCQuality.this.serialize(parentQName,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
					parentQName,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory,
				org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory,
				org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			String prefix = null;
			String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.GenericFactory.getNamespaceURI();

			if ((namespace != null) && (namespace.trim().length() > 0)) {
				String writerPrefix = xmlWriter.getPrefix(namespace);
				if (writerPrefix != null) {
					xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
				} else {
					if (prefix == null) {
						prefix = generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
					xmlWriter.writeNamespace(prefix, namespace);
					xmlWriter.setPrefix(prefix, namespace);
				}
			} else {
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if (serializeType) {


				String namespacePrefix = registerPrefix(xmlWriter,OPC_NAMESPACE);
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":OPCQuality",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"OPCQuality",
							xmlWriter);
				}


			}


			if (localQualityField != null) {
				writeAttribute("",
						"QualityField",
						localQualityField.toString(), xmlWriter);
			}


			if (localLimitField != null) {
				writeAttribute("",
						"LimitField",
						localLimitField.toString(), xmlWriter);
			}

			if (localVendorField != null) {

				writeAttribute("",
						"VendorField",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localVendorField), xmlWriter);


			}

			xmlWriter.writeEndElement();


		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(String prefix,String namespace,String attName,
				String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(String namespace,String attName,
				String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals(""))
			{
				xmlWriter.writeAttribute(attName,attValue);
			}
			else
			{
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(String namespace, String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			String attributeNamespace = qname.GenericFactory.getNamespaceURI();
			String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			String namespaceURI = qname.GenericFactory.getNamespaceURI();
			if (namespaceURI != null) {
				String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				StringBuffer stringToWrite = new StringBuffer();
				String namespaceURI = null;
				String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].GenericFactory.getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
			String prefix = xmlWriter.getPrefix(namespace);

			if (prefix == null) {
				prefix = generatePrefix(namespace);

				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}

			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();


			attribList.add(
					new javax.xml.namespace.QName("","QualityField"));

			attribList.add(localQualityField.toString());

			attribList.add(
					new javax.xml.namespace.QName("","LimitField"));

			attribList.add(localLimitField.toString());

			attribList.add(
					new javax.xml.namespace.QName("","VendorField"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localVendorField));


			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *			 If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *			 If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static OPCQuality parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				OPCQuality object =
						new OPCQuality();

				int event;
				String nillableValue = null;
				String prefix ="";
				String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null) {
						String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null) {
							String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"OPCQuality".equals(type)) {
								//find namespace for the prefix
								String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (OPCQuality)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();



					// handle attribute "QualityField"
					String tempAttribQualityField =

							reader.getAttributeValue(null,"QualityField");

					if (tempAttribQualityField!=null) {
						String content = tempAttribQualityField;

						object.setQualityField(
								QualityBits.Factory.fromString(reader,tempAttribQualityField));

					} else {

					}
					handledAttributes.add("QualityField");

					// handle attribute "LimitField"
					String tempAttribLimitField =

					reader.getAttributeValue(null,"LimitField");

					if (tempAttribLimitField!=null) {
						String content = tempAttribLimitField;

						object.setLimitField(
								LimitBits.Factory.fromString(reader,tempAttribLimitField));

					} else {

					}
					handledAttributes.add("LimitField");

					// handle attribute "VendorField"
					String tempAttribVendorField =

					reader.getAttributeValue(null,"VendorField");

					if (tempAttribVendorField!=null) {
						String content = tempAttribVendorField;

						object.setVendorField(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToUnsignedByte(tempAttribVendorField));

					} else {

					}
					handledAttributes.add("VendorField");


					reader.next();




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}



	public static class ItemValue
	implements org.apache.axis2.databinding.ADBBean{
		/* This type was generated from the piece of schema that had
			 name = ItemValue
			 Namespace URI = http://opcfoundation.org/webservices/XMLDA/1.0/
			 Namespace Prefix = ns1
		 */


		private static String generatePrefix(String namespace) {
			if(namespace.equals(OPC_NAMESPACE)) {
				return OPC_PREFIX;
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}



		/**
		 * field for DiagnosticInfo
		 */


		protected String localDiagnosticInfo ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localDiagnosticInfoTracker = false ;


		/**
		 * Auto generated getter method
		 * @return String
		 */
		public  String getDiagnosticInfo() {
			return localDiagnosticInfo;
		}



		/**
		 * Auto generated setter method
		 * @param param DiagnosticInfo
		 */
		public void setDiagnosticInfo(String param) {

			if (param != null) {
				//update the setting tracker
				localDiagnosticInfoTracker = true;
			} else {
				localDiagnosticInfoTracker = false;

			}

			this.localDiagnosticInfo=param;


		}


		/**
		 * field for Value
		 */


		protected org.apache.axiom.om.OMElement localValue ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localValueTracker = false ;


		/**
		 * Auto generated getter method
		 * @return org.apache.axiom.om.OMElement
		 */
		public  org.apache.axiom.om.OMElement getValue() {
			return localValue;
		}



		/**
		 * Auto generated setter method
		 * @param param Value
		 */
		public void setValue(org.apache.axiom.om.OMElement param) {

			if (param != null) {
				//update the setting tracker
				localValueTracker = true;
			} else {
				localValueTracker = false;

			}

			this.localValue=param;


		}


		/**
		 * field for Quality
		 */


		protected OPCQuality localQuality ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localQualityTracker = false ;


		/**
		 * Auto generated getter method
		 * @return OPCQuality
		 */
		public  OPCQuality getQuality() {
			return localQuality;
		}



		/**
		 * Auto generated setter method
		 * @param param Quality
		 */
		public void setQuality(OPCQuality param) {

			if (param != null) {
				//update the setting tracker
				localQualityTracker = true;
			} else {
				localQualityTracker = false;

			}

			this.localQuality=param;


		}


		/**
		 * field for ItemPath
		 * This was an Attribute!
		 */


		protected String localItemPath ;


		/**
		 * Auto generated getter method
		 * @return String
		 */
		public  String getItemPath() {
			return localItemPath;
		}



		/**
		 * Auto generated setter method
		 * @param param ItemPath
		 */
		public void setItemPath(String param) {

			this.localItemPath=param;


		}


		/**
		 * field for ItemName
		 * This was an Attribute!
		 */


		protected String localItemName ;


		/**
		 * Auto generated getter method
		 * @return String
		 */
		public  String getItemName() {
			return localItemName;
		}



		/**
		 * Auto generated setter method
		 * @param param ItemName
		 */
		public void setItemName(String param) {

			this.localItemName=param;


		}


		/**
		 * field for ClientItemHandle
		 * This was an Attribute!
		 */


		protected String localClientItemHandle ;


		/**
		 * Auto generated getter method
		 * @return String
		 */
		public  String getClientItemHandle() {
			return localClientItemHandle;
		}



		/**
		 * Auto generated setter method
		 * @param param ClientItemHandle
		 */
		public void setClientItemHandle(String param) {

			this.localClientItemHandle=param;


		}


		/**
		 * field for Timestamp
		 * This was an Attribute!
		 */


		protected java.util.Calendar localTimestamp ;


		/**
		 * Auto generated getter method
		 * @return java.util.Calendar
		 */
		public  java.util.Calendar getTimestamp() {
			return localTimestamp;
		}



		/**
		 * Auto generated setter method
		 * @param param Timestamp
		 */
		public void setTimestamp(java.util.Calendar param) {

			this.localTimestamp=param;


		}


		/**
		 * field for ResultID
		 * This was an Attribute!
		 */


		protected javax.xml.namespace.QName localResultID ;


		/**
		 * Auto generated getter method
		 * @return javax.xml.namespace.QName
		 */
		public  javax.xml.namespace.QName getResultID() {
			return localResultID;
		}



		/**
		 * Auto generated setter method
		 * @param param ResultID
		 */
		public void setResultID(javax.xml.namespace.QName param) {

			this.localResultID=param;


		}


		/**
		 * field for ValueTypeQualifier
		 * This was an Attribute!
		 */


		protected javax.xml.namespace.QName localValueTypeQualifier ;


		/**
		 * Auto generated getter method
		 * @return javax.xml.namespace.QName
		 */
		public  javax.xml.namespace.QName getValueTypeQualifier() {
			return localValueTypeQualifier;
		}



		/**
		 * Auto generated setter method
		 * @param param ValueTypeQualifier
		 */
		public void setValueTypeQualifier(javax.xml.namespace.QName param) {

			this.localValueTypeQualifier=param;


		}


		/**
		 * isReaderMTOMAware
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
			boolean isReaderMTOMAware = false;

			try{
				isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}catch(java.lang.IllegalArgumentException e) {
				isReaderMTOMAware = false;
			}
			return isReaderMTOMAware;
		}


		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,parentQName) {

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
					ItemValue.this.serialize(parentQName,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
					parentQName,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory,
				org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory,
				org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			String prefix = null;
			String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.GenericFactory.getNamespaceURI();

			if ((namespace != null) && (namespace.trim().length() > 0)) {
				String writerPrefix = xmlWriter.getPrefix(namespace);
				if (writerPrefix != null) {
					xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
				} else {
					if (prefix == null) {
						prefix = generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
					xmlWriter.writeNamespace(prefix, namespace);
					xmlWriter.setPrefix(prefix, namespace);
				}
			} else {
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if (serializeType) {


				String namespacePrefix = registerPrefix(xmlWriter,OPC_NAMESPACE);
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":ItemValue",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"ItemValue",
							xmlWriter);
				}


			}

			if (localItemPath != null) {

				writeAttribute("",
						"ItemPath",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localItemPath), xmlWriter);


			}

			if (localItemName != null) {

				writeAttribute("",
						"ItemName",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localItemName), xmlWriter);


			}

			if (localClientItemHandle != null) {

				writeAttribute("",
						"ClientItemHandle",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localClientItemHandle), xmlWriter);


			}

			if (localTimestamp != null) {

				writeAttribute("",
						"Timestamp",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTimestamp), xmlWriter);


			}

			if (localResultID != null) {

				writeQNameAttribute("",
						"ResultID",
						localResultID, xmlWriter);


			}

			if (localValueTypeQualifier != null) {

				writeQNameAttribute("",
						"ValueTypeQualifier",
						localValueTypeQualifier, xmlWriter);


			}
			if (localDiagnosticInfoTracker) {
				namespace = OPC_NAMESPACE;
				if (! namespace.equals("")) {
					prefix = xmlWriter.getPrefix(namespace);

					if (prefix == null) {
						prefix = generatePrefix(namespace);

						xmlWriter.writeStartElement(prefix,"DiagnosticInfo", namespace);
						xmlWriter.writeNamespace(prefix, namespace);
						xmlWriter.setPrefix(prefix, namespace);

					} else {
						xmlWriter.writeStartElement(namespace,"DiagnosticInfo");
					}

				} else {
					xmlWriter.writeStartElement("DiagnosticInfo");
				}


				if (localDiagnosticInfo==null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("DiagnosticInfo cannot be null!!");

				}else{


					xmlWriter.writeCharacters(localDiagnosticInfo);

				}

				xmlWriter.writeEndElement();
			} if (localValueTracker) {
				namespace = OPC_NAMESPACE;
				if (! namespace.equals("")) {
					prefix = xmlWriter.getPrefix(namespace);

					if (prefix == null) {
						prefix = generatePrefix(namespace);

						xmlWriter.writeStartElement(prefix,"Value", namespace);
						xmlWriter.writeNamespace(prefix, namespace);
						xmlWriter.setPrefix(prefix, namespace);

					} else {
						xmlWriter.writeStartElement(namespace,"Value");
					}

				} else {
					xmlWriter.writeStartElement("Value");
				}


				if (localValue==null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("Value cannot be null!!");

				}else{

					localValue.serialize(xmlWriter);

				}

				xmlWriter.writeEndElement();
			} if (localQualityTracker) {
				if (localQuality==null) {
					throw new org.apache.axis2.databinding.ADBException("Quality cannot be null!!");
				}
				localQuality.serialize(new javax.xml.namespace.QName(OPC_NAMESPACE,"Quality"),
						factory,xmlWriter);
			}
			xmlWriter.writeEndElement();


		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(String prefix,String namespace,String attName,
				String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(String namespace,String attName,
				String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals(""))
			{
				xmlWriter.writeAttribute(attName,attValue);
			}
			else
			{
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(String namespace, String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			String attributeNamespace = qname.GenericFactory.getNamespaceURI();
			String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			String namespaceURI = qname.GenericFactory.getNamespaceURI();
			if (namespaceURI != null) {
				String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				StringBuffer stringToWrite = new StringBuffer();
				String namespaceURI = null;
				String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].GenericFactory.getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
			String prefix = xmlWriter.getPrefix(namespace);

			if (prefix == null) {
				prefix = generatePrefix(namespace);

				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}

			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localDiagnosticInfoTracker) {
				elementList.add(new javax.xml.namespace.QName(OPC_NAMESPACE,
						"DiagnosticInfo"));

				if (localDiagnosticInfo != null) {
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDiagnosticInfo));
				} else {
					throw new org.apache.axis2.databinding.ADBException("DiagnosticInfo cannot be null!!");
				}
			} if (localValueTracker) {
				elementList.add(new javax.xml.namespace.QName(OPC_NAMESPACE,
						"Value"));

				if (localValue != null) {
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localValue));
				} else {
					throw new org.apache.axis2.databinding.ADBException("Value cannot be null!!");
				}
			} if (localQualityTracker) {
				elementList.add(new javax.xml.namespace.QName(OPC_NAMESPACE,
						"Quality"));


				if (localQuality==null) {
					throw new org.apache.axis2.databinding.ADBException("Quality cannot be null!!");
				}
				elementList.add(localQuality);
			}
			attribList.add(
					new javax.xml.namespace.QName("","ItemPath"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localItemPath));

			attribList.add(
					new javax.xml.namespace.QName("","ItemName"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localItemName));

			attribList.add(
					new javax.xml.namespace.QName("","ClientItemHandle"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localClientItemHandle));

			attribList.add(
					new javax.xml.namespace.QName("","Timestamp"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTimestamp));

			attribList.add(
					new javax.xml.namespace.QName("","ResultID"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localResultID));

			attribList.add(
					new javax.xml.namespace.QName("","ValueTypeQualifier"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localValueTypeQualifier));


			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *			 If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *			 If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static ItemValue parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				ItemValue object =
						new ItemValue();

				int event;
				String nillableValue = null;
				String prefix ="";
				String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null) {
						String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null) {
							String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"ItemValue".equals(type)) {
								//find namespace for the prefix
								String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (ItemValue)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();



					// handle attribute "ItemPath"
					String tempAttribItemPath =

							reader.getAttributeValue(null,"ItemPath");

					if (tempAttribItemPath!=null) {
						String content = tempAttribItemPath;

						object.setItemPath(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(tempAttribItemPath));

					} else {

					}
					handledAttributes.add("ItemPath");

					// handle attribute "ItemName"
					String tempAttribItemName =

					reader.getAttributeValue(null,"ItemName");

					if (tempAttribItemName!=null) {
						String content = tempAttribItemName;

						object.setItemName(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(tempAttribItemName));

					} else {

					}
					handledAttributes.add("ItemName");

					// handle attribute "ClientItemHandle"
					String tempAttribClientItemHandle =

					reader.getAttributeValue(null,"ClientItemHandle");

					if (tempAttribClientItemHandle!=null) {
						String content = tempAttribClientItemHandle;

						object.setClientItemHandle(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(tempAttribClientItemHandle));

					} else {

					}
					handledAttributes.add("ClientItemHandle");

					// handle attribute "Timestamp"
					String tempAttribTimestamp =

					reader.getAttributeValue(null,"Timestamp");

					if (tempAttribTimestamp!=null) {
						String content = tempAttribTimestamp;

						object.setTimestamp(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(tempAttribTimestamp));

					} else {

					}
					handledAttributes.add("Timestamp");

					// handle attribute "ResultID"
					String tempAttribResultID =

					reader.getAttributeValue(null,"ResultID");

					if (tempAttribResultID!=null) {
						String content = tempAttribResultID;

						int index = tempAttribResultID.indexOf(":");
						if(index > -1) {
							prefix = tempAttribResultID.substring(0,index);
						} else {
							// i.e this is in default namesace
							prefix = "";
						}
						namespaceuri = reader.getNamespaceURI(prefix);

						object.setResultID(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToQName(tempAttribResultID,namespaceuri));

					} else {

					}
					handledAttributes.add("ResultID");

					// handle attribute "ValueTypeQualifier"
					String tempAttribValueTypeQualifier =

							reader.getAttributeValue(null,"ValueTypeQualifier");

					if (tempAttribValueTypeQualifier!=null) {
						String content = tempAttribValueTypeQualifier;

						int index = tempAttribValueTypeQualifier.indexOf(":");
						if(index > -1) {
							prefix = tempAttribValueTypeQualifier.substring(0,index);
						} else {
							// i.e this is in default namesace
							prefix = "";
						}
						namespaceuri = reader.getNamespaceURI(prefix);

						object.setValueTypeQualifier(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToQName(tempAttribValueTypeQualifier,namespaceuri));

					} else {

					}
					handledAttributes.add("ValueTypeQualifier");


					reader.next();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName(OPC_NAMESPACE,"DiagnosticInfo").equals(reader.getName())) {

						String content = reader.getElementText();

						object.setDiagnosticInfo(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					}  // End of if for expected property start element

					else {

					}


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement()) {

						String content = reader.getElementText();


						//System.out.println(reader.getAttributeCount());

						org.apache.axiom.om.OMFactory fac = org.apache.axiom.om.OMAbstractFactory.getOMFactory();
						org.apache.axiom.om.OMNamespace omNs = fac.createOMNamespace(OPC_NAMESPACE, "");
						org.apache.axiom.om.OMElement _valueValue = fac.GenericFactory.createOMElement("Value", omNs);
						_valueValue.addChild(fac.createOMText(_valueValue, content));
						object.setValue(_valueValue);

						reader.next(); 

					}  // End of if for expected property start element

					else {

					}


					while (!reader.isStartElement() && !reader.isEndElement()) { reader.next();}

					if (reader.isStartElement() && new javax.xml.namespace.QName(OPC_NAMESPACE,"Quality").equals(reader.getName())) {

						object.setQuality(OPCQuality.Factory.parse(reader));

						reader.next();

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}

	public static class ReadRequestItemList
	implements org.apache.axis2.databinding.ADBBean{
		/* This type was generated from the piece of schema that had
			 name = ReadRequestItemList
			 Namespace URI = http://opcfoundation.org/webservices/XMLDA/1.0/
			 Namespace Prefix = ns1
		 */


		private static String generatePrefix(String namespace) {
			if(namespace.equals(OPC_NAMESPACE)) {
				return OPC_PREFIX;
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}



		/**
		 * field for Items
		 * This was an Array!
		 */


		protected ReadRequestItem[] localItems ;

		/*  This tracker boolean wil be used to detect whether the user called the set method
		 *   for this attribute. It will be used to determine whether to include this field
		 *   in the serialized XML
		 */
		protected boolean localItemsTracker = false ;


		/**
		 * Auto generated getter method
		 * @return ReadRequestItem[]
		 */
		public  ReadRequestItem[] getItems() {
			return localItems;
		}






		/**
		 * validate the array for Items
		 */
		protected void validateItems(ReadRequestItem[] param) {

		}


		/**
		 * Auto generated setter method
		 * @param param Items
		 */
		public void setItems(ReadRequestItem[] param) {

			validateItems(param);


			if (param != null) {
				//update the setting tracker
				localItemsTracker = true;
			} else {
				localItemsTracker = false;

			}

			this.localItems=param;
		}



		/**
		 * Auto generated add method for the array for convenience
		 * @param param ReadRequestItem
		 */
		public void addItems(ReadRequestItem param) {
			if (localItems == null) {
				localItems = new ReadRequestItem[]{};
			}


			//update the setting tracker
			localItemsTracker = true;


			java.util.List list =
					org.apache.axis2.databinding.utils.ConverterUtil.toList(localItems);
			list.add(param);
			this.localItems =
					(ReadRequestItem[])list.toArray(
							new ReadRequestItem[list.size()]);

		}


		/**
		 * field for ItemPath
		 * This was an Attribute!
		 */


		protected String localItemPath ;


		/**
		 * Auto generated getter method
		 * @return String
		 */
		public  String getItemPath() {
			return localItemPath;
		}



		/**
		 * Auto generated setter method
		 * @param param ItemPath
		 */
		public void setItemPath(String param) {

			this.localItemPath=param;


		}


		/**
		 * field for ReqType
		 * This was an Attribute!
		 */


		protected javax.xml.namespace.QName localReqType ;


		/**
		 * Auto generated getter method
		 * @return javax.xml.namespace.QName
		 */
		public  javax.xml.namespace.QName getReqType() {
			return localReqType;
		}



		/**
		 * Auto generated setter method
		 * @param param ReqType
		 */
		public void setReqType(javax.xml.namespace.QName param) {

			this.localReqType=param;


		}


		/**
		 * field for MaxAge
		 * This was an Attribute!
		 */


		protected int localMaxAge ;


		/**
		 * Auto generated getter method
		 * @return int
		 */
		public  int getMaxAge() {
			return localMaxAge;
		}



		/**
		 * Auto generated setter method
		 * @param param MaxAge
		 */
		public void setMaxAge(int param) {

			this.localMaxAge=param;


		}


		/**
		 * isReaderMTOMAware
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
			boolean isReaderMTOMAware = false;

			try{
				isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}catch(java.lang.IllegalArgumentException e) {
				isReaderMTOMAware = false;
			}
			return isReaderMTOMAware;
		}


		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement (
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



			org.apache.axiom.om.OMDataSource dataSource =
					new org.apache.axis2.databinding.ADBDataSource(this,parentQName) {

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
					ReadRequestItemList.this.serialize(parentQName,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
					parentQName,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory,
				org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory,
				org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
				boolean serializeType)
						throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




			String prefix = null;
			String namespace = null;


			prefix = parentQName.getPrefix();
			namespace = parentQName.GenericFactory.getNamespaceURI();

			if ((namespace != null) && (namespace.trim().length() > 0)) {
				String writerPrefix = xmlWriter.getPrefix(namespace);
				if (writerPrefix != null) {
					xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
				} else {
					if (prefix == null) {
						prefix = generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
					xmlWriter.writeNamespace(prefix, namespace);
					xmlWriter.setPrefix(prefix, namespace);
				}
			} else {
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if (serializeType) {


				String namespacePrefix = registerPrefix(xmlWriter,OPC_NAMESPACE);
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							namespacePrefix+":ReadRequestItemList",
							xmlWriter);
				} else {
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
							"ReadRequestItemList",
							xmlWriter);
				}


			}

			if (localItemPath != null) {

				writeAttribute("",
						"ItemPath",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localItemPath), xmlWriter);


			}

			if (localReqType != null) {

				writeQNameAttribute("",
						"ReqType",
						localReqType, xmlWriter);


			}

			if (localMaxAge!=java.lang.Integer.MIN_VALUE) {

				writeAttribute("",
						"MaxAge",
						org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMaxAge), xmlWriter);


			}
			if (localItemsTracker) {
				if (localItems!=null) {
					for (int i = 0;i < localItems.length;i++) {
						if (localItems[i] != null) {
							localItems[i].serialize(new javax.xml.namespace.QName(OPC_NAMESPACE,"Items"),
									factory,xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException("Items cannot be null!!");

				}
			}
			xmlWriter.writeEndElement();


		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(String prefix,String namespace,String attName,
				String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(String namespace,String attName,
				String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if (namespace.equals(""))
			{
				xmlWriter.writeAttribute(attName,attValue);
			}
			else
			{
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}


		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(String namespace, String attName,
				javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			String attributeNamespace = qname.GenericFactory.getNamespaceURI();
			String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}
		/**
		 *  method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
			String namespaceURI = qname.GenericFactory.getNamespaceURI();
			if (namespaceURI != null) {
				String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not possible to write any
				// namespace data after writing the charactor data
				StringBuffer stringToWrite = new StringBuffer();
				String namespaceURI = null;
				String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].GenericFactory.getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}


		/**
		 * Register a namespace prefix
		 */
		private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
			String prefix = xmlWriter.getPrefix(namespace);

			if (prefix == null) {
				prefix = generatePrefix(namespace);

				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}

			return prefix;
		}



		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException{



			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localItemsTracker) {
				if (localItems!=null) {
					for (int i = 0;i < localItems.length;i++) {

						if (localItems[i] != null) {
							elementList.add(new javax.xml.namespace.QName(OPC_NAMESPACE,
									"Items"));
							elementList.add(localItems[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException("Items cannot be null!!");

				}

			}
			attribList.add(
					new javax.xml.namespace.QName("","ItemPath"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localItemPath));

			attribList.add(
					new javax.xml.namespace.QName("","ReqType"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReqType));

			attribList.add(
					new javax.xml.namespace.QName("","MaxAge"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMaxAge));


			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



		}



		/**
		 *  Factory class that keeps the parse method
		 */
		public static class Factory{




			/**
			 * static method to create the object
			 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
			 *			 If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is positioned at its end element
			 *			 If this object is a complex type, the reader is positioned at the end element of its outer element
			 */
			public static ReadRequestItemList parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				ReadRequestItemList object =
						new ReadRequestItemList();

				int event;
				String nillableValue = null;
				String prefix ="";
				String namespaceuri ="";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();


					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null) {
						String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
								"type");
						if (fullTypeName!=null) {
							String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix==null?"":nsPrefix;

							String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

							if (!"ReadRequestItemList".equals(type)) {
								//find namespace for the prefix
								String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (ReadRequestItemList)ExtensionMapper.getTypeObject(
										nsUri,type,reader);
							}


						}


					}




					// Note all attributes that were handled. Used to differ normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();



					// handle attribute "ItemPath"
					String tempAttribItemPath =

							reader.getAttributeValue(null,"ItemPath");

					if (tempAttribItemPath!=null) {
						String content = tempAttribItemPath;

						object.setItemPath(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(tempAttribItemPath));

					} else {

					}
					handledAttributes.add("ItemPath");

					// handle attribute "ReqType"
					String tempAttribReqType =

					reader.getAttributeValue(null,"ReqType");

					if (tempAttribReqType!=null) {
						String content = tempAttribReqType;

						int index = tempAttribReqType.indexOf(":");
						if(index > -1) {
							prefix = tempAttribReqType.substring(0,index);
						} else {
							// i.e this is in default namesace
							prefix = "";
						}
						namespaceuri = reader.getNamespaceURI(prefix);

						object.setReqType(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToQName(tempAttribReqType,namespaceuri));

					} else {

					}
					handledAttributes.add("ReqType");

					// handle attribute "MaxAge"
					String tempAttribMaxAge =

							reader.getAttributeValue(null,"MaxAge");

					if (tempAttribMaxAge!=null) {
						String content = tempAttribMaxAge;

						object.setMaxAge(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(tempAttribMaxAge));

					} else {

						object.setMaxAge(java.lang.Integer.MIN_VALUE);

					}
					handledAttributes.add("MaxAge");


					reader.next();

					java.util.ArrayList list1 = new java.util.ArrayList();


					while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

					if (reader.isStartElement() && new javax.xml.namespace.QName(OPC_NAMESPACE,"Items").equals(reader.getName())) {



						// Process the array and step past its final element's end.
						list1.add(ReadRequestItem.Factory.parse(reader));

						//loop until we find a start element that is not part of this array
						boolean loopDone1 = false;
						while(!loopDone1) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								//two continuous end elements means we are exiting the xml structure
								loopDone1 = true;
							} else {
								if (new javax.xml.namespace.QName(OPC_NAMESPACE,"Items").equals(reader.getName())) {
									list1.add(ReadRequestItem.Factory.parse(reader));

								}else{
									loopDone1 = true;
								}
							}
						}
						// call the converter utility  to convert and set the array

						object.setItems((ReadRequestItem[])
								org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
										ReadRequestItem.class,
										list1));

					}  // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());




				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}//end of factory class



	}


	private  org.apache.axiom.om.OMElement  toOM(Read param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(Read.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}

	private  org.apache.axiom.om.OMElement  toOM(ReadResponse param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(ReadResponse.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}

	private  org.apache.axiom.om.OMElement  toOM(Write param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(Write.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}

	private  org.apache.axiom.om.OMElement  toOM(WriteResponse param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(WriteResponse.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}


	private  org.apache.axiom.om.OMElement  toOM(Browse param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(Browse.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}

	private  org.apache.axiom.om.OMElement  toOM(BrowseResponse param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault {


		try{
			return param.getOMElement(BrowseResponse.MY_QNAME,
					org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch(org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}


	private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, Read param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault{


		try{

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody().addChild(param.getOMElement(Read.MY_QNAME,factory));
			return emptyEnvelope;
		} catch(org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}


	/* methods to provide back word compatibility */



	private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, Write param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault{


		try{

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody().addChild(param.getOMElement(Write.MY_QNAME,factory));
			return emptyEnvelope;
		} catch(org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}


	/* methods to provide back word compatibility */




	/* methods to provide back word compatibility */



	private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, Browse param, boolean optimizeContent)
			throws org.apache.axis2.AxisFault{


		try{

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody().addChild(param.getOMElement(Browse.MY_QNAME,factory));
			return emptyEnvelope;
		} catch(org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}


	}


	/* methods to provide back word compatibility */




	/**
	 *  get the default envelope
	 */
	 private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory) {
		 return factory.getDefaultEnvelope();
	 }


	 private  java.lang.Object fromOM(
			 org.apache.axiom.om.OMElement param,
			 java.lang.Class type,
			 java.util.Map extraNamespaces) throws org.apache.axis2.AxisFault{

		 try {

			 if (Read.class.equals(type)) {

				 return Read.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			 }

			 if (ReadResponse.class.equals(type)) {

				 return ReadResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			 }

			 if (Write.class.equals(type)) {

				 return Write.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			 }

			 if (WriteResponse.class.equals(type)) {

				 return WriteResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			 }


			 if (Browse.class.equals(type)) {

				 return Browse.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			 }

			 if (BrowseResponse.class.equals(type)) {

				 return BrowseResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());


			 }

		 } catch (java.lang.Exception e) {
			 throw org.apache.axis2.AxisFault.makeFault(e);
		 }
		 return null;
	 }




}
