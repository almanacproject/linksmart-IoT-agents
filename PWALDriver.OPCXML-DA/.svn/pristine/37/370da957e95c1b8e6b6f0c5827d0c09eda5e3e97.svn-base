package eu.ebbits.pwal.impl.driver.opcxmlda.stub;

//http://192.168.87.101/OPCXMLServer/sopcweb.asmx
public class QualityBits extends ADBBeanImplementation {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	protected String getClassName() {
		return this.getClass().getSimpleName();
	}
	
	
	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
			"http://opcfoundation.org/webservices/XMLDA/1.0/",
			"qualityBits",
			"ns1");


	/**
	 * field for QualityBits
	 */


	protected String localQualityBits ;

	private static java.util.HashMap _table_ = new java.util.HashMap();

	// Constructor

	protected QualityBits(String value, boolean isRegisterValue) {
		localQualityBits = value;
		if (isRegisterValue) {

			_table_.put(localQualityBits, this);

		}

	}

	public static final String _bad =
			org.apache.axis2.databinding.utils.ConverterUtil.convertToString("bad");

	public static final String _badConfigurationError =
			org.apache.axis2.databinding.utils.ConverterUtil.convertToString("badConfigurationError");

	public static final String _badNotConnected =
			org.apache.axis2.databinding.utils.ConverterUtil.convertToString("badNotConnected");

	public static final String _badDeviceFailure =
			org.apache.axis2.databinding.utils.ConverterUtil.convertToString("badDeviceFailure");

	public static final String _badSensorFailure =
			org.apache.axis2.databinding.utils.ConverterUtil.convertToString("badSensorFailure");

	public static final String _badLastKnownValue =
			org.apache.axis2.databinding.utils.ConverterUtil.convertToString("badLastKnownValue");

	public static final String _badCommFailure =
			org.apache.axis2.databinding.utils.ConverterUtil.convertToString("badCommFailure");

	public static final String _badOutOfService =
			org.apache.axis2.databinding.utils.ConverterUtil.convertToString("badOutOfService");

	public static final String _badWaitingForInitialData =
			org.apache.axis2.databinding.utils.ConverterUtil.convertToString("badWaitingForInitialData");

	public static final String _uncertain =
			org.apache.axis2.databinding.utils.ConverterUtil.convertToString("uncertain");

	public static final String _uncertainLastUsableValue =
			org.apache.axis2.databinding.utils.ConverterUtil.convertToString("uncertainLastUsableValue");

	public static final String _uncertainSensorNotAccurate =
			org.apache.axis2.databinding.utils.ConverterUtil.convertToString("uncertainSensorNotAccurate");

	public static final String _uncertainEUExceeded =
			org.apache.axis2.databinding.utils.ConverterUtil.convertToString("uncertainEUExceeded");

	public static final String _uncertainSubNormal =
			org.apache.axis2.databinding.utils.ConverterUtil.convertToString("uncertainSubNormal");

	public static final String _good =
			org.apache.axis2.databinding.utils.ConverterUtil.convertToString("good");

	public static final String _goodLocalOverride =
			org.apache.axis2.databinding.utils.ConverterUtil.convertToString("goodLocalOverride");

	public static final QualityBits bad =
			new QualityBits(_bad,true);

	public static final QualityBits badConfigurationError =
			new QualityBits(_badConfigurationError,true);

	public static final QualityBits badNotConnected =
			new QualityBits(_badNotConnected,true);

	public static final QualityBits badDeviceFailure =
			new QualityBits(_badDeviceFailure,true);

	public static final QualityBits badSensorFailure =
			new QualityBits(_badSensorFailure,true);

	public static final QualityBits badLastKnownValue =
			new QualityBits(_badLastKnownValue,true);

	public static final QualityBits badCommFailure =
			new QualityBits(_badCommFailure,true);

	public static final QualityBits badOutOfService =
			new QualityBits(_badOutOfService,true);

	public static final QualityBits badWaitingForInitialData =
			new QualityBits(_badWaitingForInitialData,true);

	public static final QualityBits uncertain =
			new QualityBits(_uncertain,true);

	public static final QualityBits uncertainLastUsableValue =
			new QualityBits(_uncertainLastUsableValue,true);

	public static final QualityBits uncertainSensorNotAccurate =
			new QualityBits(_uncertainSensorNotAccurate,true);

	public static final QualityBits uncertainEUExceeded =
			new QualityBits(_uncertainEUExceeded,true);

	public static final QualityBits uncertainSubNormal =
			new QualityBits(_uncertainSubNormal,true);

	public static final QualityBits good =
			new QualityBits(_good,true);

	public static final QualityBits goodLocalOverride =
			new QualityBits(_goodLocalOverride,true);


	public String getValue() { return localQualityBits;}

	public boolean equals(java.lang.Object obj) {return (obj == this);}
	public int hashCode() { return toString().hashCode();}
	public String toString() {

		return localQualityBits.toString();


	}



	protected void writeAttributes(org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter, String prefix, String namespace) 
			throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
		 if (localQualityBits==null) {
			 throw new org.apache.axis2.databinding.ADBException("Value cannot be null !!");
		 }else{
			 xmlWriter.writeCharacters(localQualityBits);
		 }
		 xmlWriter.writeEndElement();
	 }



	 /**
	  * databinding method to get an XML representation of this object
	  *
	  */
	 public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
			 throws org.apache.axis2.databinding.ADBException{

		 //We can safely assume an element has only one type associated with it
		 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
				 new java.lang.Object[]{
				 org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
				 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localQualityBits)
		 },
		 null);
	 }



	 /**
	  *  Factory class that keeps the parse method
	  */
	 public static class Factory extends GenericFactory {



		 public static QualityBits fromValue(String value)
				 throws java.lang.IllegalArgumentException {
			 QualityBits enumeration = (QualityBits)

					 _table_.get(value);


			 if (enumeration==null) throw new java.lang.IllegalArgumentException();
			 return enumeration;
		 }
		 public static QualityBits fromString(String value,String namespaceURI)
				 throws java.lang.IllegalArgumentException {
			 try {

				 return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));


			 } catch (java.lang.Exception e) {
				 throw new java.lang.IllegalArgumentException();
			 }
		 }

		 public static QualityBits fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
				 String content) {
			 if (content.indexOf(":") > -1) {
				 String prefix = content.substring(0,content.indexOf(":"));
				 String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
				 return QualityBits.Factory.fromString(content,namespaceUri);
			 } else {
				 return QualityBits.Factory.fromString(content,"");
			 }
		 }


		 /**
		  * static method to create the object
		  * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
		  *			 If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
		  * Postcondition: If this object is an element, the reader is positioned at its end element
		  *			 If this object is a complex type, the reader is positioned at the end element of its outer element
		  */
		 public static QualityBits parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
			 QualityBits object = null;
			 // initialize a hash map to keep values
			 //java.util.Map attributeMapx = new java.util.HashMap();
			 //java.util.List extraAttributeListx = new java.util.ArrayList();
			 String prefix ="";
			 String namespaceuri ="";
			 try {
				 goToNextStartElement(reader);
				 while(!reader.isEndElement()) {
					 if (reader.isStartElement()  || reader.hasText()) {
						 String content = reader.getElementText();
						 if (content.indexOf(":") > 0) {
							 // this seems to be a Qname so find the namespace and send
							 prefix = content.substring(0, content.indexOf(":"));
							 namespaceuri = reader.getNamespaceURI(prefix);
							 object = QualityBits.Factory.fromString(content,namespaceuri);
						 } else {
							 // this seems to be not a qname send and empty namespace incase of it is
							 // check is done in fromString method
							 object = QualityBits.Factory.fromString(content,"");
						 }
					 } else {
						 reader.next();
					 }  
				 }  // end of while loop
			 } catch (javax.xml.stream.XMLStreamException e) {
				 throw new java.lang.Exception(e);
			 }
			 return object;
		 }
	 }//end of factory class
}