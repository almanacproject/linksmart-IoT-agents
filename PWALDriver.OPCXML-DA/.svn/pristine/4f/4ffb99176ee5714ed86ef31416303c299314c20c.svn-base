package eu.ebbits.pwal.impl.driver.opcxmlda.stub;


public class ServerState extends ADBBeanImplementation {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
			"http://opcfoundation.org/webservices/XMLDA/1.0/",
			"serverState",
			"ns1");

	protected String getClassName() {
		return this.getClass().getSimpleName();
	}
	
	
	/**
	 * field for ServerState
	 */


	protected String localServerState ;

	private static java.util.HashMap _table_ = new java.util.HashMap();

	// Constructor

	protected ServerState(String value, boolean isRegisterValue) {
		localServerState = value;
		if (isRegisterValue) {

			_table_.put(localServerState, this);

		}

	}

	public static final String _running =
			org.apache.axis2.databinding.utils.ConverterUtil.convertToString("running");

	public static final String _failed =
			org.apache.axis2.databinding.utils.ConverterUtil.convertToString("failed");

	public static final String _noConfig =
			org.apache.axis2.databinding.utils.ConverterUtil.convertToString("noConfig");

	public static final String _suspended =
			org.apache.axis2.databinding.utils.ConverterUtil.convertToString("suspended");

	public static final String _test =
			org.apache.axis2.databinding.utils.ConverterUtil.convertToString("test");

	public static final String _commFault =
			org.apache.axis2.databinding.utils.ConverterUtil.convertToString("commFault");

	public static final ServerState running =
			new ServerState(_running,true);

	public static final ServerState failed =
			new ServerState(_failed,true);

	public static final ServerState noConfig =
			new ServerState(_noConfig,true);

	public static final ServerState suspended =
			new ServerState(_suspended,true);

	public static final ServerState test =
			new ServerState(_test,true);

	public static final ServerState commFault =
			new ServerState(_commFault,true);


	public String getValue() { return localServerState;}

	public boolean equals(java.lang.Object obj) {return (obj == this);}
	public int hashCode() { return toString().hashCode();}
	public String toString() {

		return localServerState.toString();


	}

	 /**
	  *
	  * @param parentQName
	  * @param factory
	  * @return org.apache.axiom.om.OMElement
	  */
	 public org.apache.axiom.om.OMElement getOMElement (
			 final javax.xml.namespace.QName parentQName,
			 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



		 org.apache.axiom.om.OMDataSource dataSource =
				 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME) {

			 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
				 ServerState.this.serialize(MY_QNAME,factory,xmlWriter);
			 }
		 };
		 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
				 MY_QNAME,factory,dataSource);

	 }

		protected void writeAttributes(org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter, String prefix, String namespace) 
				throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
		 if (localServerState==null) {
			 throw new org.apache.axis2.databinding.ADBException("Value cannot be null !!");
		 }else{
			 xmlWriter.writeCharacters(localServerState);
		 }
		 xmlWriter.writeEndElement();
	 }


	 /**
	  * databinding method to get an XML representation of this object
	  *
	  */
	 public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
			 throws org.apache.axis2.databinding.ADBException{

		 //We can safely assume an element has only one type associated with it
		 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
				 new java.lang.Object[]{
				 org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
				 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localServerState)
		 },
		 null);

	 }



	 /**
	  *  Factory class that keeps the parse method
	  */
	 public static class Factory extends SimpleFactory {

		 public static ServerState fromValue(String value)
				 throws java.lang.IllegalArgumentException {
			 ServerState enumeration = (ServerState) _table_.get(value);
			 if (enumeration==null) throw new java.lang.IllegalArgumentException();
			 return enumeration;
		 }
		 
		 public static ServerState fromString(String value,String namespaceURI)
				 throws java.lang.IllegalArgumentException {
			 try {
				 return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));
			 } catch (java.lang.Exception e) {
				 throw new java.lang.IllegalArgumentException();
			 }
		 }

		 public static ServerState fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
				 String content) {
			 if (content.indexOf(":") > -1) {
				 String prefix = content.substring(0,content.indexOf(":"));
				 String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
				 return ServerState.Factory.fromString(content,namespaceUri);
			 } else {
				 return ServerState.Factory.fromString(content,"");
			 }
		 }


		 /**
		  * static method to create the object
		  * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
		  *			 If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
		  * Postcondition: If this object is an element, the reader is positioned at its end element
		  *			 If this object is a complex type, the reader is positioned at the end element of its outer element
		  */
		 public static ServerState parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
			 ServerState object = null;
			 try {
				 while (!reader.isStartElement() && !reader.isEndElement())
					 reader.next();

				 while(!reader.isEndElement()) {
					 if (reader.isStartElement()  || reader.hasText()) {
						 String content = reader.getElementText();
						 object = ServerState.Factory.fromString(content,getNamespaceURI(reader,content));
					 } else {
						 reader.next();
					 }  
				 }  // end of while loop
			 } catch (javax.xml.stream.XMLStreamException e) {
				 throw new java.lang.Exception(e);
			 }

			 return object;
		 }
	 }//end of factory class
}