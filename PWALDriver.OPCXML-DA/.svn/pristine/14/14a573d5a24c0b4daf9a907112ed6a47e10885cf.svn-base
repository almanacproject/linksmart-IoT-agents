package eu.ebbits.pwal.impl.driver.opcxmlda.stub;

public class SubscriptionCancelResponse extends ADBBeanImplementation {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
			"http://opcfoundation.org/webservices/XMLDA/1.0/",
			"SubscriptionCancelResponse",
			"ns1");
	
	private static final String NAME = Browse.class.getSimpleName();

	protected String getClassName() {
		return this.getClass().getSimpleName();
	}

	/**
	 * field for ClientRequestHandle
	 * This was an Attribute!
	 */


	protected String localClientRequestHandle ;


	/**
	 * Auto generated getter method
	 * @return String
	 */
	public  String getClientRequestHandle() {
		return localClientRequestHandle;
	}



	/**
	 * Auto generated setter method
	 * @param param ClientRequestHandle
	 */
	public void setClientRequestHandle(String param) {

		this.localClientRequestHandle=param;


	}


	/**
	 *
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement (
			final javax.xml.namespace.QName parentQName,
			final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



		org.apache.axiom.om.OMDataSource dataSource =
				new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME) {

			public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
				SubscriptionCancelResponse.this.serialize(MY_QNAME,factory,xmlWriter);
			}
		};
		return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
				MY_QNAME,factory,dataSource);

	}

	protected void writeAttributes(org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter, String prefix, String namespace) 
			throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
		if (localClientRequestHandle != null) {
			writeAttribute("",
					"ClientRequestHandle",
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localClientRequestHandle), xmlWriter);
		}
		xmlWriter.writeEndElement();
	}

	/**
	 * databinding method to get an XML representation of this object
	 *
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
			throws org.apache.axis2.databinding.ADBException{

		java.util.ArrayList<Object> elementList = new java.util.ArrayList<Object>();
		java.util.ArrayList<Object> attribList = new java.util.ArrayList<Object>();

		attribList.add(new javax.xml.namespace.QName("","ClientRequestHandle"));
		attribList.add(localClientRequestHandle);
		return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
	}



	/**
	 *  Factory class that keeps the parse method
	 */
	public static class Factory extends GenericFactory {

		/**
		 * static method to create the object
		 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
		 *			 If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
		 * Postcondition: If this object is an element, the reader is positioned at its end element
		 *			 If this object is a complex type, the reader is positioned at the end element of its outer element
		 */
		public static SubscriptionCancelResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
			SubscriptionCancelResponse object =
					new SubscriptionCancelResponse();
			try {

				while (!reader.isStartElement() && !reader.isEndElement())
					reader.next();


				SubscriptionCancelResponse result = (SubscriptionCancelResponse) checkADBBeanType(NAME,reader); 
				if(result!=null) {
					return result;
				}

				// Note all attributes that were handled. Used to differ normal attributes
				// from anyAttributes.
				java.util.Vector<String> handledAttributes = new java.util.Vector<String>();

				// handle attribute "ClientRequestHandle"
				handleClientRequestHandle(reader.getAttributeValue(null,"ClientRequestHandle"),object,handledAttributes);

				reader.next();

			} catch (javax.xml.stream.XMLStreamException e) {
				throw new java.lang.Exception(e);
			}

			return object;
		}

	}//end of factory class



}