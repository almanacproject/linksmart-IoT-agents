package eu.ebbits.pwal.impl.driver.opcxmlda.stub;

public class SubscriptionPolledRefresh extends SerializableADBBeanImplementation {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
			"http://opcfoundation.org/webservices/XMLDA/1.0/",
			"SubscriptionPolledRefresh",
			"ns1");

	private static final String NAME = SubscriptionPolledRefresh.class.getSimpleName();
	
	protected String getClassName() {
		return this.getClass().getSimpleName();
	}

	/**
	 * field for Options
	 */


	protected RequestOptions localOptions ;

	/*  This tracker boolean wil be used to detect whether the user called the set method
	 *   for this attribute. It will be used to determine whether to include this field
	 *   in the serialized XML
	 */
	protected boolean localOptionsTracker = false ;


	/**
	 * Auto generated getter method
	 * @return RequestOptions
	 */
	public  RequestOptions getOptions() {
		return localOptions;
	}



	/**
	 * Auto generated setter method
	 * @param param Options
	 */
	public void setOptions(RequestOptions param) {

		if (param != null) {
			//update the setting tracker
			localOptionsTracker = true;
		} else {
			localOptionsTracker = false;

		}

		this.localOptions=param;


	}


	/**
	 * field for ServerSubHandles
	 * This was an Array!
	 */


	protected String[] localServerSubHandles ;

	/*  This tracker boolean wil be used to detect whether the user called the set method
	 *   for this attribute. It will be used to determine whether to include this field
	 *   in the serialized XML
	 */
	protected boolean localServerSubHandlesTracker = false ;


	/**
	 * Auto generated getter method
	 * @return String[]
	 */
	public  String[] getServerSubHandles() {
		return localServerSubHandles;
	}






	/**
	 * validate the array for ServerSubHandles
	 */
	protected void validateServerSubHandles(String[] param) {

	}


	/**
	 * Auto generated setter method
	 * @param param ServerSubHandles
	 */
	public void setServerSubHandles(String[] param) {
		String[] serverSubHandlesToUse = param.clone();
		
		validateServerSubHandles(serverSubHandlesToUse);


		if (serverSubHandlesToUse != null) {
			//update the setting tracker
			localServerSubHandlesTracker = true;
		} else {
			localServerSubHandlesTracker = false;

		}

		this.localServerSubHandles=serverSubHandlesToUse;
	}



	/**
	 * Auto generated add method for the array for convenience
	 * @param param String
	 */
	public void addServerSubHandles(String param) {
		if (localServerSubHandles == null) {
			localServerSubHandles = new String[]{};
		}


		//update the setting tracker
		localServerSubHandlesTracker = true;


		java.util.List list =
				org.apache.axis2.databinding.utils.ConverterUtil.toList(localServerSubHandles);
		list.add(param);
		this.localServerSubHandles =
				(String[])list.toArray(
						new String[list.size()]);

	}


	/**
	 * field for HoldTime
	 * This was an Attribute!
	 */


	protected java.util.Calendar localHoldTime ;


	/**
	 * Auto generated getter method
	 * @return java.util.Calendar
	 */
	public  java.util.Calendar getHoldTime() {
		return localHoldTime;
	}



	/**
	 * Auto generated setter method
	 * @param param HoldTime
	 */
	public void setHoldTime(java.util.Calendar param) {

		this.localHoldTime=param;


	}


	/**
	 * field for WaitTime
	 * This was an Attribute!
	 */


	protected int localWaitTime ;


	/**
	 * Auto generated getter method
	 * @return int
	 */
	public  int getWaitTime() {
		return localWaitTime;
	}



	/**
	 * Auto generated setter method
	 * @param param WaitTime
	 */
	public void setWaitTime(int param) {

		this.localWaitTime=param;


	}


	/**
	 * field for ReturnAllItems
	 * This was an Attribute!
	 */


	protected boolean localReturnAllItems ;


	/**
	 * Auto generated getter method
	 * @return boolean
	 */
	public  boolean getReturnAllItems() {
		return localReturnAllItems;
	}



	/**
	 * Auto generated setter method
	 * @param param ReturnAllItems
	 */
	public void setReturnAllItems(boolean param) {

		this.localReturnAllItems=param;


	}


	/**
	 *
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement (
			final javax.xml.namespace.QName parentQName,
			final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



		org.apache.axiom.om.OMDataSource dataSource =
				new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME) {

			public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
				SubscriptionPolledRefresh.this.serialize(MY_QNAME,factory,xmlWriter);
			}
		};
		return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
				MY_QNAME,factory,dataSource);

	}

	protected void writeAttributes(org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter, String prefix, String namespace) 
			throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
		if (localHoldTime != null) {
			writeAttribute("",
					"HoldTime",
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localHoldTime), xmlWriter);
		}
		if (localWaitTime!=java.lang.Integer.MIN_VALUE) {
			writeAttribute("",
					"WaitTime",
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWaitTime), xmlWriter);
		}
		else {
			throw new org.apache.axis2.databinding.ADBException("required attribute localWaitTime is null");
		}
		writeAttribute("",
				"ReturnAllItems",
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReturnAllItems), xmlWriter);
		if (localOptionsTracker) {
			if (localOptions==null) {
				throw new org.apache.axis2.databinding.ADBException("Options cannot be null!!");
			}
			localOptions.serialize(new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/","Options"),
					factory,xmlWriter);
		} if (localServerSubHandlesTracker) {
			if (localServerSubHandles!=null) {
				namespace = "http://opcfoundation.org/webservices/XMLDA/1.0/";
				boolean emptyNamespace = namespace == null || namespace.length() == 0;
				prefix =  emptyNamespace ? null : xmlWriter.getPrefix(namespace);
				for (int i = 0;i < localServerSubHandles.length;i++) {
					if (localServerSubHandles[i] != null) {
						if (!emptyNamespace) {
							if (prefix == null) {
								String prefix2 = generatePrefix(namespace);
								xmlWriter.writeStartElement(prefix2,"ServerSubHandles", namespace);
								xmlWriter.writeNamespace(prefix2, namespace);
								xmlWriter.setPrefix(prefix2, namespace);
							} else {
								xmlWriter.writeStartElement(namespace,"ServerSubHandles");
							}
						} else {
							xmlWriter.writeStartElement("ServerSubHandles");
						}
						xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localServerSubHandles[i]));
						xmlWriter.writeEndElement();
					} else {
						// we have to do nothing since minOccurs is zero
					}
				}
			} else {
				throw new org.apache.axis2.databinding.ADBException("ServerSubHandles cannot be null!!");
			}
		}
		xmlWriter.writeEndElement();
	}



	/**
	 * databinding method to get an XML representation of this object
	 *
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
			throws org.apache.axis2.databinding.ADBException{



		java.util.ArrayList elementList = new java.util.ArrayList();
		java.util.ArrayList attribList = new java.util.ArrayList();

		if (localOptionsTracker) {
			elementList.add(new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/",
					"Options"));


			if (localOptions==null) {
				throw new org.apache.axis2.databinding.ADBException("Options cannot be null!!");
			}
			elementList.add(localOptions);
		} if (localServerSubHandlesTracker) {
			if (localServerSubHandles!=null) {
				for (int i = 0;i < localServerSubHandles.length;i++) {

					if (localServerSubHandles[i] != null) {
						elementList.add(new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/",
								"ServerSubHandles"));
						elementList.add(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localServerSubHandles[i]));
					} else {

						// have to do nothing

					}


				}
			} else {

				throw new org.apache.axis2.databinding.ADBException("ServerSubHandles cannot be null!!");

			}

		}
		attribList.add(
				new javax.xml.namespace.QName("","HoldTime"));

		attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localHoldTime));

		attribList.add(
				new javax.xml.namespace.QName("","WaitTime"));

		attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWaitTime));

		attribList.add(
				new javax.xml.namespace.QName("","ReturnAllItems"));

		attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReturnAllItems));


		return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



	}



	/**
	 *  Factory class that keeps the parse method
	 */
	public static class Factory{




		/**
		 * static method to create the object
		 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
		 *			 If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
		 * Postcondition: If this object is an element, the reader is positioned at its end element
		 *			 If this object is a complex type, the reader is positioned at the end element of its outer element
		 */
		public static SubscriptionPolledRefresh parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
			SubscriptionPolledRefresh object =
					new SubscriptionPolledRefresh();

			try {

				while (!reader.isStartElement() && !reader.isEndElement())
					reader.next();

				SubscriptionPolledRefresh result = (SubscriptionPolledRefresh) checkADBBeanType(NAME,reader); 
				if(result!=null) {
					return result;
				}

				// Note all attributes that were handled. Used to differ normal attributes
				// from anyAttributes.
				java.util.Vector<String> handledAttributes = new java.util.Vector<String>();


				// handle attribute "HoldTime"
				String tempAttribHoldTime = reader.getAttributeValue(null,"HoldTime");
				if (tempAttribHoldTime!=null) {
					object.setHoldTime(
							org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(tempAttribHoldTime));
				}
				handledAttributes.add("HoldTime");

				// handle attribute "WaitTime"
				String tempAttribWaitTime = reader.getAttributeValue(null,"WaitTime");
				if (tempAttribWaitTime!=null) {
					object.setWaitTime(
							org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(tempAttribWaitTime));
				} else {
					throw new org.apache.axis2.databinding.ADBException("Required attribute WaitTime is missing");
				}
				handledAttributes.add("WaitTime");

				// handle attribute "ReturnAllItems"
				String tempAttribReturnAllItems = reader.getAttributeValue(null,"ReturnAllItems");
				if (tempAttribReturnAllItems!=null) {
					object.setReturnAllItems(
							org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(tempAttribReturnAllItems));
				} else {
					throw new org.apache.axis2.databinding.ADBException("Required attribute ReturnAllItems is missing");
				}
				handledAttributes.add("ReturnAllItems");

				reader.next();

				java.util.ArrayList list2 = new java.util.ArrayList();


				while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

				if (reader.isStartElement() && new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/","Options").equals(reader.getName())) {

					object.setOptions(RequestOptions.Factory.parse(reader));

					reader.next();

				}  // End of if for expected property start element

				else {

				}


				while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

				if (reader.isStartElement() && new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/","ServerSubHandles").equals(reader.getName())) {



					// Process the array and step past its final element's end.
					list2.add(reader.getElementText());

					//loop until we find a start element that is not part of this array
					boolean loopDone2 = false;
					while(!loopDone2) {
						// Ensure we are at the EndElement
						while (!reader.isEndElement()) {
							reader.next();
						}
						// Step out of this element
						reader.next();
						// Step to next element event.
						while (!reader.isStartElement() && !reader.isEndElement())
							reader.next();
						if (reader.isEndElement()) {
							//two continuous end elements means we are exiting the xml structure
							loopDone2 = true;
						} else {
							if (new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/","ServerSubHandles").equals(reader.getName())) {
								list2.add(reader.getElementText());

							}else{
								loopDone2 = true;
							}
						}
					}
					// call the converter utility  to convert and set the array

					object.setServerSubHandles((String[])
							list2.toArray(new String[list2.size()]));

				}  // End of if for expected property start element

				else {

				}

				while (!reader.isStartElement() && !reader.isEndElement())
					reader.next();

				if (reader.isStartElement())
					// A start element we are not expecting indicates a trailing invalid property
					throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());




			} catch (javax.xml.stream.XMLStreamException e) {
				throw new java.lang.Exception(e);
			}

			return object;
		}

	}//end of factory class



}
