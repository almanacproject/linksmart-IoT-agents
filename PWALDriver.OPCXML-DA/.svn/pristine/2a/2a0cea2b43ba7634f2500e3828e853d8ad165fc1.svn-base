package eu.ebbits.pwal.impl.driver.opcxmlda.stub;

import java.util.Vector;

import org.apache.axis2.databinding.ADBException;

public class GenericFactory {
	
	protected static void handleItemPath(String tempAttribItemPath, 
										ADBBeanImplementation object, 
										Vector<String> handledAttributes) {
		if (tempAttribItemPath!=null) {
			object.setItemPath(tempAttribItemPath);
		}
		handledAttributes.add("ItemPath");		
	}
	
	
	protected static void handleReqType(String tempAttribReqType, 
										ADBBeanImplementation object, 
										Vector<String> handledAttributes,
										javax.xml.stream.XMLStreamReader reader) {
		String prefix ="";
		String namespaceuri ="";
		if (tempAttribReqType!=null) {
			int index = tempAttribReqType.indexOf(":");
			if(index > -1) {
				prefix = tempAttribReqType.substring(0,index);
			} else {
				// i.e this is in default namespace
				prefix = "";
			}
			namespaceuri = reader.getNamespaceURI(prefix);

			object.setReqType(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToQName(tempAttribReqType,namespaceuri));
		}
		handledAttributes.add("ReqType");
	}
	
	protected static void handleItemName(String tempAttribItemName, 
			ADBBeanImplementation object, 
			Vector<String> handledAttributes) {
		if (tempAttribItemName!=null) {
			object.setItemName(tempAttribItemName);
		}
		handledAttributes.add("ItemName");
	}

	protected static void handleClientItemHandle(String tempAttribClientItemHandle, 
			ADBBeanImplementation object, 
			Vector<String> handledAttributes) {
		if (tempAttribClientItemHandle!=null) {
			object.setClientItemHandle(tempAttribClientItemHandle);
		}
		handledAttributes.add("ClientItemHandle");
	}

	protected static void handleDeadband(String tempAttribDeadband, 
			ADBBeanImplementation object, 
			Vector<String> handledAttributes) {
		if (tempAttribDeadband!=null) {
			object.setDeadband(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToFloat(tempAttribDeadband));
		} else {
			object.setDeadband(java.lang.Float.NaN);
		}
		handledAttributes.add("Deadband");
	}
	
	protected static void handleRequestedSamplingRate(String tempAttribRequestedSamplingRate, 
			ADBBeanImplementation object, 
			Vector<String> handledAttributes) {
		if (tempAttribRequestedSamplingRate!=null) {
			object.setRequestedSamplingRate(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(tempAttribRequestedSamplingRate));
		} else {
			object.setRequestedSamplingRate(java.lang.Integer.MIN_VALUE);
		}
		handledAttributes.add("RequestedSamplingRate");
	}

	protected static void handleEnableBuffering(String tempAttribEnableBuffering, 
			ADBBeanImplementation object, 
			Vector<String> handledAttributes) {
		if (tempAttribEnableBuffering!=null) {
			object.setEnableBuffering(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(tempAttribEnableBuffering));
		}
		handledAttributes.add("EnableBuffering");
	}
	
	protected static void handleLocaleID(String tempAttribLocaleID, 
			ADBBeanImplementation object, 
			Vector<String> handledAttributes) {
		if (tempAttribLocaleID!=null) {
			object.setLocaleID(tempAttribLocaleID);
		}
		handledAttributes.add("LocaleID");
	}
	
	
	protected static void handleClientRequestHandle(String tempAttribClientRequestHandle, 
			ADBBeanImplementation object, 
			Vector<String> handledAttributes) {
		if (tempAttribClientRequestHandle!=null) {
			object.setClientRequestHandle(tempAttribClientRequestHandle);
		}
		handledAttributes.add("ClientRequestHandle");
	}
	
	protected static void handleContinuationPoint(String tempAttribContinuationPoint, 
			ADBBeanImplementation object, 
			Vector<String> handledAttributes) {
		if (tempAttribContinuationPoint!=null) {
			object.setContinuationPoint(tempAttribContinuationPoint);
		}
		handledAttributes.add("ContinuationPoint");
	}
	
	protected static void handleMaxElementsReturned(String tempAttribMaxElementsReturned, 
			ADBBeanImplementation object, 
			Vector<String> handledAttributes) throws ADBException {
		if (tempAttribMaxElementsReturned!=null) {
			object.setMaxElementsReturned(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(tempAttribMaxElementsReturned));
		} else {
			throw new org.apache.axis2.databinding.ADBException("Required attribute MaxElementsReturned is missing");
		}
		handledAttributes.add("MaxElementsReturned");
	}	
	
	
	protected static void handleReturnAllProperties(String tempAttribReturnAllProperties, 
			ADBBeanImplementation object, 
			Vector<String> handledAttributes) throws ADBException {
		if (tempAttribReturnAllProperties!=null) {
			object.setReturnAllProperties(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(tempAttribReturnAllProperties));
		} else {
			throw new org.apache.axis2.databinding.ADBException("Required attribute ReturnAllProperties is missing");
		}
		handledAttributes.add("ReturnAllProperties");
	}
	

	protected static void handleReturnPropertyValues(String tempAttribReturnPropertyValues, 
			ADBBeanImplementation object, 
			Vector<String> handledAttributes) throws ADBException {
		if (tempAttribReturnPropertyValues!=null) {
			object.setReturnPropertyValues(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(tempAttribReturnPropertyValues));
		} else {
			throw new org.apache.axis2.databinding.ADBException("Required attribute ReturnPropertyValues is missing");
		}
		handledAttributes.add("ReturnPropertyValues");
	}

	
	protected static void handleReturnErrorText(String tempAttribReturnErrorText, 
			ADBBeanImplementation object, 
			Vector<String> handledAttributes) throws ADBException {
		if (tempAttribReturnErrorText!=null) {
			object.setReturnErrorText(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(tempAttribReturnErrorText));
		} else {
			throw new org.apache.axis2.databinding.ADBException("Required attribute ReturnErrorText is missing");
		}
		handledAttributes.add("ReturnErrorText");
	}
	
	
	protected static void handleName(String tempAttribName, 
			ADBBeanImplementation object, 
			Vector<String> handledAttributes) throws ADBException {
		if (tempAttribName!=null) {
			object.setName(tempAttribName);
		}
		handledAttributes.add("Name");
	}

	
	protected static void handleResultID(String tempAttribResultID, 
			ADBBeanImplementation object, 
			Vector<String> handledAttributes,
			javax.xml.stream.XMLStreamReader reader) {
		String prefix ="";
		String namespaceuri ="";
		if (tempAttribResultID!=null) {
			int index = tempAttribResultID.indexOf(":");
			if(index > -1) {
				prefix = tempAttribResultID.substring(0,index);
			} else {
				// i.e this is in default namespace
				prefix = "";
			}
			namespaceuri = reader.getNamespaceURI(prefix);
			object.setResultID(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToQName(tempAttribResultID,namespaceuri));
		}
		handledAttributes.add("ReqType");
	}
	
	
	protected static void handleMaxAge(String tempAttribMaxAge, 
			ADBBeanImplementation object, 
			Vector<String> handledAttributes) throws ADBException {
		if (tempAttribMaxAge!=null) {
			object.setMaxAge(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(tempAttribMaxAge));
		} else {
			object.setMaxAge(java.lang.Integer.MIN_VALUE);
		}
		handledAttributes.add("MaxAge");
	}
	
	
	protected static void handleRevisedSamplingRate(String tempAttribRevisedSamplingRate, 
			ADBBeanImplementation object, 
			Vector<String> handledAttributes) throws ADBException {
		if (tempAttribRevisedSamplingRate!=null) {
			object.setRevisedSamplingRate(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(tempAttribRevisedSamplingRate));
		} else {
			object.setRevisedSamplingRate(java.lang.Integer.MIN_VALUE);
		}
		handledAttributes.add("RevisedSamplingRate");
	}
	
	
	protected static void handleServerSubHandle(String tempAttribServerSubHandle, 
			ADBBeanImplementation object, 
			Vector<String> handledAttributes) throws ADBException {
		if (tempAttribServerSubHandle!=null) {
			object.setServerSubHandle(tempAttribServerSubHandle);
		}
		handledAttributes.add("ServerSubHandle");
	}
}
