package eu.ebbits.pwal.impl.driver.opcxmlda.stub;

public class PropertyReplyList extends ADBBeanImplementation {
	/* This type was generated from the piece of schema that had
		 name = PropertyReplyList
		 Namespace URI = http://opcfoundation.org/webservices/XMLDA/1.0/
		 Namespace Prefix = ns1
	 */
	
	
	private static final String NAME = PropertyReplyList.class.getSimpleName();

	protected String getClassName() {
		return this.getClass().getSimpleName();
	}
	
	protected String localItemPath;
	
	protected String localItemName;
	
	/**
	 * field for Properties
	 * This was an Array!
	 */


	protected ItemProperty[] localProperties ;

	/*  This tracker boolean wil be used to detect whether the user called the set method
	 *   for this attribute. It will be used to determine whether to include this field
	 *   in the serialized XML
	 */
	protected boolean localPropertiesTracker = false ;


	/**
	 * field for ResultID
	 * This was an Attribute!
	 */
	protected javax.xml.namespace.QName localResultID ;


	protected void writeAttributes(org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter, String prefix, String namespace) 
			throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
		writeAttribute("", "ItemPath", localItemPath, xmlWriter);
		writeAttribute("", "ItemName", localItemName, xmlWriter);
		writeQNameAttribute("", "ResultID", localResultID, xmlWriter);
		serializeAttributes(localPropertiesTracker,localProperties,"Properties",factory,xmlWriter);
		xmlWriter.writeEndElement();
	}



	/**
	 * databinding method to get an XML representation of this object
	 *
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
			throws org.apache.axis2.databinding.ADBException{


		java.util.ArrayList<Object> elementList = new java.util.ArrayList<Object>();
		java.util.ArrayList<Object> attribList = new java.util.ArrayList<Object>();

		addItems(localPropertiesTracker,localProperties,"Properties",elementList);
		attribList.add(new javax.xml.namespace.QName("","ItemPath"));
		attribList.add(localItemPath);
		attribList.add(new javax.xml.namespace.QName("","ItemName"));
		attribList.add(localItemName);
		attribList.add(new javax.xml.namespace.QName("","ResultID"));
		attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localResultID));
		return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
	}



	/**
	 *  Factory class that keeps the parse method
	 */
	public static class Factory extends GenericFactory {

		/**
		 * static method to create the object
		 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
		 *			 If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
		 * Postcondition: If this object is an element, the reader is positioned at its end element
		 *			 If this object is a complex type, the reader is positioned at the end element of its outer element
		 */
		public static PropertyReplyList parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
			PropertyReplyList object =
					new PropertyReplyList();

			String prefix ="";
			String namespaceuri ="";
			try {

				while (!reader.isStartElement() && !reader.isEndElement())
					reader.next();

				PropertyReplyList result = (PropertyReplyList) checkADBBeanType(NAME,reader); 
				if(result!=null) {
					return result;
				}


				// Note all attributes that were handled. Used to differ normal attributes
				// from anyAttributes.
				java.util.Vector<String> handledAttributes = new java.util.Vector<String>();

				// handle attribute "ItemPath"
				handleItemPath(reader.getAttributeValue(null,"ItemPath"),object,handledAttributes);

				// handle attribute "ItemName"
				handleItemName(reader.getAttributeValue(null,"ItemName"),object,handledAttributes);

				// handle attribute "ResultID"
				handleResultID(reader.getAttributeValue(null,"ResultID"),object,handledAttributes,reader);

				reader.next();

				java.util.ArrayList<Object> list1 = new java.util.ArrayList<Object>();

				while (!reader.isStartElement() && !reader.isEndElement()) {
					reader.next();
				}

				if (reader.isStartElement() && new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/","Properties").equals(reader.getName())) {

					// Process the array and step past its final element's end.
					list1.add(ItemProperty.Factory.parse(reader));

					//loop until we find a start element that is not part of this array
					boolean loopDone1 = false;
					while(!loopDone1) {
						loopDone1 = findStartElementNotPartOfTheArray("Properties",reader);
						if(!loopDone1) {
							list1.add(ItemProperty.Factory.parse(reader));
						}							
					}
					// call the converter utility  to convert and set the array

					object.setProperties((ItemProperty[])
							org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
									ItemProperty.class,
									list1));

				}  // End of if for expected property start element

				while (!reader.isStartElement() && !reader.isEndElement())
					reader.next();

				if (reader.isStartElement())
					// A start element we are not expecting indicates a trailing invalid property
					throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
			} catch (javax.xml.stream.XMLStreamException e) {
				throw new java.lang.Exception(e);
			}
			return object;
		}
	}//end of factory class
}
