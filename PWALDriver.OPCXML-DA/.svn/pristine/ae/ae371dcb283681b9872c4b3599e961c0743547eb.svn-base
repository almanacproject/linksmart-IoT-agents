package eu.ebbits.pwal.impl.driver.opcxmlda.stub;

public class SubscribeResponse extends SerializableADBBeanImplementation {


	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
			"http://opcfoundation.org/webservices/XMLDA/1.0/",
			"SubscribeResponse",
			"ns1");

	private static final String NAME = SubscribeResponse.class.getSimpleName();
	
	protected String getClassName() {
		return this.getClass().getSimpleName();
	}

	/**
	 * field for SubscribeResult
	 */


	protected ReplyBase localSubscribeResult ;

	/*  This tracker boolean wil be used to detect whether the user called the set method
	 *   for this attribute. It will be used to determine whether to include this field
	 *   in the serialized XML
	 */
	protected boolean localSubscribeResultTracker = false ;


	/**
	 * Auto generated getter method
	 * @return ReplyBase
	 */
	public  ReplyBase getSubscribeResult() {
		return localSubscribeResult;
	}



	/**
	 * Auto generated setter method
	 * @param param SubscribeResult
	 */
	public void setSubscribeResult(ReplyBase param) {

		if (param != null) {
			//update the setting tracker
			localSubscribeResultTracker = true;
		} else {
			localSubscribeResultTracker = false;

		}

		this.localSubscribeResult=param;


	}


	/**
	 * field for RItemList
	 */


	protected SubscribeReplyItemList localRItemList ;

	/*  This tracker boolean wil be used to detect whether the user called the set method
	 *   for this attribute. It will be used to determine whether to include this field
	 *   in the serialized XML
	 */
	protected boolean localRItemListTracker = false ;


	/**
	 * Auto generated getter method
	 * @return SubscribeReplyItemList
	 */
	public  SubscribeReplyItemList getRItemList() {
		return localRItemList;
	}



	/**
	 * Auto generated setter method
	 * @param param RItemList
	 */
	public void setRItemList(SubscribeReplyItemList param) {

		if (param != null) {
			//update the setting tracker
			localRItemListTracker = true;
		} else {
			localRItemListTracker = false;

		}

		this.localRItemList=param;


	}


	/**
	 * field for Errors
	 * This was an Array!
	 */


	protected OPCError[] localErrors ;

	/*  This tracker boolean wil be used to detect whether the user called the set method
	 *   for this attribute. It will be used to determine whether to include this field
	 *   in the serialized XML
	 */
	protected boolean localErrorsTracker = false ;


	/**
	 * Auto generated getter method
	 * @return OPCError[]
	 */
	public  OPCError[] getErrors() {
		return localErrors;
	}






	/**
	 * validate the array for Errors
	 */
	protected void validateErrors(OPCError[] param) {

	}


	/**
	 * Auto generated setter method
	 * @param param Errors
	 */
	public void setErrors(OPCError[] param) {
		OPCError[] errors = param.clone();
		
		validateErrors(errors);


		if (errors != null) {
			//update the setting tracker
			localErrorsTracker = true;
		} else {
			localErrorsTracker = false;

		}

		this.localErrors=errors;
	}



	/**
	 * Auto generated add method for the array for convenience
	 * @param param OPCError
	 */
	public void addErrors(OPCError param) {
		if (localErrors == null) {
			localErrors = new OPCError[]{};
		}


		//update the setting tracker
		localErrorsTracker = true;


		java.util.List list =
				org.apache.axis2.databinding.utils.ConverterUtil.toList(localErrors);
		list.add(param);
		this.localErrors =
				(OPCError[])list.toArray(
						new OPCError[list.size()]);

	}


	/**
	 * field for ServerSubHandle
	 * This was an Attribute!
	 */


	protected String localServerSubHandle ;


	/**
	 * Auto generated getter method
	 * @return String
	 */
	public  String getServerSubHandle() {
		return localServerSubHandle;
	}



	/**
	 * Auto generated setter method
	 * @param param ServerSubHandle
	 */
	public void setServerSubHandle(String param) {

		this.localServerSubHandle=param;


	}


	/**
	 *
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement (
			final javax.xml.namespace.QName parentQName,
			final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



		org.apache.axiom.om.OMDataSource dataSource =
				new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME) {

			public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
				SubscribeResponse.this.serialize(MY_QNAME,factory,xmlWriter);
			}
		};
		return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
				MY_QNAME,factory,dataSource);

	}


	protected void writeAttributes(org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter, String prefix, String namespace) 
			throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
		if (localServerSubHandle != null) {
			writeAttribute("",
					"ServerSubHandle",
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localServerSubHandle), xmlWriter);
		}
		if (localSubscribeResultTracker) {
			if (localSubscribeResult==null) {
				throw new org.apache.axis2.databinding.ADBException("SubscribeResult cannot be null!!");
			}
			localSubscribeResult.serialize(new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/","SubscribeResult"),
					factory,xmlWriter);
		} if (localRItemListTracker) {
			if (localRItemList==null) {
				throw new org.apache.axis2.databinding.ADBException("RItemList cannot be null!!");
			}
			localRItemList.serialize(new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/","RItemList"),
					factory,xmlWriter);
		} if (localErrorsTracker) {
			if (localErrors!=null) {
				for (int i = 0;i < localErrors.length;i++) {
					if (localErrors[i] != null) {
						localErrors[i].serialize(new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/","Errors"),
								factory,xmlWriter);
					} else {
						// we don't have to do any thing since minOccures is zero
					}
				}
			} else {
				throw new org.apache.axis2.databinding.ADBException("Errors cannot be null!!");
			}
		}
		xmlWriter.writeEndElement();
	}


	/**
	 * databinding method to get an XML representation of this object
	 *
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
			throws org.apache.axis2.databinding.ADBException{



		java.util.ArrayList elementList = new java.util.ArrayList();
		java.util.ArrayList attribList = new java.util.ArrayList();

		if (localSubscribeResultTracker) {
			elementList.add(new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/",
					"SubscribeResult"));


			if (localSubscribeResult==null) {
				throw new org.apache.axis2.databinding.ADBException("SubscribeResult cannot be null!!");
			}
			elementList.add(localSubscribeResult);
		} if (localRItemListTracker) {
			elementList.add(new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/",
					"RItemList"));


			if (localRItemList==null) {
				throw new org.apache.axis2.databinding.ADBException("RItemList cannot be null!!");
			}
			elementList.add(localRItemList);
		} if (localErrorsTracker) {
			if (localErrors!=null) {
				for (int i = 0;i < localErrors.length;i++) {

					if (localErrors[i] != null) {
						elementList.add(new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/",
								"Errors"));
						elementList.add(localErrors[i]);
					} else {

						// nothing to do

					}

				}
			} else {

				throw new org.apache.axis2.databinding.ADBException("Errors cannot be null!!");

			}

		}
		attribList.add(
				new javax.xml.namespace.QName("","ServerSubHandle"));

		attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localServerSubHandle));


		return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



	}



	/**
	 *  Factory class that keeps the parse method
	 */
	public static class Factory extends GenericFactory {

		/**
		 * static method to create the object
		 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
		 *			 If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
		 * Postcondition: If this object is an element, the reader is positioned at its end element
		 *			 If this object is a complex type, the reader is positioned at the end element of its outer element
		 */
		public static SubscribeResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
			SubscribeResponse object =
					new SubscribeResponse();
			
			try {

				while (!reader.isStartElement() && !reader.isEndElement())
					reader.next();

				SubscribeResponse result = (SubscribeResponse) checkADBBeanType(NAME,reader); 
				if(result!=null) {
					return result;
				}

				// Note all attributes that were handled. Used to differ normal attributes
				// from anyAttributes.
				java.util.Vector<String> handledAttributes = new java.util.Vector<String>();

				// handle attribute "ServerSubHandle"
				handleServerSubHandle(reader.getAttributeValue(null,"ServerSubHandle"),object,handledAttributes);

				reader.next();

				java.util.ArrayList list3 = new java.util.ArrayList();


				while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

				if (reader.isStartElement() && new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/","SubscribeResult").equals(reader.getName())) {

					object.setSubscribeResult(ReplyBase.Factory.parse(reader));

					reader.next();

				}  // End of if for expected property start element

				else {

				}


				while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

				if (reader.isStartElement() && new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/","RItemList").equals(reader.getName())) {

					object.setRItemList(SubscribeReplyItemList.Factory.parse(reader));

					reader.next();

				}  // End of if for expected property start element

				else {

				}


				while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

				if (reader.isStartElement() && new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/","Errors").equals(reader.getName())) {



					// Process the array and step past its final element's end.
					list3.add(OPCError.Factory.parse(reader));

					//loop until we find a start element that is not part of this array
					boolean loopDone3 = false;
					while(!loopDone3) {
						// We should be at the end element, but make sure
						while (!reader.isEndElement())
							reader.next();
						// Step out of this element
						reader.next();
						// Step to next element event.
						while (!reader.isStartElement() && !reader.isEndElement())
							reader.next();
						if (reader.isEndElement()) {
							//two continuous end elements means we are exiting the xml structure
							loopDone3 = true;
						} else {
							if (new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/","Errors").equals(reader.getName())) {
								list3.add(OPCError.Factory.parse(reader));

							}else{
								loopDone3 = true;
							}
						}
					}
					// call the converter utility  to convert and set the array

					object.setErrors((OPCError[])
							org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
									OPCError.class,
									list3));

				}  // End of if for expected property start element

				else {

				}

				while (!reader.isStartElement() && !reader.isEndElement())
					reader.next();

				if (reader.isStartElement())
					// A start element we are not expecting indicates a trailing invalid property
					throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());




			} catch (javax.xml.stream.XMLStreamException e) {
				throw new java.lang.Exception(e);
			}

			return object;
		}

	}//end of factory class



}
