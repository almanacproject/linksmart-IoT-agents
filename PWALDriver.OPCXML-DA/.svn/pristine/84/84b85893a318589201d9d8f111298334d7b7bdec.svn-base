package eu.ebbits.pwal.impl.driver.opcxmlda.stub;

public class PropertyReplyList extends ItemNameADBBeanImplementation {
	/* This type was generated from the piece of schema that had
		 name = PropertyReplyList
		 Namespace URI = http://opcfoundation.org/webservices/XMLDA/1.0/
		 Namespace Prefix = ns1
	 */
	
	
	private static final String NAME = PropertyReplyList.class.getSimpleName();

	protected String getClassName() {
		return this.getClass().getSimpleName();
	}
	
	/**
	 * field for Properties
	 * This was an Array!
	 */


	protected ItemProperty[] localProperties ;

	/*  This tracker boolean wil be used to detect whether the user called the set method
	 *   for this attribute. It will be used to determine whether to include this field
	 *   in the serialized XML
	 */
	protected boolean localPropertiesTracker = false ;


	/**
	 * Auto generated getter method
	 * @return ItemProperty[]
	 */
	public  ItemProperty[] getProperties() {
		return localProperties;
	}






	/**
	 * validate the array for Properties
	 */
	protected void validateProperties(ItemProperty[] param) {

	}


	/**
	 * Auto generated setter method
	 * @param param Properties
	 */
	public void setProperties(ItemProperty[] param) {
		ItemProperty[] propertiesToUse = param.clone();
		
		validateProperties(propertiesToUse);


		if (propertiesToUse != null) {
			//update the setting tracker
			localPropertiesTracker = true;
		} else {
			localPropertiesTracker = false;

		}

		this.localProperties=propertiesToUse;
	}



	/**
	 * Auto generated add method for the array for convenience
	 * @param param ItemProperty
	 */
	public void addProperties(ItemProperty param) {
		if (localProperties == null) {
			localProperties = new ItemProperty[]{};
		}


		//update the setting tracker
		localPropertiesTracker = true;


		java.util.List list =
				org.apache.axis2.databinding.utils.ConverterUtil.toList(localProperties);
		list.add(param);
		this.localProperties =
				(ItemProperty[])list.toArray(
						new ItemProperty[list.size()]);

	}


	

	/**
	 * field for ResultID
	 * This was an Attribute!
	 */


	protected javax.xml.namespace.QName localResultID ;


	/**
	 * Auto generated getter method
	 * @return javax.xml.namespace.QName
	 */
	public  javax.xml.namespace.QName getResultID() {
		return localResultID;
	}



	/**
	 * Auto generated setter method
	 * @param param ResultID
	 */
	public void setResultID(javax.xml.namespace.QName param) {

		this.localResultID=param;


	}


	/**
	 *
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement (
			final javax.xml.namespace.QName parentQName,
			final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



		org.apache.axiom.om.OMDataSource dataSource =
				new org.apache.axis2.databinding.ADBDataSource(this,parentQName) {

			public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
				PropertyReplyList.this.serialize(parentQName,factory,xmlWriter);
			}
		};
		return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
				parentQName,factory,dataSource);

	}

	protected void writeAttributes(org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter, String prefix, String namespace) 
			throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
		if (localItemPath != null) {
			writeAttribute("",
					"ItemPath",
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localItemPath), xmlWriter);
		}
		if (localItemName != null) {
			writeAttribute("",
					"ItemName",
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localItemName), xmlWriter);
		}
		if (localResultID != null) {
			writeQNameAttribute("",
					"ResultID",
					localResultID, xmlWriter);
		}
		if (localPropertiesTracker) {
			if (localProperties!=null) {
				for (int i = 0;i < localProperties.length;i++) {
					if (localProperties[i] != null) {
						localProperties[i].serialize(new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/","Properties"),
								factory,xmlWriter);
					} else {
						// we don't have to do any thing since minOccures is zero
					}
				}
			} else {
				throw new org.apache.axis2.databinding.ADBException("Properties cannot be null!!");
			}
		}
		xmlWriter.writeEndElement();
	}



	/**
	 * databinding method to get an XML representation of this object
	 *
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
			throws org.apache.axis2.databinding.ADBException{



		java.util.ArrayList elementList = new java.util.ArrayList();
		java.util.ArrayList attribList = new java.util.ArrayList();

		if (localPropertiesTracker) {
			if (localProperties!=null) {
				for (int i = 0;i < localProperties.length;i++) {

					if (localProperties[i] != null) {
						elementList.add(new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/",
								"Properties"));
						elementList.add(localProperties[i]);
					} else {

						// nothing to do

					}

				}
			} else {

				throw new org.apache.axis2.databinding.ADBException("Properties cannot be null!!");

			}

		}
		attribList.add(
				new javax.xml.namespace.QName("","ItemPath"));

		attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localItemPath));

		attribList.add(
				new javax.xml.namespace.QName("","ItemName"));

		attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localItemName));

		attribList.add(
				new javax.xml.namespace.QName("","ResultID"));

		attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localResultID));


		return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



	}



	/**
	 *  Factory class that keeps the parse method
	 */
	public static class Factory extends GenericFactory {

		/**
		 * static method to create the object
		 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
		 *			 If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
		 * Postcondition: If this object is an element, the reader is positioned at its end element
		 *			 If this object is a complex type, the reader is positioned at the end element of its outer element
		 */
		public static PropertyReplyList parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
			PropertyReplyList object =
					new PropertyReplyList();

			String prefix ="";
			String namespaceuri ="";
			try {

				while (!reader.isStartElement() && !reader.isEndElement())
					reader.next();

				PropertyReplyList result = (PropertyReplyList) checkADBBeanType(NAME,reader); 
				if(result!=null) {
					return result;
				}


				// Note all attributes that were handled. Used to differ normal attributes
				// from anyAttributes.
				java.util.Vector<String> handledAttributes = new java.util.Vector<String>();

				// handle attribute "ItemPath"
				handleItemPath(reader.getAttributeValue(null,"ItemPath"),object,handledAttributes);

				// handle attribute "ItemName"
				handleItemName(reader.getAttributeValue(null,"ItemName"),object,handledAttributes);

				// handle attribute "ResultID"
				handleResultID(reader.getAttributeValue(null,"ResultID"),object,handledAttributes,reader);

				reader.next();

				java.util.ArrayList list1 = new java.util.ArrayList();


				while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

				if (reader.isStartElement() && new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/","Properties").equals(reader.getName())) {



					// Process the array and step past its final element's end.
					list1.add(ItemProperty.Factory.parse(reader));

					//loop until we find a start element that is not part of this array
					boolean loopDone1 = false;
					while(!loopDone1) {
						// We should be at the end element, but make sure
						while (!reader.isEndElement())
							reader.next();
						// Step out of this element
						reader.next();
						// Step to next element event.
						while (!reader.isStartElement() && !reader.isEndElement())
							reader.next();
						if (reader.isEndElement()) {
							//two continuous end elements means we are exiting the xml structure
							loopDone1 = true;
						} else {
							if (new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/","Properties").equals(reader.getName())) {
								list1.add(ItemProperty.Factory.parse(reader));

							}else{
								loopDone1 = true;
							}
						}
					}
					// call the converter utility  to convert and set the array

					object.setProperties((ItemProperty[])
							org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
									ItemProperty.class,
									list1));

				}  // End of if for expected property start element

				else {

				}

				while (!reader.isStartElement() && !reader.isEndElement())
					reader.next();

				if (reader.isStartElement())
					// A start element we are not expecting indicates a trailing invalid property
					throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());




			} catch (javax.xml.stream.XMLStreamException e) {
				throw new java.lang.Exception(e);
			}

			return object;
		}

	}//end of factory class



}
