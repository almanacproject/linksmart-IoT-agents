package eu.ebbits.pwal.impl.driver.opcxmlda.stub;

import java.util.Vector;

import javax.xml.stream.XMLStreamException;

import org.apache.axis2.databinding.ADBException;

public class GenericFactory {
	
	protected static void handleItemPath(String tempAttribItemPath, 
										ADBBeanImplementation object, 
										Vector<String> handledAttributes) {
		if (tempAttribItemPath!=null) {
			object.setItemPath(tempAttribItemPath);
		}
		handledAttributes.add("ItemPath");		
	}
	
	
	protected static void handleReqType(String tempAttribReqType, 
										ADBBeanImplementation object, 
										Vector<String> handledAttributes,
										javax.xml.stream.XMLStreamReader reader) {
		String prefix ="";
		String namespaceuri ="";
		if (tempAttribReqType!=null) {
			int index = tempAttribReqType.indexOf(":");
			if(index > -1) {
				prefix = tempAttribReqType.substring(0,index);
			} else {
				// i.e this is in default namespace
				prefix = "";
			}
			namespaceuri = reader.getNamespaceURI(prefix);

			object.setReqType(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToQName(tempAttribReqType,namespaceuri));
		}
		handledAttributes.add("ReqType");
	}
	
	protected static void handleItemName(String tempAttribItemName, 
			ADBBeanImplementation object, 
			Vector<String> handledAttributes) {
		if (tempAttribItemName!=null) {
			object.setItemName(tempAttribItemName);
		}
		handledAttributes.add("ItemName");
	}

	protected static void handleClientItemHandle(String tempAttribClientItemHandle, 
			ADBBeanImplementation object, 
			Vector<String> handledAttributes) {
		if (tempAttribClientItemHandle!=null) {
			object.setClientItemHandle(tempAttribClientItemHandle);
		}
		handledAttributes.add("ClientItemHandle");
	}

	protected static void handleDeadband(String tempAttribDeadband, 
			ADBBeanImplementation object, 
			Vector<String> handledAttributes) {
		if (tempAttribDeadband!=null) {
			object.setDeadband(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToFloat(tempAttribDeadband));
		} else {
			object.setDeadband(java.lang.Float.NaN);
		}
		handledAttributes.add("Deadband");
	}
	
	protected static void handleRequestedSamplingRate(String tempAttribRequestedSamplingRate, 
			ADBBeanImplementation object, 
			Vector<String> handledAttributes) {
		if (tempAttribRequestedSamplingRate!=null) {
			object.setRequestedSamplingRate(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(tempAttribRequestedSamplingRate));
		} else {
			object.setRequestedSamplingRate(java.lang.Integer.MIN_VALUE);
		}
		handledAttributes.add("RequestedSamplingRate");
	}

	protected static void handleEnableBuffering(String tempAttribEnableBuffering, 
			ADBBeanImplementation object, 
			Vector<String> handledAttributes) {
		if (tempAttribEnableBuffering!=null) {
			object.setEnableBuffering(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(tempAttribEnableBuffering));
		}
		handledAttributes.add("EnableBuffering");
	}
	
	protected static void handleLocaleID(String tempAttribLocaleID, 
			ADBBeanImplementation object, 
			Vector<String> handledAttributes) {
		if (tempAttribLocaleID!=null) {
			object.setLocaleID(tempAttribLocaleID);
		}
		handledAttributes.add("LocaleID");
	}
	
	
	protected static void handleClientRequestHandle(String tempAttribClientRequestHandle, 
			ADBBeanImplementation object, 
			Vector<String> handledAttributes) {
		if (tempAttribClientRequestHandle!=null) {
			object.setClientRequestHandle(tempAttribClientRequestHandle);
		}
		handledAttributes.add("ClientRequestHandle");
	}
	
	protected static void handleContinuationPoint(String tempAttribContinuationPoint, 
			ADBBeanImplementation object, 
			Vector<String> handledAttributes) {
		if (tempAttribContinuationPoint!=null) {
			object.setContinuationPoint(tempAttribContinuationPoint);
		}
		handledAttributes.add("ContinuationPoint");
	}
	
	
	protected static void handleReturnAllProperties(String tempAttribReturnAllProperties, 
			ADBBeanImplementation object, 
			Vector<String> handledAttributes) throws ADBException {
		if (tempAttribReturnAllProperties!=null) {
			object.setReturnAllProperties(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(tempAttribReturnAllProperties));
		} else {
			throw new org.apache.axis2.databinding.ADBException("Required attribute ReturnAllProperties is missing");
		}
		handledAttributes.add("ReturnAllProperties");
	}
	

	protected static void handleReturnPropertyValues(String tempAttribReturnPropertyValues, 
			ADBBeanImplementation object, 
			Vector<String> handledAttributes) throws ADBException {
		if (tempAttribReturnPropertyValues!=null) {
			object.setReturnPropertyValues(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(tempAttribReturnPropertyValues));
		} else {
			throw new org.apache.axis2.databinding.ADBException("Required attribute ReturnPropertyValues is missing");
		}
		handledAttributes.add("ReturnPropertyValues");
	}

	
	protected static void handleReturnErrorText(String tempAttribReturnErrorText, 
			ADBBeanImplementation object, 
			Vector<String> handledAttributes) throws ADBException {
		if (tempAttribReturnErrorText!=null) {
			object.setReturnErrorText(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(tempAttribReturnErrorText));
		} else {
			throw new org.apache.axis2.databinding.ADBException("Required attribute ReturnErrorText is missing");
		}
		handledAttributes.add("ReturnErrorText");
	}
	
	
	protected static void handleName(String tempAttribName, 
			ADBBeanImplementation object, 
			Vector<String> handledAttributes) throws ADBException {
		if (tempAttribName!=null) {
			object.setName(tempAttribName);
		}
		handledAttributes.add("Name");
	}

	
	protected static void handleResultID(String tempAttribResultID, 
			ADBBeanImplementation object, 
			Vector<String> handledAttributes,
			javax.xml.stream.XMLStreamReader reader) {
		String prefix ="";
		String namespaceuri ="";
		if (tempAttribResultID!=null) {
			int index = tempAttribResultID.indexOf(":");
			if(index > -1) {
				prefix = tempAttribResultID.substring(0,index);
			} else {
				// i.e this is in default namespace
				prefix = "";
			}
			namespaceuri = reader.getNamespaceURI(prefix);
			object.setResultID(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToQName(tempAttribResultID,namespaceuri));
		}
		handledAttributes.add("ReqType");
	}
	
	
	protected static void handleMaxAge(String tempAttribMaxAge, 
			ADBBeanImplementation object, 
			Vector<String> handledAttributes) throws ADBException {
		if (tempAttribMaxAge!=null) {
			object.setMaxAge(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(tempAttribMaxAge));
		} else {
			object.setMaxAge(java.lang.Integer.MIN_VALUE);
		}
		handledAttributes.add("MaxAge");
	}
	
	
	protected static void handleRevisedSamplingRate(String tempAttribRevisedSamplingRate, 
			ADBBeanImplementation object, 
			Vector<String> handledAttributes) throws ADBException {
		if (tempAttribRevisedSamplingRate!=null) {
			object.setRevisedSamplingRate(
					org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(tempAttribRevisedSamplingRate));
		} else {
			object.setRevisedSamplingRate(java.lang.Integer.MIN_VALUE);
		}
		handledAttributes.add("RevisedSamplingRate");
	}
	
	
	protected static void handleServerSubHandle(String tempAttribServerSubHandle, 
			ADBBeanImplementation object, 
			Vector<String> handledAttributes) throws ADBException {
		if (tempAttribServerSubHandle!=null) {
			object.setServerSubHandle(tempAttribServerSubHandle);
		}
		handledAttributes.add("ServerSubHandle");
	}
	

	protected static void checkUnexpectedStartElements(javax.xml.stream.XMLStreamReader reader) throws XMLStreamException {
		if (reader.isStartElement()) {
			// A start element we are not expecting indicates a trailing invalid property
			throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
		}
	}

	
	protected static void goToAndcheckUnexpectedStartElements(javax.xml.stream.XMLStreamReader reader) throws XMLStreamException {
		goToNextStartElement(reader);
		checkUnexpectedStartElements(reader);
	}
	
	
	protected static boolean findStartElementNotPartOfTheArray(String element,
				javax.xml.stream.XMLStreamReader reader) throws XMLStreamException{ 
		// We should be at the end element, but make sure
		while (!reader.isEndElement())
			reader.next();
		// Step out of this element
		reader.next();
		// Step to next element event.
		while (!reader.isStartElement() && !reader.isEndElement())
			reader.next();
		if (reader.isEndElement()) {
			//two continuous end elements means we are exiting the xml structure
			return true;
		} else {
			if (new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/",element).equals(reader.getName())) {
				return false;
			}else{
				return true;
			}
		}
	}
	
	protected static org.apache.axiom.om.OMElement createOMElement(javax.xml.stream.XMLStreamReader reader) throws XMLStreamException {
		String content = reader.getElementText();

		org.apache.axiom.om.OMFactory fac = org.apache.axiom.om.OMAbstractFactory.getOMFactory();
		org.apache.axiom.om.OMNamespace omNs = fac.createOMNamespace("http://opcfoundation.org/webservices/XMLDA/1.0/", "");
		org.apache.axiom.om.OMElement valueValue = fac.createOMElement("Value", omNs);
		valueValue.addChild(fac.createOMText(valueValue, content));
		return valueValue;
	}
	
	
	protected static void goToNextStartElement(javax.xml.stream.XMLStreamReader reader) throws XMLStreamException {
		while (!reader.isStartElement() && !reader.isEndElement()) {
			reader.next();
		}
	}
	
	
	protected static void readErrorsElement(javax.xml.stream.XMLStreamReader reader, 
										ADBBeanImplementation object) throws Exception {
		goToNextStartElement(reader);
		java.util.ArrayList<Object> list = new java.util.ArrayList<Object>();
		if (reader.isStartElement() && new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/","Errors").equals(reader.getName())) {
			// Process the array and step past its final element's end.
			list.add(OPCError.Factory.parse(reader));

			//loop until we find a start element that is not part of this array
			boolean loopDone = false;
			while(!loopDone) {
				loopDone = findStartElementNotPartOfTheArray("Errors",reader);
				if(!loopDone) {
						list.add(OPCError.Factory.parse(reader));
				}
			}
			// call the converter utility  to convert and set the array

			object.setErrors((OPCError[])
					org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
							OPCError.class,
							list));
		}  // End of if for expected property start element
		goToNextStartElement(reader);
	}
	
	
	protected static void readPropertyNamesElement(javax.xml.stream.XMLStreamReader reader, 
			ADBBeanImplementation object) throws Exception {
		goToNextStartElement(reader);
		java.util.ArrayList<Object> list = new java.util.ArrayList<Object>();
		if (reader.isStartElement() && new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/","PropertyNames").equals(reader.getName())) {
			// Process the array and step past its final element's end.
			list.add(reader.getElementText());
			//loop until we find a start element that is not part of this array
			boolean loopDone = false;
			while(!loopDone) {
				loopDone = findStartElementNotPartOfTheArray("PropertyNames",reader);
				if(!loopDone) {
					list.add(reader.getElementText());
				}
			}
			// call the converter utility  to convert and set the array
			object.setPropertyNames((javax.xml.namespace.QName[])
					org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
							javax.xml.namespace.QName.class,list));

		}  // End of if for expected property start element
		goToNextStartElement(reader);
	}
	
	
	
	protected static void readOptionsElement(javax.xml.stream.XMLStreamReader reader, 
			ADBBeanImplementation object) throws Exception {
		goToNextStartElement(reader);
		if (reader.isStartElement() && new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/","Options").equals(reader.getName())) {
			object.setOptions(RequestOptions.Factory.parse(reader));
			reader.next();
		}  // End of if for expected property start element
		goToNextStartElement(reader);
	}
}
