package eu.ebbits.pwal.impl.driver.opcxmlda;

import org.apache.log4j.Logger;
import org.osgi.service.component.ComponentContext;

import eu.ebbits.pwal.api.driver.PWALEventsDelegate;
import eu.ebbits.pwal.api.driver.PWALServicesDelegate;
import eu.ebbits.pwal.api.driver.PWALVariablesDelegate;
import eu.ebbits.pwal.api.driver.opcxmlda.OPCDriver;
import eu.ebbits.pwal.impl.driver.PWALDriverImpl;
import eu.ebbits.pwal.impl.driver.opcxmlda.stub.OPCXML_DataAccessClient;

/**
 * PLC PWAL driver implementation, employing OPC.
 * 
 * The PLC PWAL adapter currently is oriented mostly to variables 
 * (as the current OPC connector mostly relies on a read-write approach).
 *  
 * Copyright (c) 2010-2012 the ebbits project. All Rights Reserved.
 *
 * @author	 ISMB
 * @version	%I%, %G%
 * @see	    eu.ebbits.pwal.api.driver.PWALDriver
 * @since	  PWAL 0.1.0
 */
public class OPCDriverImpl extends PWALDriverImpl implements OPCDriver {

	@SuppressWarnings("unused")
	private static Logger LOG = Logger.getLogger(OPCDriver.class.getName());

	OPCXML_DataAccessClient client;

	@Override
	public void init(ComponentContext context) {
		this.client = new OPCXML_DataAccessClient();
	}

	@Override
	public void run() {
		// TODO Auto-generated method stub
		
	}

	@Override
	protected PWALEventsDelegate initEventsDelegate() {
		return (PWALEventsDelegate) new OPCEventsDelegate(this);
	}
	
	@Override
	protected PWALServicesDelegate initServicesDelegate() {
		return (PWALServicesDelegate) new OPCServicesDelegate(this);
	}

	@Override
	protected PWALVariablesDelegate initVariablesDelegate() {
		return (PWALVariablesDelegate) new OPCVariablesDelegate(this);
	}

	public String getOpcXmlServerEndpoint() {
		return this.client.getOpcXmlServerEndpoint();
	}

	public void setOpcXmlServerEndpoint(String opcXmlServerEndpoint) {
		this.client.setOpcXmlServerEndpoint(opcXmlServerEndpoint);
	}

	public String getOpcXmlAccessProtocol() {
		return this.client.getOpcXmlAccessProtocol();
	}

	public void setOpcXmlAccessProtocol(String opcXmlAccessProtocol) {
		this.client.setOpcXmlAccessProtocol(opcXmlAccessProtocol);
	}

	public String getOpcXmlSymbolPath() {
		return this.client.getOpcXmlSymbolPath();
	}

	public void setOpcXmlSymbolPath(String opcXmlSymbolPath) {
		this.client.setOpcXmlSymbolPath(opcXmlSymbolPath);
	}

}
