package eu.ebbits.pwal.impl.driver.opcxmlda.stub;

public class Read extends ADBBeanImplementation {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
			"http://opcfoundation.org/webservices/XMLDA/1.0/",
			"Read",
			"ns1");

	private static final String NAME = Read.class.getSimpleName();
	
	protected String getClassName() {
		return this.getClass().getSimpleName();
	}
	
	/**
	 * field for Options
	 */


	protected RequestOptions localOptions ;

	/*  This tracker boolean wil be used to detect whether the user called the set method
	 *   for this attribute. It will be used to determine whether to include this field
	 *   in the serialized XML
	 */
	protected boolean localOptionsTracker = false ;



	/**
	 * field for ItemList
	 */
	protected ReadRequestItemList localItemList;

	/*  This tracker boolean wil be used to detect whether the user called the set method
	 *   for this attribute. It will be used to determine whether to include this field
	 *   in the serialized XML
	 */
	protected boolean localItemListTracker = false;

	/**
	 * Auto generated getter method
	 * @return ReadRequestItemList
	 */
	public  ReadRequestItemList getItemList() {
		return localItemList;
	}

	/**
	 * Auto generated setter method
	 * @param param ItemList
	 */
	public void setItemList(ReadRequestItemList param) {
		setProtectedFieldValueWithTracker("localItemList", "localItemListTracker", param);
	}

	
	protected void writeAttributes(org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter, String prefix, String namespace) 
			throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
		serializeAttribute(localOptionsTracker,localOptions,  "Options", factory, xmlWriter);
		serializeAttribute(localItemListTracker,localItemList, "ItemList", factory, xmlWriter);
		xmlWriter.writeEndElement();
	}



	/**
	 * databinding method to get an XML representation of this object
	 *
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
			throws org.apache.axis2.databinding.ADBException{

		java.util.ArrayList<Object> elementList = new java.util.ArrayList<Object>();
		java.util.ArrayList<Object> attribList = new java.util.ArrayList<Object>();

		addItem(localOptionsTracker,localOptions,"Options",elementList);
		addItem(localItemListTracker,localItemList,"ItemList",elementList);
		return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
	}



	/**
	 *  Factory class that keeps the parse method
	 */
	public static class Factory extends GenericFactory {

		/**
		 * static method to create the object
		 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
		 *			 If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
		 * Postcondition: If this object is an element, the reader is positioned at its end element
		 *			 If this object is a complex type, the reader is positioned at the end element of its outer element
		 */
		public static Read parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
			Read object = new Read();
			try {
				goToNextStartElement(reader);
				Read result = (Read) checkADBBeanType(NAME,reader); 
				if(result!=null) {
					return result;
				}
				reader.next();
				readOptionsElement(reader,object);
				if (reader.isStartElement() && new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/","ItemList").equals(reader.getName())) {
					object.setItemList(ReadRequestItemList.Factory.parse(reader));
					reader.next();
				}  // End of if for expected property start element
				checkUnexpectedStartElements(reader);
			} catch (javax.xml.stream.XMLStreamException e) {
				throw new java.lang.Exception(e);
			}
			return object;
		}
	}//end of factory class
}