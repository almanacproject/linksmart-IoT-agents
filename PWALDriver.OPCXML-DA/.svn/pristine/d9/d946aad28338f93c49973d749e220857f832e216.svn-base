package eu.ebbits.pwal.impl.driver.opcxmlda.stub;

public class SubscribeRequestItem extends ItemNameADBBeanImplementation {
	/* This type was generated from the piece of schema that had
		 name = SubscribeRequestItem
		 Namespace URI = http://opcfoundation.org/webservices/XMLDA/1.0/
		 Namespace Prefix = ns1
	 */

	private static final String NAME = SubscribeRequestItem.class.getSimpleName();

	protected String getClassName() {
		return this.getClass().getSimpleName();
	}


	/**
	 * field for ReqType
	 * This was an Attribute!
	 */


	protected javax.xml.namespace.QName localReqType ;


	/**
	 * Auto generated getter method
	 * @return javax.xml.namespace.QName
	 */
	public  javax.xml.namespace.QName getReqType() {
		return localReqType;
	}



	/**
	 * Auto generated setter method
	 * @param param ReqType
	 */
	public void setReqType(javax.xml.namespace.QName param) {

		this.localReqType=param;


	}



	/**
	 * field for ClientItemHandle
	 * This was an Attribute!
	 */


	protected String localClientItemHandle ;


	/**
	 * Auto generated getter method
	 * @return String
	 */
	public  String getClientItemHandle() {
		return localClientItemHandle;
	}



	/**
	 * Auto generated setter method
	 * @param param ClientItemHandle
	 */
	public void setClientItemHandle(String param) {

		this.localClientItemHandle=param;


	}


	/**
	 * field for Deadband
	 * This was an Attribute!
	 */


	protected float localDeadband ;


	/**
	 * Auto generated getter method
	 * @return float
	 */
	public  float getDeadband() {
		return localDeadband;
	}



	/**
	 * Auto generated setter method
	 * @param param Deadband
	 */
	public void setDeadband(float param) {

		this.localDeadband=param;


	}


	/**
	 * field for RequestedSamplingRate
	 * This was an Attribute!
	 */


	protected int localRequestedSamplingRate ;


	/**
	 * Auto generated getter method
	 * @return int
	 */
	public  int getRequestedSamplingRate() {
		return localRequestedSamplingRate;
	}



	/**
	 * Auto generated setter method
	 * @param param RequestedSamplingRate
	 */
	public void setRequestedSamplingRate(int param) {

		this.localRequestedSamplingRate=param;


	}


	/**
	 * field for EnableBuffering
	 * This was an Attribute!
	 */


	protected boolean localEnableBuffering ;


	/**
	 * Auto generated getter method
	 * @return boolean
	 */
	public  boolean getEnableBuffering() {
		return localEnableBuffering;
	}



	/**
	 * Auto generated setter method
	 * @param param EnableBuffering
	 */
	public void setEnableBuffering(boolean param) {

		this.localEnableBuffering=param;


	}


	/**
	 *
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement (
			final javax.xml.namespace.QName parentQName,
			final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



		org.apache.axiom.om.OMDataSource dataSource =
				new org.apache.axis2.databinding.ADBDataSource(this,parentQName) {

			public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
				SubscribeRequestItem.this.serialize(parentQName,factory,xmlWriter);
			}
		};
		return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
				parentQName,factory,dataSource);

	}

	
	protected void writeAttributes(org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter, String prefix, String namespace) 
			throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
		if (localItemPath != null) {
			writeAttribute("",
					"ItemPath",
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localItemPath), xmlWriter);
		}
		if (localReqType != null) {
			writeQNameAttribute("",
					"ReqType",
					localReqType, xmlWriter);
		}
		if (localItemName != null) {
			writeAttribute("",
					"ItemName",
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localItemName), xmlWriter);
		}
		if (localClientItemHandle != null) {
			writeAttribute("",
					"ClientItemHandle",
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localClientItemHandle), xmlWriter);
		}
		if (!java.lang.Float.isNaN(localDeadband)) {
			writeAttribute("",
					"Deadband",
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDeadband), xmlWriter);
		}
		if (localRequestedSamplingRate!=java.lang.Integer.MIN_VALUE) {
			writeAttribute("",
					"RequestedSamplingRate",
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRequestedSamplingRate), xmlWriter);
		}
		writeAttribute("",
				"EnableBuffering",
				org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEnableBuffering), xmlWriter);
		xmlWriter.writeEndElement();
	}


	/**
	 * databinding method to get an XML representation of this object
	 *
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
			throws org.apache.axis2.databinding.ADBException{


		java.util.ArrayList<Object> elementList = new java.util.ArrayList<Object>();
		java.util.ArrayList<Object> attribList = new java.util.ArrayList<Object>();


		attribList.add(new javax.xml.namespace.QName("","ItemPath"));
		attribList.add(localItemPath);
		attribList.add(new javax.xml.namespace.QName("","ReqType"));
		attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReqType));
		attribList.add(new javax.xml.namespace.QName("","ItemName"));
		attribList.add(localItemName);
		attribList.add(new javax.xml.namespace.QName("","ClientItemHandle"));
		attribList.add(localClientItemHandle);
		attribList.add(new javax.xml.namespace.QName("","Deadband"));
		attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDeadband));
		attribList.add(new javax.xml.namespace.QName("","RequestedSamplingRate"));
		attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRequestedSamplingRate));
		attribList.add(new javax.xml.namespace.QName("","EnableBuffering"));
		attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEnableBuffering));
		return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
	}



	/**
	 *  Factory class that keeps the parse method
	 */
	public static class Factory extends GenericFactory {




		/**
		 * static method to create the object
		 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
		 *			 If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
		 * Postcondition: If this object is an element, the reader is positioned at its end element
		 *			 If this object is a complex type, the reader is positioned at the end element of its outer element
		 */
		public static SubscribeRequestItem parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
			SubscribeRequestItem object =
					new SubscribeRequestItem();
			try {

				while (!reader.isStartElement() && !reader.isEndElement())
					reader.next();

				SubscribeRequestItem result = (SubscribeRequestItem) checkADBBeanType(NAME,reader); 
				if(result!=null) {
					return result;
				}
				
				// Note all attributes that were handled. Used to differ normal attributes
				// from anyAttributes.
				java.util.Vector<String> handledAttributes = new java.util.Vector<String>();

				// handle attribute "ItemPath"
				handleItemPath(reader.getAttributeValue(null,"ItemPath"),object,handledAttributes);

				// handle attribute "ReqType"
				handleReqType(reader.getAttributeValue(null,"ReqType"),object,handledAttributes,reader);

				// handle attribute "ItemName"
				handleItemPath(reader.getAttributeValue(null,"ItemName"),object,handledAttributes);

				// handle attribute "ClientItemHandle"
				handleClientItemHandle(reader.getAttributeValue(null,"ClientItemHandle"),object,handledAttributes);

				// handle attribute "Deadband"
				handleDeadband(reader.getAttributeValue(null,"Deadband"),object,handledAttributes);

				// handle attribute "RequestedSamplingRate"
				handleRequestedSamplingRate(reader.getAttributeValue(null,"RequestedSamplingRate"),object,handledAttributes);

				// handle attribute "EnableBuffering"
				handleEnableBuffering(reader.getAttributeValue(null,"EnableBuffering"),object,handledAttributes);

				reader.next();
			} catch (javax.xml.stream.XMLStreamException e) {
				throw new java.lang.Exception(e);
			}
			return object;
		}
	}//end of factory class
}

