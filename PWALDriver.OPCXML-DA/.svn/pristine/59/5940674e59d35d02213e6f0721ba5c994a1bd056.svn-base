package eu.ebbits.pwal.impl.driver.opcxmlda.stub;

public class ItemProperty implements org.apache.axis2.databinding.ADBBean{
	/* This type was generated from the piece of schema that had
		 name = ItemProperty
		 Namespace URI = http://opcfoundation.org/webservices/XMLDA/1.0/
		 Namespace Prefix = ns1
	 */


	private static java.lang.String generatePrefix(java.lang.String namespace) {
		if(namespace.equals("http://opcfoundation.org/webservices/XMLDA/1.0/")) {
			return "ns1";
		}
		return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
	}



	/**
	 * field for Value
	 */


	protected org.apache.axiom.om.OMElement localValue ;

	/*  This tracker boolean wil be used to detect whether the user called the set method
	 *   for this attribute. It will be used to determine whether to include this field
	 *   in the serialized XML
	 */
	protected boolean localValueTracker = false ;


	/**
	 * Auto generated getter method
	 * @return org.apache.axiom.om.OMElement
	 */
	public  org.apache.axiom.om.OMElement getValue() {
		return localValue;
	}



	/**
	 * Auto generated setter method
	 * @param param Value
	 */
	public void setValue(org.apache.axiom.om.OMElement param) {

		if (param != null) {
			//update the setting tracker
			localValueTracker = true;
		} else {
			localValueTracker = false;

		}

		this.localValue=param;


	}


	/**
	 * field for Name
	 * This was an Attribute!
	 */


	protected javax.xml.namespace.QName localName ;


	/**
	 * Auto generated getter method
	 * @return javax.xml.namespace.QName
	 */
	public  javax.xml.namespace.QName getName() {
		return localName;
	}



	/**
	 * Auto generated setter method
	 * @param param Name
	 */
	public void setName(javax.xml.namespace.QName param) {

		this.localName=param;


	}


	/**
	 * field for Description
	 * This was an Attribute!
	 */


	protected java.lang.String localDescription ;


	/**
	 * Auto generated getter method
	 * @return java.lang.String
	 */
	public  java.lang.String getDescription() {
		return localDescription;
	}



	/**
	 * Auto generated setter method
	 * @param param Description
	 */
	public void setDescription(java.lang.String param) {

		this.localDescription=param;


	}


	/**
	 * field for ItemPath
	 * This was an Attribute!
	 */


	protected java.lang.String localItemPath ;


	/**
	 * Auto generated getter method
	 * @return java.lang.String
	 */
	public  java.lang.String getItemPath() {
		return localItemPath;
	}



	/**
	 * Auto generated setter method
	 * @param param ItemPath
	 */
	public void setItemPath(java.lang.String param) {

		this.localItemPath=param;


	}


	/**
	 * field for ItemName
	 * This was an Attribute!
	 */


	protected java.lang.String localItemName ;


	/**
	 * Auto generated getter method
	 * @return java.lang.String
	 */
	public  java.lang.String getItemName() {
		return localItemName;
	}



	/**
	 * Auto generated setter method
	 * @param param ItemName
	 */
	public void setItemName(java.lang.String param) {

		this.localItemName=param;


	}


	/**
	 * field for ResultID
	 * This was an Attribute!
	 */


	protected javax.xml.namespace.QName localResultID ;


	/**
	 * Auto generated getter method
	 * @return javax.xml.namespace.QName
	 */
	public  javax.xml.namespace.QName getResultID() {
		return localResultID;
	}



	/**
	 * Auto generated setter method
	 * @param param ResultID
	 */
	public void setResultID(javax.xml.namespace.QName param) {

		this.localResultID=param;


	}


	/**
	 * isReaderMTOMAware
	 * @return true if the reader supports MTOM
	 */
	public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
		boolean isReaderMTOMAware = false;

		try{
			isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
		}catch(java.lang.IllegalArgumentException e) {
			isReaderMTOMAware = false;
		}
		return isReaderMTOMAware;
	}


	/**
	 *
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement (
			final javax.xml.namespace.QName parentQName,
			final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



		org.apache.axiom.om.OMDataSource dataSource =
				new org.apache.axis2.databinding.ADBDataSource(this,parentQName) {

			public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
				ItemProperty.this.serialize(parentQName,factory,xmlWriter);
			}
		};
		return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
				parentQName,factory,dataSource);

	}

	public void serialize(final javax.xml.namespace.QName parentQName,
			final org.apache.axiom.om.OMFactory factory,
			org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
					throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
		serialize(parentQName,factory,xmlWriter,false);
	}

	public void serialize(final javax.xml.namespace.QName parentQName,
			final org.apache.axiom.om.OMFactory factory,
			org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
			boolean serializeType)
					throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




		java.lang.String prefix = null;
		java.lang.String namespace = null;


		prefix = parentQName.getPrefix();
		namespace = parentQName.getNamespaceURI();

		if ((namespace != null) && (namespace.trim().length() > 0)) {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
			} else {
				if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		} else {
			xmlWriter.writeStartElement(parentQName.getLocalPart());
		}

		if (serializeType) {


			java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://opcfoundation.org/webservices/XMLDA/1.0/");
			if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
						namespacePrefix+":ItemProperty",
						xmlWriter);
			} else {
				writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
						"ItemProperty",
						xmlWriter);
			}


		}

		if (localName != null) {

			writeQNameAttribute("",
					"Name",
					localName, xmlWriter);


		}

		if (localDescription != null) {

			writeAttribute("",
					"Description",
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDescription), xmlWriter);


		}

		if (localItemPath != null) {

			writeAttribute("",
					"ItemPath",
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localItemPath), xmlWriter);


		}

		if (localItemName != null) {

			writeAttribute("",
					"ItemName",
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localItemName), xmlWriter);


		}

		if (localResultID != null) {

			writeQNameAttribute("",
					"ResultID",
					localResultID, xmlWriter);


		}
		if (localValueTracker) {
			namespace = "http://opcfoundation.org/webservices/XMLDA/1.0/";
			if (! namespace.equals("")) {
				prefix = xmlWriter.getPrefix(namespace);

				if (prefix == null) {
					prefix = generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"Value", namespace);
					xmlWriter.writeNamespace(prefix, namespace);
					xmlWriter.setPrefix(prefix, namespace);

				} else {
					xmlWriter.writeStartElement(namespace,"Value");
				}

			} else {
				xmlWriter.writeStartElement("Value");
			}


			if (localValue==null) {
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("Value cannot be null!!");

			}else{

				localValue.serialize(xmlWriter);

			}

			xmlWriter.writeEndElement();
		}
		xmlWriter.writeEndElement();


	}

	/**
	 * Util method to write an attribute with the ns prefix
	 */
	private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
			java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
		if (xmlWriter.getPrefix(namespace) == null) {
			xmlWriter.writeNamespace(prefix, namespace);
			xmlWriter.setPrefix(prefix, namespace);

		}

		xmlWriter.writeAttribute(namespace,attName,attValue);

	}

	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeAttribute(java.lang.String namespace,java.lang.String attName,
			java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
		if (namespace.equals(""))
		{
			xmlWriter.writeAttribute(attName,attValue);
		}
		else
		{
			registerPrefix(xmlWriter, namespace);
			xmlWriter.writeAttribute(namespace,attName,attValue);
		}
	}


	/**
	 * Util method to write an attribute without the ns prefix
	 */
	private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
			javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

		java.lang.String attributeNamespace = qname.getNamespaceURI();
		java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
		if (attributePrefix == null) {
			attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
		}
		java.lang.String attributeValue;
		if (attributePrefix.trim().length() > 0) {
			attributeValue = attributePrefix + ":" + qname.getLocalPart();
		} else {
			attributeValue = qname.getLocalPart();
		}

		if (namespace.equals("")) {
			xmlWriter.writeAttribute(attName, attributeValue);
		} else {
			registerPrefix(xmlWriter, namespace);
			xmlWriter.writeAttribute(namespace, attName, attributeValue);
		}
	}
	/**
	 *  method to handle Qnames
	 */

	private void writeQName(javax.xml.namespace.QName qname,
			javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
		java.lang.String namespaceURI = qname.getNamespaceURI();
		if (namespaceURI != null) {
			java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
			if (prefix == null) {
				prefix = generatePrefix(namespaceURI);
				xmlWriter.writeNamespace(prefix, namespaceURI);
				xmlWriter.setPrefix(prefix,namespaceURI);
			}

			if (prefix.trim().length() > 0) {
				xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			} else {
				// i.e this is the default namespace
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}

		} else {
			xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
		}
	}

	private void writeQNames(javax.xml.namespace.QName[] qnames,
			javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

		if (qnames != null) {
			// we have to store this data until last moment since it is not possible to write any
			// namespace data after writing the charactor data
			java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
			java.lang.String namespaceURI = null;
			java.lang.String prefix = null;

			for (int i = 0; i < qnames.length; i++) {
				if (i > 0) {
					stringToWrite.append(" ");
				}
				namespaceURI = qnames[i].getNamespaceURI();
				if (namespaceURI != null) {
					prefix = xmlWriter.getPrefix(namespaceURI);
					if ((prefix == null) || (prefix.length() == 0)) {
						prefix = generatePrefix(namespaceURI);
						xmlWriter.writeNamespace(prefix, namespaceURI);
						xmlWriter.setPrefix(prefix,namespaceURI);
					}

					if (prefix.trim().length() > 0) {
						stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				} else {
					stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
				}
			}
			xmlWriter.writeCharacters(stringToWrite.toString());
		}

	}


	/**
	 * Register a namespace prefix
	 */
	private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
		java.lang.String prefix = xmlWriter.getPrefix(namespace);

		if (prefix == null) {
			prefix = generatePrefix(namespace);

			while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
				prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
			}

			xmlWriter.writeNamespace(prefix, namespace);
			xmlWriter.setPrefix(prefix, namespace);
		}

		return prefix;
	}



	/**
	 * databinding method to get an XML representation of this object
	 *
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
			throws org.apache.axis2.databinding.ADBException{



		java.util.ArrayList elementList = new java.util.ArrayList();
		java.util.ArrayList attribList = new java.util.ArrayList();

		if (localValueTracker) {
			elementList.add(new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/",
					"Value"));

			if (localValue != null) {
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localValue));
			} else {
				throw new org.apache.axis2.databinding.ADBException("Value cannot be null!!");
			}
		}
		attribList.add(
				new javax.xml.namespace.QName("","Name"));

		attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localName));

		attribList.add(
				new javax.xml.namespace.QName("","Description"));

		attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDescription));

		attribList.add(
				new javax.xml.namespace.QName("","ItemPath"));

		attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localItemPath));

		attribList.add(
				new javax.xml.namespace.QName("","ItemName"));

		attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localItemName));

		attribList.add(
				new javax.xml.namespace.QName("","ResultID"));

		attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localResultID));


		return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



	}



	/**
	 *  Factory class that keeps the parse method
	 */
	public static class Factory{




		/**
		 * static method to create the object
		 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
		 *			 If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
		 * Postcondition: If this object is an element, the reader is positioned at its end element
		 *			 If this object is a complex type, the reader is positioned at the end element of its outer element
		 */
		public static ItemProperty parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
			ItemProperty object =
					new ItemProperty();

			int event;
			java.lang.String nillableValue = null;
			java.lang.String prefix ="";
			java.lang.String namespaceuri ="";
			try {

				while (!reader.isStartElement() && !reader.isEndElement())
					reader.next();


				if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null) {
					java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
							"type");
					if (fullTypeName!=null) {
						java.lang.String nsPrefix = null;
						if (fullTypeName.indexOf(":") > -1) {
							nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
						}
						nsPrefix = nsPrefix==null?"":nsPrefix;

						java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

						if (!"ItemProperty".equals(type)) {
							//find namespace for the prefix
							java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
							return (ItemProperty)ExtensionMapper.getTypeObject(
									nsUri,type,reader);
						}


					}


				}




				// Note all attributes that were handled. Used to differ normal attributes
				// from anyAttributes.
				java.util.Vector handledAttributes = new java.util.Vector();



				// handle attribute "Name"
				java.lang.String tempAttribName =

						reader.getAttributeValue(null,"Name");

				if (tempAttribName!=null) {
					java.lang.String content = tempAttribName;

					int index = tempAttribName.indexOf(":");
					if(index > -1) {
						prefix = tempAttribName.substring(0,index);
					} else {
						// i.e this is in default namesace
						prefix = "";
					}
					namespaceuri = reader.getNamespaceURI(prefix);

					object.setName(
							org.apache.axis2.databinding.utils.ConverterUtil.convertToQName(tempAttribName,namespaceuri));

				} else {

				}
				handledAttributes.add("Name");

				// handle attribute "Description"
				java.lang.String tempAttribDescription =

						reader.getAttributeValue(null,"Description");

				if (tempAttribDescription!=null) {
					java.lang.String content = tempAttribDescription;

					object.setDescription(
							org.apache.axis2.databinding.utils.ConverterUtil.convertToString(tempAttribDescription));

				} else {

				}
				handledAttributes.add("Description");

				// handle attribute "ItemPath"
				java.lang.String tempAttribItemPath =

				reader.getAttributeValue(null,"ItemPath");

				if (tempAttribItemPath!=null) {
					java.lang.String content = tempAttribItemPath;

					object.setItemPath(
							org.apache.axis2.databinding.utils.ConverterUtil.convertToString(tempAttribItemPath));

				} else {

				}
				handledAttributes.add("ItemPath");

				// handle attribute "ItemName"
				java.lang.String tempAttribItemName =

				reader.getAttributeValue(null,"ItemName");

				if (tempAttribItemName!=null) {
					java.lang.String content = tempAttribItemName;

					object.setItemName(
							org.apache.axis2.databinding.utils.ConverterUtil.convertToString(tempAttribItemName));

				} else {

				}
				handledAttributes.add("ItemName");

				// handle attribute "ResultID"
				java.lang.String tempAttribResultID =

				reader.getAttributeValue(null,"ResultID");

				if (tempAttribResultID!=null) {
					java.lang.String content = tempAttribResultID;

					int index = tempAttribResultID.indexOf(":");
					if(index > -1) {
						prefix = tempAttribResultID.substring(0,index);
					} else {
						// i.e this is in default namesace
						prefix = "";
					}
					namespaceuri = reader.getNamespaceURI(prefix);

					object.setResultID(
							org.apache.axis2.databinding.utils.ConverterUtil.convertToQName(tempAttribResultID,namespaceuri));

				} else {

				}
				handledAttributes.add("ResultID");


				reader.next();


				while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

				if (reader.isStartElement()) {

					java.lang.String content = reader.getElementText();

					org.apache.axiom.om.OMFactory fac = org.apache.axiom.om.OMAbstractFactory.getOMFactory();
					org.apache.axiom.om.OMNamespace omNs = fac.createOMNamespace("http://opcfoundation.org/webservices/XMLDA/1.0/", "");
					org.apache.axiom.om.OMElement _valueValue = fac.createOMElement("Value", omNs);
					_valueValue.addChild(fac.createOMText(_valueValue, content));
					object.setValue(_valueValue);

					reader.next();

				}  // End of if for expected property start element

				else {

				}

				while (!reader.isStartElement() && !reader.isEndElement())
					reader.next();

				if (reader.isStartElement())
					// A start element we are not expecting indicates a trailing invalid property
					throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());




			} catch (javax.xml.stream.XMLStreamException e) {
				throw new java.lang.Exception(e);
			}

			return object;
		}

	}//end of factory class



}
