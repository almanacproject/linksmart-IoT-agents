package eu.ebbits.pwal.impl.driver.opcxmlda.stub;

public class ServerStatus extends SerializableADBBeanImplementation {
	/* This type was generated from the piece of schema that had
		 name = ServerStatus
		 Namespace URI = http://opcfoundation.org/webservices/XMLDA/1.0/
		 Namespace Prefix = ns1
	 */

	private static final String NAME = ServerStatus.class.getSimpleName();

	protected String getClassName() {
		return this.getClass().getSimpleName();
	}

	/**
	 * field for StatusInfo
	 */


	protected String localStatusInfo ;

	/*  This tracker boolean wil be used to detect whether the user called the set method
	 *   for this attribute. It will be used to determine whether to include this field
	 *   in the serialized XML
	 */
	protected boolean localStatusInfoTracker = false ;


	/**
	 * Auto generated getter method
	 * @return String
	 */
	public  String getStatusInfo() {
		return localStatusInfo;
	}



	/**
	 * Auto generated setter method
	 * @param param StatusInfo
	 */
	public void setStatusInfo(String param) {

		if (param != null) {
			//update the setting tracker
			localStatusInfoTracker = true;
		} else {
			localStatusInfoTracker = false;

		}

		this.localStatusInfo=param;


	}


	/**
	 * field for VendorInfo
	 */


	protected String localVendorInfo ;

	/*  This tracker boolean wil be used to detect whether the user called the set method
	 *   for this attribute. It will be used to determine whether to include this field
	 *   in the serialized XML
	 */
	protected boolean localVendorInfoTracker = false ;


	/**
	 * Auto generated getter method
	 * @return String
	 */
	public  String getVendorInfo() {
		return localVendorInfo;
	}



	/**
	 * Auto generated setter method
	 * @param param VendorInfo
	 */
	public void setVendorInfo(String param) {

		if (param != null) {
			//update the setting tracker
			localVendorInfoTracker = true;
		} else {
			localVendorInfoTracker = false;

		}

		this.localVendorInfo=param;


	}


	/**
	 * field for SupportedLocaleIDs
	 * This was an Array!
	 */


	protected String[] localSupportedLocaleIDs ;

	/*  This tracker boolean wil be used to detect whether the user called the set method
	 *   for this attribute. It will be used to determine whether to include this field
	 *   in the serialized XML
	 */
	protected boolean localSupportedLocaleIDsTracker = false ;


	/**
	 * Auto generated getter method
	 * @return String[]
	 */
	public  String[] getSupportedLocaleIDs() {
		return localSupportedLocaleIDs;
	}






	/**
	 * validate the array for SupportedLocaleIDs
	 */
	protected void validateSupportedLocaleIDs(String[] param) {

	}


	/**
	 * Auto generated setter method
	 * @param param SupportedLocaleIDs
	 */
	public void setSupportedLocaleIDs(String[] param) {
		String[] supportedLocaleIDsToUse = param.clone();
		
		validateSupportedLocaleIDs(supportedLocaleIDsToUse);


		if (supportedLocaleIDsToUse != null) {
			//update the setting tracker
			localSupportedLocaleIDsTracker = true;
		} else {
			localSupportedLocaleIDsTracker = false;

		}

		this.localSupportedLocaleIDs=supportedLocaleIDsToUse;
	}



	/**
	 * Auto generated add method for the array for convenience
	 * @param param String
	 */
	public void addSupportedLocaleIDs(String param) {
		if (localSupportedLocaleIDs == null) {
			localSupportedLocaleIDs = new String[]{};
		}


		//update the setting tracker
		localSupportedLocaleIDsTracker = true;


		java.util.List list =
				org.apache.axis2.databinding.utils.ConverterUtil.toList(localSupportedLocaleIDs);
		list.add(param);
		this.localSupportedLocaleIDs =
				(String[])list.toArray(
						new String[list.size()]);

	}


	/**
	 * field for SupportedInterfaceVersions
	 * This was an Array!
	 */


	protected InterfaceVersion[] localSupportedInterfaceVersions ;

	/*  This tracker boolean wil be used to detect whether the user called the set method
	 *   for this attribute. It will be used to determine whether to include this field
	 *   in the serialized XML
	 */
	protected boolean localSupportedInterfaceVersionsTracker = false ;


	/**
	 * Auto generated getter method
	 * @return InterfaceVersion[]
	 */
	public  InterfaceVersion[] getSupportedInterfaceVersions() {
		return localSupportedInterfaceVersions;
	}






	/**
	 * validate the array for SupportedInterfaceVersions
	 */
	protected void validateSupportedInterfaceVersions(InterfaceVersion[] param) {

	}


	/**
	 * Auto generated setter method
	 * @param param SupportedInterfaceVersions
	 */
	public void setSupportedInterfaceVersions(InterfaceVersion[] param) {
		InterfaceVersion[] supportedInterfaceVersionToUse = param.clone();
		
		validateSupportedInterfaceVersions(supportedInterfaceVersionToUse);


		if (supportedInterfaceVersionToUse != null) {
			//update the setting tracker
			localSupportedInterfaceVersionsTracker = true;
		} else {
			localSupportedInterfaceVersionsTracker = false;

		}

		this.localSupportedInterfaceVersions=supportedInterfaceVersionToUse;
	}



	/**
	 * Auto generated add method for the array for convenience
	 * @param param InterfaceVersion
	 */
	public void addSupportedInterfaceVersions(InterfaceVersion param) {
		if (localSupportedInterfaceVersions == null) {
			localSupportedInterfaceVersions = new InterfaceVersion[]{};
		}


		//update the setting tracker
		localSupportedInterfaceVersionsTracker = true;


		java.util.List list =
				org.apache.axis2.databinding.utils.ConverterUtil.toList(localSupportedInterfaceVersions);
		list.add(param);
		this.localSupportedInterfaceVersions =
				(InterfaceVersion[])list.toArray(
						new InterfaceVersion[list.size()]);

	}


	/**
	 * field for StartTime
	 * This was an Attribute!
	 */


	protected java.util.Calendar localStartTime ;


	/**
	 * Auto generated getter method
	 * @return java.util.Calendar
	 */
	public  java.util.Calendar getStartTime() {
		return localStartTime;
	}



	/**
	 * Auto generated setter method
	 * @param param StartTime
	 */
	public void setStartTime(java.util.Calendar param) {

		this.localStartTime=param;


	}


	/**
	 * field for ProductVersion
	 * This was an Attribute!
	 */


	protected String localProductVersion ;


	/**
	 * Auto generated getter method
	 * @return String
	 */
	public  String getProductVersion() {
		return localProductVersion;
	}



	/**
	 * Auto generated setter method
	 * @param param ProductVersion
	 */
	public void setProductVersion(String param) {

		this.localProductVersion=param;


	}


	/**
	 * isReaderMTOMAware
	 * @return true if the reader supports MTOM
	 */
	public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
		boolean isReaderMTOMAware = false;

		try{
			isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
		}catch(java.lang.IllegalArgumentException e) {
			isReaderMTOMAware = false;
		}
		return isReaderMTOMAware;
	}


	/**
	 *
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement (
			final javax.xml.namespace.QName parentQName,
			final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



		org.apache.axiom.om.OMDataSource dataSource =
				new org.apache.axis2.databinding.ADBDataSource(this,parentQName) {

			public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
				ServerStatus.this.serialize(parentQName,factory,xmlWriter);
			}
		};
		return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
				parentQName,factory,dataSource);

	}


	protected void writeAttributes(org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter, String prefix, String namespace) 
			throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
		if (localStartTime != null) {
			writeAttribute("",
					"StartTime",
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStartTime), xmlWriter);
		}
		else {
			throw new org.apache.axis2.databinding.ADBException("required attribute localStartTime is null");
		}
		if (localProductVersion != null) {
			writeAttribute("",
					"ProductVersion",
					org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localProductVersion), xmlWriter);
		}
		if (localStatusInfoTracker) {
			namespace = "http://opcfoundation.org/webservices/XMLDA/1.0/";
			if (! namespace.equals("")) {
				prefix = xmlWriter.getPrefix(namespace);
				if (prefix == null) {
					prefix = generatePrefix(namespace);
					xmlWriter.writeStartElement(prefix,"StatusInfo", namespace);
					xmlWriter.writeNamespace(prefix, namespace);
					xmlWriter.setPrefix(prefix, namespace);
				} else {
					xmlWriter.writeStartElement(namespace,"StatusInfo");
				}
			} else {
				xmlWriter.writeStartElement("StatusInfo");
			}
			if (localStatusInfo==null) {
				// write the nil attribute
				throw new org.apache.axis2.databinding.ADBException("StatusInfo cannot be null!!");
			}else{
				xmlWriter.writeCharacters(localStatusInfo);
			}
			xmlWriter.writeEndElement();
		} if (localVendorInfoTracker) {
			namespace = "http://opcfoundation.org/webservices/XMLDA/1.0/";
			if (! namespace.equals("")) {
				prefix = xmlWriter.getPrefix(namespace);
				if (prefix == null) {
					prefix = generatePrefix(namespace);
					xmlWriter.writeStartElement(prefix,"VendorInfo", namespace);
					xmlWriter.writeNamespace(prefix, namespace);
					xmlWriter.setPrefix(prefix, namespace);
				} else {
					xmlWriter.writeStartElement(namespace,"VendorInfo");
				}
			} else {
				xmlWriter.writeStartElement("VendorInfo");
			}
			if (localVendorInfo==null) {
				// write the nil attribute
				throw new org.apache.axis2.databinding.ADBException("VendorInfo cannot be null!!");
			}else{
				xmlWriter.writeCharacters(localVendorInfo);
			}
			xmlWriter.writeEndElement();
		} if (localSupportedLocaleIDsTracker) {
			if (localSupportedLocaleIDs!=null) {
				namespace = "http://opcfoundation.org/webservices/XMLDA/1.0/";
				boolean emptyNamespace = namespace == null || namespace.length() == 0;
				prefix =  emptyNamespace ? null : xmlWriter.getPrefix(namespace);
				for (int i = 0;i < localSupportedLocaleIDs.length;i++) {
					if (localSupportedLocaleIDs[i] != null) {
						if (!emptyNamespace) {
							if (prefix == null) {
								String prefix2 = generatePrefix(namespace);
								xmlWriter.writeStartElement(prefix2,"SupportedLocaleIDs", namespace);
								xmlWriter.writeNamespace(prefix2, namespace);
								xmlWriter.setPrefix(prefix2, namespace);
							} else {
								xmlWriter.writeStartElement(namespace,"SupportedLocaleIDs");
							}
						} else {
							xmlWriter.writeStartElement("SupportedLocaleIDs");
						}
						xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSupportedLocaleIDs[i]));
						xmlWriter.writeEndElement();
					} else {
						// we have to do nothing since minOccurs is zero
					}
				}
			} else {
				throw new org.apache.axis2.databinding.ADBException("SupportedLocaleIDs cannot be null!!");
			}
		} if (localSupportedInterfaceVersionsTracker) {
			if (localSupportedInterfaceVersions!=null) {
				for (int i = 0;i < localSupportedInterfaceVersions.length;i++) {
					if (localSupportedInterfaceVersions[i] != null) {
						localSupportedInterfaceVersions[i].serialize(new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/","SupportedInterfaceVersions"),
								factory,xmlWriter);
					} else {
						// we don't have to do any thing since minOccures is zero
					}
				}
			} else {
				throw new org.apache.axis2.databinding.ADBException("SupportedInterfaceVersions cannot be null!!");
			}
		}
		xmlWriter.writeEndElement();
	}


	/**
	 * databinding method to get an XML representation of this object
	 *
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
			throws org.apache.axis2.databinding.ADBException{



		java.util.ArrayList elementList = new java.util.ArrayList();
		java.util.ArrayList attribList = new java.util.ArrayList();

		if (localStatusInfoTracker) {
			elementList.add(new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/",
					"StatusInfo"));

			if (localStatusInfo != null) {
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStatusInfo));
			} else {
				throw new org.apache.axis2.databinding.ADBException("StatusInfo cannot be null!!");
			}
		} if (localVendorInfoTracker) {
			elementList.add(new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/",
					"VendorInfo"));

			if (localVendorInfo != null) {
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localVendorInfo));
			} else {
				throw new org.apache.axis2.databinding.ADBException("VendorInfo cannot be null!!");
			}
		} if (localSupportedLocaleIDsTracker) {
			if (localSupportedLocaleIDs!=null) {
				for (int i = 0;i < localSupportedLocaleIDs.length;i++) {

					if (localSupportedLocaleIDs[i] != null) {
						elementList.add(new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/",
								"SupportedLocaleIDs"));
						elementList.add(
								org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSupportedLocaleIDs[i]));
					} else {

						// have to do nothing

					}


				}
			} else {

				throw new org.apache.axis2.databinding.ADBException("SupportedLocaleIDs cannot be null!!");

			}

		} if (localSupportedInterfaceVersionsTracker) {
			if (localSupportedInterfaceVersions!=null) {
				for (int i = 0;i < localSupportedInterfaceVersions.length;i++) {

					if (localSupportedInterfaceVersions[i] != null) {
						elementList.add(new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/",
								"SupportedInterfaceVersions"));
						elementList.add(localSupportedInterfaceVersions[i]);
					} else {

						// nothing to do

					}

				}
			} else {

				throw new org.apache.axis2.databinding.ADBException("SupportedInterfaceVersions cannot be null!!");

			}

		}
		attribList.add(
				new javax.xml.namespace.QName("","StartTime"));

		attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStartTime));

		attribList.add(
				new javax.xml.namespace.QName("","ProductVersion"));

		attribList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localProductVersion));


		return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



	}



	/**
	 *  Factory class that keeps the parse method
	 */
	public static class Factory extends GenericFactory {

		/**
		 * static method to create the object
		 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
		 *			 If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
		 * Postcondition: If this object is an element, the reader is positioned at its end element
		 *			 If this object is a complex type, the reader is positioned at the end element of its outer element
		 */
		public static ServerStatus parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
			ServerStatus object =
					new ServerStatus();

			int event;
			String nillableValue = null;
			String prefix ="";
			String namespaceuri ="";
			try {

				while (!reader.isStartElement() && !reader.isEndElement())
					reader.next();


				if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null) {
					String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
							"type");
					if (fullTypeName!=null) {
						String nsPrefix = null;
						if (fullTypeName.indexOf(":") > -1) {
							nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
						}
						nsPrefix = nsPrefix==null?"":nsPrefix;

						String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

						if (!"ServerStatus".equals(type)) {
							//find namespace for the prefix
							String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
							return (ServerStatus)ExtensionMapper.getTypeObject(
									nsUri,type,reader);
						}
					}
				}

				// Note all attributes that were handled. Used to differ normal attributes
				// from anyAttributes.
				java.util.Vector<String> handledAttributes = new java.util.Vector<String>();

				// handle attribute "StartTime"
				String tempAttribStartTime = reader.getAttributeValue(null,"StartTime");
				if (tempAttribStartTime!=null) {
					object.setStartTime(
							org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(tempAttribStartTime));
				} else {
					throw new org.apache.axis2.databinding.ADBException("Required attribute StartTime is missing");
				}
				handledAttributes.add("StartTime");

				// handle attribute "ProductVersion"
				String tempAttribProductVersion = reader.getAttributeValue(null,"ProductVersion");
				if (tempAttribProductVersion!=null) {
					object.setProductVersion(
							org.apache.axis2.databinding.utils.ConverterUtil.convertToString(tempAttribProductVersion));
				}
				handledAttributes.add("ProductVersion");

				reader.next();

				java.util.ArrayList list3 = new java.util.ArrayList();

				java.util.ArrayList list4 = new java.util.ArrayList();


				while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

				if (reader.isStartElement() && new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/","StatusInfo").equals(reader.getName())) {

					String content = reader.getElementText();

					object.setStatusInfo(
							org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

					reader.next();

				}  // End of if for expected property start element

				else {

				}


				while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

				if (reader.isStartElement() && new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/","VendorInfo").equals(reader.getName())) {

					String content = reader.getElementText();

					object.setVendorInfo(
							org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

					reader.next();

				}  // End of if for expected property start element

				else {

				}


				while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

				if (reader.isStartElement() && new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/","SupportedLocaleIDs").equals(reader.getName())) {



					// Process the array and step past its final element's end.
					list3.add(reader.getElementText());

					//loop until we find a start element that is not part of this array
					boolean loopDone3 = false;
					while(!loopDone3) {
						// Ensure we are at the EndElement
						while (!reader.isEndElement()) {
							reader.next();
						}
						// Step out of this element
						reader.next();
						// Step to next element event.
						while (!reader.isStartElement() && !reader.isEndElement())
							reader.next();
						if (reader.isEndElement()) {
							//two continuous end elements means we are exiting the xml structure
							loopDone3 = true;
						} else {
							if (new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/","SupportedLocaleIDs").equals(reader.getName())) {
								list3.add(reader.getElementText());

							}else{
								loopDone3 = true;
							}
						}
					}
					// call the converter utility  to convert and set the array

					object.setSupportedLocaleIDs((String[])
							list3.toArray(new String[list3.size()]));

				}  // End of if for expected property start element

				else {

				}


				while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

				if (reader.isStartElement() && new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/","SupportedInterfaceVersions").equals(reader.getName())) {



					// Process the array and step past its final element's end.
					list4.add(InterfaceVersion.Factory.parse(reader));

					//loop until we find a start element that is not part of this array
					boolean loopDone4 = false;
					while(!loopDone4) {
						// We should be at the end element, but make sure
						while (!reader.isEndElement())
							reader.next();
						// Step out of this element
						reader.next();
						// Step to next element event.
						while (!reader.isStartElement() && !reader.isEndElement())
							reader.next();
						if (reader.isEndElement()) {
							//two continuous end elements means we are exiting the xml structure
							loopDone4 = true;
						} else {
							if (new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/","SupportedInterfaceVersions").equals(reader.getName())) {
								list4.add(InterfaceVersion.Factory.parse(reader));

							}else{
								loopDone4 = true;
							}
						}
					}
					// call the converter utility  to convert and set the array

					object.setSupportedInterfaceVersions((InterfaceVersion[])
							org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
									InterfaceVersion.class,
									list4));

				}  // End of if for expected property start element

				else {

				}

				while (!reader.isStartElement() && !reader.isEndElement())
					reader.next();

				if (reader.isStartElement())
					// A start element we are not expecting indicates a trailing invalid property
					throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());




			} catch (javax.xml.stream.XMLStreamException e) {
				throw new java.lang.Exception(e);
			}

			return object;
		}

	}//end of factory class



}

