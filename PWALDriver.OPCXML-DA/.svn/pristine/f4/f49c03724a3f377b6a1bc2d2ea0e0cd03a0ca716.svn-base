package eu.ebbits.pwal.impl.driver.opcxmlda.stub;

public class GetPropertiesResponse extends ADBBeanImplementation {

	public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
			"http://opcfoundation.org/webservices/XMLDA/1.0/",
			"GetPropertiesResponse",
			"ns1");

	private static final String NAME = GetPropertiesResponse.class.getSimpleName();
	
	protected String getClassName() {
		return this.getClass().getSimpleName();
	}


	/**
	 * field for GetPropertiesResult
	 */


	protected ReplyBase localGetPropertiesResult ;

	/*  This tracker boolean wil be used to detect whether the user called the set method
	 *   for this attribute. It will be used to determine whether to include this field
	 *   in the serialized XML
	 */
	protected boolean localGetPropertiesResultTracker = false ;


	/**
	 * Auto generated getter method
	 * @return ReplyBase
	 */
	public  ReplyBase getGetPropertiesResult() {
		return localGetPropertiesResult;
	}



	/**
	 * Auto generated setter method
	 * @param param GetPropertiesResult
	 */
	public void setGetPropertiesResult(ReplyBase param) {

		if (param != null) {
			//update the setting tracker
			localGetPropertiesResultTracker = true;
		} else {
			localGetPropertiesResultTracker = false;

		}

		this.localGetPropertiesResult=param;


	}


	/**
	 * field for PropertyLists
	 * This was an Array!
	 */


	protected PropertyReplyList[] localPropertyLists ;

	/*  This tracker boolean wil be used to detect whether the user called the set method
	 *   for this attribute. It will be used to determine whether to include this field
	 *   in the serialized XML
	 */
	protected boolean localPropertyListsTracker = false ;


	/**
	 * Auto generated getter method
	 * @return PropertyReplyList[]
	 */
	public  PropertyReplyList[] getPropertyLists() {
		return localPropertyLists;
	}






	/**
	 * validate the array for PropertyLists
	 */
	protected void validatePropertyLists(PropertyReplyList[] param) {

	}


	/**
	 * Auto generated setter method
	 * @param param PropertyLists
	 */
	public void setPropertyLists(PropertyReplyList[] param) {
		PropertyReplyList[] propertyListsToSet = param.clone();
		
		validatePropertyLists(propertyListsToSet);


		if (propertyListsToSet != null) {
			//update the setting tracker
			localPropertyListsTracker = true;
		} else {
			localPropertyListsTracker = false;

		}

		this.localPropertyLists=propertyListsToSet;
	}



	/**
	 * Auto generated add method for the array for convenience
	 * @param param PropertyReplyList
	 */
	public void addPropertyLists(PropertyReplyList param) {
		if (localPropertyLists == null) {
			localPropertyLists = new PropertyReplyList[]{};
		}


		//update the setting tracker
		localPropertyListsTracker = true;


		java.util.List list =
				org.apache.axis2.databinding.utils.ConverterUtil.toList(localPropertyLists);
		list.add(param);
		this.localPropertyLists =
				(PropertyReplyList[])list.toArray(
						new PropertyReplyList[list.size()]);

	}


	/**
	 * field for Errors
	 * This was an Array!
	 */


	protected OPCError[] localErrors ;

	/*  This tracker boolean wil be used to detect whether the user called the set method
	 *   for this attribute. It will be used to determine whether to include this field
	 *   in the serialized XML
	 */
	protected boolean localErrorsTracker = false ;


	/**
	 * Auto generated getter method
	 * @return OPCError[]
	 */
	public  OPCError[] getErrors() {
		return localErrors;
	}






	/**
	 * validate the array for Errors
	 */
	protected void validateErrors(OPCError[] param) {

	}


	/**
	 * Auto generated setter method
	 * @param param Errors
	 */
	public void setErrors(OPCError[] param) {
		OPCError[] errorsToUse = param.clone();
				
		validateErrors(errorsToUse);


		if (errorsToUse != null) {
			//update the setting tracker
			localErrorsTracker = true;
		} else {
			localErrorsTracker = false;

		}

		this.localErrors=errorsToUse;
	}



	/**
	 * Auto generated add method for the array for convenience
	 * @param param OPCError
	 */
	public void addErrors(OPCError param) {
		if (localErrors == null) {
			localErrors = new OPCError[]{};
		}


		//update the setting tracker
		localErrorsTracker = true;


		java.util.List list =
				org.apache.axis2.databinding.utils.ConverterUtil.toList(localErrors);
		list.add(param);
		this.localErrors =
				(OPCError[])list.toArray(
						new OPCError[list.size()]);

	}


	/**
	 *
	 * @param parentQName
	 * @param factory
	 * @return org.apache.axiom.om.OMElement
	 */
	public org.apache.axiom.om.OMElement getOMElement (
			final javax.xml.namespace.QName parentQName,
			final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



		org.apache.axiom.om.OMDataSource dataSource =
				new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME) {

			public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
				GetPropertiesResponse.this.serialize(MY_QNAME,factory,xmlWriter);
			}
		};
		return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
				MY_QNAME,factory,dataSource);

	}

	protected void writeAttributes(org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter, String prefix, String namespace) 
			throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
		if (localGetPropertiesResultTracker) {
			if (localGetPropertiesResult==null) {
				throw new org.apache.axis2.databinding.ADBException("GetPropertiesResult cannot be null!!");
			}
			localGetPropertiesResult.serialize(new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/","GetPropertiesResult"),
					factory,xmlWriter);
		} if (localPropertyListsTracker) {
			if (localPropertyLists!=null) {
				for (int i = 0;i < localPropertyLists.length;i++) {
					if (localPropertyLists[i] != null) {
						localPropertyLists[i].serialize(new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/","PropertyLists"),
								factory,xmlWriter);
					} else {
						// we don't have to do any thing since minOccures is zero
					}
				}
			} else {
				throw new org.apache.axis2.databinding.ADBException("PropertyLists cannot be null!!");
			}
		} if (localErrorsTracker) {
			if (localErrors!=null) {
				for (int i = 0;i < localErrors.length;i++) {
					if (localErrors[i] != null) {
						localErrors[i].serialize(new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/","Errors"),
								factory,xmlWriter);
					} else {
						// we don't have to do any thing since minOccures is zero
					}
				}
			} else {
				throw new org.apache.axis2.databinding.ADBException("Errors cannot be null!!");
			}
		}
		xmlWriter.writeEndElement();
	}


	/**
	 * databinding method to get an XML representation of this object
	 *
	 */
	public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
			throws org.apache.axis2.databinding.ADBException{

		java.util.ArrayList<Object> elementList = new java.util.ArrayList<Object>();
		java.util.ArrayList<Object> attribList = new java.util.ArrayList<Object>();

		addItem(localGetPropertiesResultTracker,localGetPropertiesResult,"GetPropertiesResult",elementList);
		addItems(localPropertyListsTracker,localPropertyLists,"PropertyLists",elementList);
		addItems(localErrorsTracker,localErrors,"Errors",elementList);
		return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
	}



	/**
	 *  Factory class that keeps the parse method
	 */
	public static class Factory extends GenericFactory { 

		/**
		 * static method to create the object
		 * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
		 *			 If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
		 * Postcondition: If this object is an element, the reader is positioned at its end element
		 *			 If this object is a complex type, the reader is positioned at the end element of its outer element
		 */
		public static GetPropertiesResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
			GetPropertiesResponse object =
					new GetPropertiesResponse();

			try {

				while (!reader.isStartElement() && !reader.isEndElement())
					reader.next();

				GetPropertiesResponse result = (GetPropertiesResponse) checkADBBeanType(NAME,reader); 
				if(result!=null) {
					return result;
				}

				reader.next();

				java.util.ArrayList <Object> list2 = new java.util.ArrayList<Object>();

				java.util.ArrayList <Object> list3 = new java.util.ArrayList<Object>();


				while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

				if (reader.isStartElement() && new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/","GetPropertiesResult").equals(reader.getName())) {

					object.setGetPropertiesResult(ReplyBase.Factory.parse(reader));

					reader.next();

				}  // End of if for expected property start element

				else {

				}


				while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

				if (reader.isStartElement() && new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/","PropertyLists").equals(reader.getName())) {

					// Process the array and step past its final element's end.
					list2.add(PropertyReplyList.Factory.parse(reader));

					//loop until we find a start element that is not part of this array
					boolean loopDone2 = false;
					while(!loopDone2) {
						loopDone2 = findStartElementNotPartOfTheArray("PropertyLists",reader);
						if(!loopDone2) {
							list2.add(PropertyReplyList.Factory.parse(reader));
						}
					}
					// call the converter utility  to convert and set the array
					object.setPropertyLists((PropertyReplyList[])
							org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
									PropertyReplyList.class,
									list2));

				}  // End of if for expected property start element
				while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

				if (reader.isStartElement() && new javax.xml.namespace.QName("http://opcfoundation.org/webservices/XMLDA/1.0/","Errors").equals(reader.getName())) {

					// Process the array and step past its final element's end.
					list3.add(OPCError.Factory.parse(reader));

					//loop until we find a start element that is not part of this array
					boolean loopDone3 = false;
					while(!loopDone3) {
						loopDone3 = findStartElementNotPartOfTheArray("PropertyLists",reader);
						if(!loopDone3) {
								list3.add(OPCError.Factory.parse(reader));
						}
					}
					// call the converter utility  to convert and set the array

					object.setErrors((OPCError[])
							org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
									OPCError.class,
									list3));

				}  // End of if for expected property start element

				while (!reader.isStartElement() && !reader.isEndElement())
					reader.next();

				if (reader.isStartElement())
					// A start element we are not expecting indicates a trailing invalid property
					throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());

			} catch (javax.xml.stream.XMLStreamException e) {
				throw new java.lang.Exception(e);
			}
			return object;
		}
	}//end of factory class
}