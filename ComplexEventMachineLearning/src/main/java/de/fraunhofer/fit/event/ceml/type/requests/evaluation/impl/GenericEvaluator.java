package de.fraunhofer.fit.event.ceml.type.requests.evaluation.impl;

import de.fraunhofer.fit.event.ceml.type.requests.evaluation.EvaluatorBase;
import eu.linksmart.api.event.ceml.data.DataDescriptors;
import eu.linksmart.api.event.ceml.evaluation.Evaluator;
import eu.linksmart.api.event.ceml.evaluation.metrics.ClassEvaluationMetric;
import eu.linksmart.api.event.ceml.evaluation.metrics.EvaluationMetric;
import eu.linksmart.api.event.ceml.evaluation.metrics.ModelEvaluationMetric;
import eu.linksmart.api.event.datafusion.JsonSerializable;
import eu.linksmart.gc.utils.function.Utils;
import eu.linksmart.gc.utils.logging.LoggerService;

import java.lang.reflect.Constructor;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

/**
 * Created by devasya on 7/20/2016.
 * This class is takes care of evaluating with the help of different EvaluationMetrics.
 */
public abstract class GenericEvaluator<T> extends EvaluatorBase<T> {
    protected static LoggerService loggerService = Utils.initDefaultLoggerService(WindowEvaluator.class);
    protected Map<String,EvaluationMetric> evaluationAlgorithms = new HashMap<>();
    protected ArrayList<TargetRequest> targets;

    public GenericEvaluator(Collection<String> namesClasses, ArrayList<TargetRequest> targets) {
        this.targets=targets;
        build(namesClasses);
    }


    public void setTargets(ArrayList<TargetRequest> targets) {
        this.targets = targets;
    }

    @Override
    public boolean isDeployable(){

        for(EvaluationMetric algorithm: evaluationAlgorithms.values())
            if(!algorithm.isReady())
                return false;
        return true;


    }

    @Override
    public void build(DataDescriptors classesNames) throws Exception {
        //TODO:Autogenerated code
    }


    @Override
    public void reBuild(Evaluator evaluator) {
        if(evaluator instanceof DoubleTumbleWindowEvaluator){
            DoubleTumbleWindowEvaluator aux = (DoubleTumbleWindowEvaluator)evaluator;
            for(TargetRequest algorithm: aux.getTargets()) {
                evaluationAlgorithms.get(algorithm.getName()).reBuild(algorithm);
            }

        }

    }
    @Override
    public Map<String,EvaluationMetric> getEvaluationAlgorithms(){
        return evaluationAlgorithms;
    }
    @Override
    public String report(){
        String report = "";
        for(EvaluationMetric algorithm: evaluationAlgorithms.values()){
            report += algorithm.report()+" || ";
        }
        return report;
    }


    @Override
    public JsonSerializable build() throws Exception {
        //TODO auto-generated
        return null;
    }

    public void build(Collection<String> namesClasses) {
        for(TargetRequest target:targets){
            String algorithm = WindowEvaluator.class.getCanonicalName()+"$"+target.getName();

            evaluationAlgorithms.put(
                    target.getName(),
                    instanceEvaluationAlgorithm(algorithm,target.getMethod(),target.getThreshold())
            );


        }
    }
    public EvaluationMetric instanceEvaluationAlgorithm(String canonicalName, String method, double target)  {

        try {
            Class clazz = Class.forName(canonicalName);

            Constructor constructor = null;


            EvaluationMetric.ComparisonMethod methodParameter = EvaluationMetric.ComparisonMethod.More;
            if(method.trim().toLowerCase().equals("equal")){
                methodParameter = EvaluationMetric.ComparisonMethod.Equal;

            } else if(method.trim().toLowerCase().contains("smaller")|| method.trim().toLowerCase().contains("less")){
                if(method.trim().toLowerCase().contains("equal")){
                    methodParameter = EvaluationMetric.ComparisonMethod.LessEqual;
                }else
                    methodParameter = EvaluationMetric.ComparisonMethod.Less;
            } else if(method.trim().toLowerCase().contains("bigger")|| method.trim().toLowerCase().contains("more")){
                if(method.trim().toLowerCase().contains("equal")){
                    methodParameter = EvaluationMetric.ComparisonMethod.MoreEqual;
                }
            }


            constructor = clazz.getConstructor(WindowEvaluator.class,EvaluationMetric.ComparisonMethod.class, double.class);
            Double aux =new Double(target);

            return  (EvaluationMetric) constructor.newInstance(this,methodParameter,aux);
        } catch (Exception e) {
            loggerService.error(e.getMessage(), e);
        }
        return null;
    }
}
