/** @file UDPReceive.java
 * @author (Modified by) Hussein Khaleel, Mauricio Caceres
 * @brief The class that establishes the UDP socket and receives the packet.
 */

package eu.ebbits.pwal.impl.driver.wsn.client;

import java.net.DatagramPacket;
import java.net.DatagramSocket;

import eu.ebbits.pwal.impl.driver.wsn.WSNDriverImpl;

public class UDPReceive extends Thread {

	private static int RX_PORT = 0; // 7730
	private boolean isConfigured = false;
	private boolean working = true;
	private WSNDriverImpl driver;
	
	public UDPReceive(WSNDriverImpl driver) {
		this.driver = driver;
	}


	/** @name receive
	 * @brief Method to create a UDP socket and enable the reception of UDP packets.
	 * @param rx_port reception port.
	 */
	//public void receive(int rx_port) {
	public void run() {
		if(isConfigured) {
			try {
				int port = RX_PORT;
	
				// Create a socket to listen on the port.
				DatagramSocket dsocket = new DatagramSocket(port);
	
				// Create a buffer to read datagrams into. If a
				// packet is larger than this buffer, the
				// excess will simply be discarded!
				byte[] buffer = new byte[2048];
	
				// Create a packet to receive data into the buffer
				DatagramPacket packet = new DatagramPacket(buffer, buffer.length);
	
				// Create a data decoder
				DataDecoder decoder = new DataDecoder(driver);
	
				// Waiting to receive packets and printing them.
				while (working) {
					// Wait to receive a datagram
					dsocket.receive(packet);
	
					// Convert the contents to a string, and display them
					//String msg = new String(buffer, 0, packet.getLength());
					//System.out.println(packet.getAddress().getHostName() + ": "	+ msg);
	
					//Decode the packet to extract the data
					decoder.decode(packet.getAddress(), packet.getPort(), packet.getLength(), packet.getData());
	
					// Reset the length of the packet before reusing it.
					packet.setLength(buffer.length);
				}
			} catch (Exception e) {
				System.err.println(e);
			}
		} else {
    		try {
				sleep(2000);
			} catch (InterruptedException e) {
			}
		}
	}
		
		
	/**
	 * Method to stop the thread
	 */
	public void stopReceive(){
		working = false;
	}


	/**
	 * @return the UDP port used
	 */	
	public int getRXPort() {
		return RX_PORT;
	}


	/**
	 * @param RX port used
	 */
	public void setRXPort(int rx_port) {
		RX_PORT = rx_port;
		isConfigured=true;
	}
}
