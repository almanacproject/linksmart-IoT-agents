package eu.ebbits.pwal.api.driver;

import java.util.Map;
import java.util.Vector;

import org.osgi.framework.ServiceRegistration;
import org.osgi.service.component.ComponentContext;
import org.osgi.service.event.Event;
import org.osgi.service.event.EventHandler;

/**
 * Generic interface for controlling the <code>PWALDriver</code>'s delegates.
 * Specific delegates implements this one.
 * <p> 
 * Copyright (c) 2010-2012 the ebbits project. All Rights Reserved.
 *
 * @author		ISMB
 * @version		%I%, %G%
 * @see 		PWALEventsDelegate
 * @see 		PWALServicesDelegate
 * @see 		PWALVariablesDelegate
 * @since		PWAL 0.1.0
 */
public interface PWALDelegate extends Runnable {

	/** 
	* Configures the delegate.
	*
	* @since		PWAL 0.1.0
	*/
	void configure(Map<String, Object> parameters) throws Exception;

	/** 
	* Configures the delegate.
	*
	* @since		PWAL 0.2.0
	*/
	void configure(String methodName, Vector<Object>values) throws Exception;

	/** 
	* Configures a delegate's param.
	*
	* @since		PWAL 0.2.0
	*/
	void configureParam(String methodName, Object value) throws Exception;

	
	/** 
	* Retrieves the delegate's associated driver.
	*
	* @return		the <code>PWALDriver</code> associated
	*  
	* @see			PWALDelegateSubscriber
	* @since		PWAL 0.2.0
	*/
	PWALDriver getDriver();

	/** 
	 * Sets the delegate's associated driver.
	 *
	 * @param s -	the <code>PWALDriver</code> to associate
	 * 
	 * @see			PWALDriver
	 * @since		PWAL 0.2.0
	*/
	void setDriver(PWALDriver driver);

	/** 
	 * Initializes the delegate.
	 * 
	 * @param context - the driver <code>ComponentContext</code>
	 * 
	 * @since		PWAL 0.1.0
	 */
	void init(ComponentContext context);

	/** 
	 * Checks whether the delegate is started.
	 * 
	 * @return		<code>true</code> if the delegate is started,
	 * 				<code>false</code> otherwise.
	 *
	 * @since		PWAL 0.1.0
	 */
	boolean isStarted();

	/** 
	 * Starts the delegate.
	 *
	 * @since		PWAL 0.1.0
	 */
	void start();

	/** 
	 * Stops the delegate.
	 *
	 * @since		PWAL 0.1.0
	 */
	void stop();

	/** 
	* Adds a new subscriber to the events.
	*
	* @param topic -	the topic to subscribe
	* @param filter -   a content filter to use (can be null)
	* @param handler -  the handler to register for the events
	*  
	* @since		PWAL 0.2.0
	*/
	ServiceRegistration subscribe(String topic, String filter, EventHandler handler) throws Exception;

	/** 
	* Removes a subscriber from the events.
	*
	* @param reg		the <code>ServiceRegistration</code> to unsubscribe
	*  
	* @since		PWAL 0.2.0
	*/
	void unsubscribe(ServiceRegistration reg) throws Exception;
	
	
	/** 
	* Removes subscribers from the events.
	*
	* @param regs		the <code>ServiceRegistrations</code> to unsubscribe
	*  
	* @since		PWAL 0.2.0
	*/	
	void unsubscribe(Vector<ServiceRegistration> regs) throws Exception;
	
	
	/** 
	* Sends an event.
	*
	* @param e		the <code>Event</code> to send
	*  
	* @since		PWAL 0.2.0
	*/		
	void sendEvent(Event e);
}
