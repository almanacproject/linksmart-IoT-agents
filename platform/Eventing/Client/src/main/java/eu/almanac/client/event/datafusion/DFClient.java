package eu.almanac.client.event.datafusion;

import datafusion.sdk.client.epl.StatementSender;
import org.apache.commons.cli.*;
import org.apache.commons.io.FileUtils;

import java.io.File;
import java.io.IOException;
/**
 * Created by Caravajal on 27.10.2014.
 */
public class DFClient {

    public static void main(String[] args) {
        CommandLine cmd = parseArg(args);


        if(cmd==null)
            return ;

        try {

            String name , statement , source = null, hostname = "localhost", port="1883";
            String[] input = null, output = null, scope = null;
            if (cmd.hasOption("name")) {
                name = cmd.getOptionValue("name");
            } else {

                HelpFormatter formatter = new HelpFormatter();
                formatter.printHelp("DFClient", getCommandArgsOptions());

                System.exit(-1);
                return ;
            }
            if (cmd.hasOption("query")) {
                statement = cmd.getOptionValue("query");


            } else if (cmd.hasOption("file")){
                try {
                    statement = FileUtils.readFileToString(new File(cmd.getOptionValue("file")), "utf-8").replace("\n", "").replace("\r","");


                } catch (IOException e) {
                    System.err.println(e.getMessage());
                    System.exit(-1);
                    return ;
                }
            }else {

                HelpFormatter formatter = new HelpFormatter();
                formatter.printHelp("DFClient", getCommandArgsOptions());
                System.exit(-1);
                return ;
            }
            if (cmd.hasOption("entity")) {
                source = cmd.getOptionValue("entity");
            }
            if (cmd.hasOption("input")) {
                input = new String[]{cmd.getOptionValue("input")};
            }
            if (cmd.hasOption("output")) {
                output = new String[]{cmd.getOptionValue("output")};
            }
            if (cmd.hasOption("scope")) {
                scope = new String[]{cmd.getOptionValue("scope")};
            }
            if (cmd.hasOption("port")) {
                port = cmd.getOptionValue("port");
            }
            if (cmd.hasOption("hostname")) {
                hostname =cmd.getOptionValue("hostname");
            }

            StatementSender statementSender = new StatementSender (hostname,port);

            String feedback = statementSender.send(StatementSender.factory(name, statement, scope, source, input, output));

            System.out.println(feedback);

        } catch (Exception e) {
            e.printStackTrace();
        }



        System.exit(0);

    }
    public static Options getCommandArgsOptions(){
        Options options = new Options();

        options.addOption(
                OptionBuilder
                        .withLongOpt("hostname")
                        .withArgName("hostname")
                        .hasArg()
                        .withDescription(  "hostname of the broker where the statements will be send (Default: localhost)" )
                        .create( "h" )
        );
        options.addOption(
                OptionBuilder
                        .withLongOpt("port")
                        .withArgName("port")
                        .hasArg()
                        .withDescription(  "port of the broker where the statements will be send (Default: 1883)" )
                        .create( "p" )
        );
        options.addOption(
                OptionBuilder
                        .withLongOpt("name")
                        .withArgName("string")
                        .isRequired()
                        .hasArg()
                        .withDescription("Name of the query (Mandatory)")
                        .create("n")
        );
        options.addOption(
                OptionBuilder
                        .withLongOpt("query")
                        .withArgName("DFL")
                        .hasArg()
                        .withDescription(  "The body of the query/statement (Mandatory or option -f)" )
                        .create( "q" )
        );
        options.addOption(
                OptionBuilder
                        .withLongOpt("file")
                        .withArgName( "DFL" )
                        .hasArg()
                        .withDescription(  "Query from a file (Mandatory)" )
                        .create( "f" )
        );
        options.addOption(
                OptionBuilder
                        .withLongOpt("entity")
                        .withArgName("IoTEntityURI")
                        .hasArg()
                        .withDescription(  "IoT Entity which will be the source of the events generated by the query (Optional)" )
                        .create( "e" )
        );
        options.addOption(
                OptionBuilder
                        .withLongOpt("input")
                        .withArgName("MQTT_Topic")
                        .hasArg()
                        .withDescription(  "Topics where the events involved in the query are being published (Optional,Deprecated)" )
                        .create( "i" )
        );
        options.addOption(
                OptionBuilder
                        .withLongOpt("output")
                        .withArgName("MQTT_Topic")
                        .hasArg()
                        .withDescription(  "Allows the specification of other topic which the events generated by the query will be published (Optional)" )
                        .create( "o" )
        );

        options.addOption(
                OptionBuilder
                        .withLongOpt("scope")
                        .withArgName("string")
                        .hasArg()
                        .withDescription(  "In which broker the punishment will be visible (Optional)" )
                        .create( "S" )
        );
        return options;
    }
    public static CommandLine parseArg(String[] parameters)
    {
        Options options =getCommandArgsOptions();

        CommandLineParser parser = new GnuParser();
        try {
            CommandLine cmd = parser.parse( options, parameters);

            if(!cmd.hasOption("q") && !cmd.hasOption("f"))
                throw new ParseException("Missing required options either q or f");

            return cmd;
        } catch (ParseException e) {
            System.err.println(e.getMessage());
            HelpFormatter formatter = new HelpFormatter();
            formatter.printHelp("DFClient", getCommandArgsOptions());
            return null;
        }

    }
}
